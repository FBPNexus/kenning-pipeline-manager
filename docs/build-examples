#!/usr/bin/env python3

# Copyright (c) 2022-2024 Antmicro <www.antmicro.com>
#
# SPDX-License-Identifier: Apache-2.0

"""
Script for building all examples from the Pipeline Manager for the
documentation.
"""

import argparse
import errno
import shutil
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent.absolute()))

from pipeline_manager.frontend_builder import (  # noqa: E402
    build_frontend,
    build_prepare,
)
from pipeline_manager.validator import validate  # noqa: E402


def main(argv):  # noqa: D103
    parser = argparse.ArgumentParser(argv[0])
    parser.add_argument(
        "examples_dir",
        help="Directory with examples to build samples from",
        type=Path,
    )
    parser.add_argument(
        "output_dir", help="Directory where outputs will be stored", type=Path
    )

    args = parser.parse_args(argv[1:])

    if not args.examples_dir.exists():
        return errno.EINVAL

    build_prepare()

    build_frontend(
        build_type="static-html",
        mode="production",
        output_directory=args.output_dir,
        skip_install_deps=True,
    )

    graphs_dir = args.output_dir / "graphs"
    graphs_dir.mkdir(parents=True, exist_ok=True)

    all_specs = args.examples_dir.rglob("*-specification.json")
    for spec in all_specs:
        dataflow = Path(str(spec).replace("specification", "dataflow"))
        if not dataflow.is_file():
            dataflow = None
            # Each example is required to have a dataflow
            print(
                f"The specification {spec} misses its corresponding dataflow."
            )
            print("Please provide an example dataflow")
            return errno.EINVAL
        status = validate(
            specification_path=spec,
            dataflow_paths=[dataflow],
        )
        if status != 0:
            print("The graph with:\n")
            print(f"* Specification:  {spec}")
            print(f"* Dataflow:  {dataflow}")
            print("Is invalid. Please check the errors for details")
            return status
        shutil.copy(spec.absolute(), graphs_dir / spec.name)
        shutil.copy(dataflow, graphs_dir / dataflow.name)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
