{"version":3,"file":"js/index-a5943e60.640f9dac.js","mappings":"sMAQO,MAAMA,GAAqB,SAAI,GAChCC,GAAgB,QAAI,IACnB,MAAMC,EACT,WAAAC,CAAYC,EAAMC,EAAOC,GAAM,UAC3BC,OAAOC,eAAeC,KAAM,OAAQ,CAChCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAO,IAEXN,OAAOC,eAAeC,KAAM,gBAAiB,CACzCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAO,IAKXN,OAAOC,eAAeC,KAAM,QAAS,CACjCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAO,IAEXJ,KAAKL,KAAOA,EACZK,KAAKJ,MAAQA,EACbI,KAAKR,cAAgBK,CACzB,CAEA,GAAAQ,CAAIC,GACA,MAAM,IAAIC,MAAM,6CAA6CP,KAAKJ,QACtE,CAEA,MAAAY,CAAOF,GACH,MAAM,IAAIC,MAAM,gDAAgDP,KAAKJ,QACzE,CAEA,IAAAa,CAAKH,GACD,MAAM,IAAIC,MAAM,8CAA8CP,KAAKJ,QACvE,EAEJ,MAAMc,UAAiBjB,EACnB,WAAAC,CAAYC,EAAMC,EAAOC,GAAM,UACf,KAARA,IACAA,GAAM,UACVc,MAAMhB,EAAMC,EAAOC,GACnBC,OAAOC,eAAeC,KAAM,YAAa,CACrCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,MAAO,IAEf,CACA,GAAAC,CAAIC,QAC0BM,IAAtBZ,KAAKa,UAAU,IACLP,EAAMF,MAAMU,QAAQd,KAAKa,UAAU,IAC3CE,KAAKf,KAAKa,UAAU,GAE9B,CACA,MAAAL,CAAOF,GACH,MAAMU,EAAOV,EAAMF,MAAMa,MAAMC,MAAMC,GAAMA,EAAEC,KAAOpB,KAAKJ,aAC5CgB,IAATI,IACAhB,KAAKa,UAAY,CAACG,EAAMA,EAAKK,QAC7Bf,EAAMF,MAAMkB,WAAWN,GAE/B,CACA,IAAAP,CAAKH,GACD,QAA0BM,IAAtBZ,KAAKa,UAAU,GAAkB,CAEjC,MAAMU,EAAa,IACZzB,OAAO0B,OAAOxB,KAAKa,UAAU,GAAGY,WAChC3B,OAAO0B,OAAOxB,KAAKa,UAAU,GAAGa,UAEjCC,EAAcrB,EAAMF,MAAMuB,YAAYC,QAAQC,GAAMN,EAAWO,SAASD,EAAEE,OAASR,EAAWO,SAASD,EAAEG,MAE/G1B,EAAMF,MAAMkB,WAAWtB,KAAKa,UAAU,IAEtC,MAAMM,EAAIb,EAAMF,MAAMU,QAAQd,KAAKa,UAAU,IACvCQ,EAAOrB,KAAKa,UAAU,GAC5Bb,KAAKa,UAAY,CAACb,KAAKa,UAAU,GAAIb,KAAKa,UAAU,GAAGQ,QACvDF,EAAEJ,KAAKM,GAEPM,EAAYM,SAASC,IACjB5B,EAAMF,MAAM+B,cAAcD,EAAKH,KAAMG,EAAKF,GAAG,GAErD,CACJ,EAEJ,MAAMI,UAAuB3C,EACzB,WAAAC,CAAYC,EAAMC,EAAOC,GAAM,UACf,KAARA,IACAA,GAAM,UACVc,MAAMhB,EAAMC,EAAOC,GACnBC,OAAOC,eAAeC,KAAM,OAAQ,CAChCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAOQ,GAEf,CACA,GAAAP,CAAIC,GACA,QAAkBM,IAAdZ,KAAKkC,KAAoB,CAKzB,MAAMG,EAAW/B,EAAMF,MAAMkC,aAAatC,KAAKkC,KAAKH,KAAKQ,QACnDC,EAASlC,EAAMF,MAAMkC,aAAatC,KAAKkC,KAAKF,GAAGO,QACrD,IAAKF,IAAaG,EACd,OACJ,MAAMT,EAAO,IACNjC,OAAO0B,OAAOa,EAASZ,WACvB3B,OAAO0B,OAAOa,EAASX,UAC5BE,QAAQa,GAAUA,EAAMC,OAAMxB,MAAMuB,GAAUA,EAAMrB,KAAOpB,KAAKkC,KAAKH,KAAKX,KACtEY,EAAK,IACJlC,OAAO0B,OAAOgB,EAAOf,WACrB3B,OAAO0B,OAAOgB,EAAOd,UAC1BE,QAAQa,GAAUA,EAAMC,OAAMxB,MAAMuB,GAAUA,EAAMrB,KAAOpB,KAAKkC,KAAKF,GAAGZ,KAC1E,IAAKW,IAASC,EACV,OACJ,MAAMW,EAAYrC,EAAMF,MAAM+B,cAAcJ,EAAMC,GAClD,QAAkBpB,IAAd+B,EACA,OAEJA,EAAUvB,GAAKpB,KAAKkC,KAAKd,EAC7B,CACJ,CACA,MAAAZ,CAAOF,GACH,MAAM4B,EAAO5B,EAAMF,MAAMuB,YAAYT,MAAMC,GAAMA,EAAEC,KAAOpB,KAAKJ,aAClDgB,IAATsB,IACAlC,KAAKkC,KAAOA,EACZ5B,EAAMF,MAAMwC,iBAAiBV,GAErC,EAEJ,MAAMW,UAAmBpD,EACrB,WAAAC,CAAYC,EAAMC,EAAOC,GAAM,UACf,KAARA,IACAA,GAAM,UACVc,MAAMhB,EAAMC,EAAOC,GACnBC,OAAOC,eAAeC,KAAM,SAAU,CAClCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAOQ,GAEf,CACA,GAAAP,CAAIC,GACA,QAAoBM,IAAhBZ,KAAK8C,OAAsB,CAC3B,MAAMZ,EAAO5B,EAAMF,MAAMuB,YAAYT,MAAMC,GAAMA,EAAEY,KAAKX,KAAOpB,KAAK8C,OAAO,GAAGf,KAAKX,IAC/ED,EAAEa,GAAGZ,KAAOpB,KAAK8C,OAAO,GAAGd,GAAGZ,IAC9BD,EAAEC,KAAOpB,KAAK8C,OAAO,GAAG1B,UACfR,IAATsB,QACqBtB,IAAjBsB,EAAKa,UACLb,EAAKa,QAAU,IACvBb,EAAKa,QAAQC,OAAOhD,KAAK8C,OAAO,GAAI,EAAG9C,KAAK8C,OAAO,GACvD,CACJ,CACA,MAAAtC,CAAOF,GACH,QAAoBM,IAAhBZ,KAAK8C,OAAsB,CAC3B,MAAMZ,EAAO5B,EAAMF,MAAMuB,YAAYT,MAAMC,GAAMA,EAAEY,OAAS/B,KAAK8C,OAAO,GAAGf,MAAQZ,EAAEa,KAAOhC,KAAK8C,OAAO,GAAGd,UAC9FpB,IAATsB,GACAA,EAAKa,QAAQC,OAAOhD,KAAK8C,OAAO,GAAI,EAC5C,CACJ,EAEG,SAASG,EAAuB7C,GACnCb,EAAmBa,MAAQA,CAC/B,CACO,SAAS8C,EAAiB9B,GAAK,UAClC,GAA4B,KAAxB5B,EAAcY,MAGlB,OADAZ,EAAcY,MAAQgB,EACfA,CACX,CACO,SAAS+B,IACZ3D,EAAcY,MAAQ,EAC1B,CACO,SAASgD,EAAW9C,EAAO+C,GAC9B,MAAMC,EAAQC,OAAO,sBAEfC,EAAU,IAAIC,IACdC,EAAgB,IAAID,IAC1B,IAAIE,EAAY,mCACZC,EAAQ,mCACZ,MAAMC,EAA6B,CAACC,EAAGC,KACnCD,EAAEE,OAAOlD,QAAQmD,YAAYF,GAC7BD,EAAEE,OAAO1C,WAAW2C,YAAYF,GAChCD,EAAEE,OAAOE,SAASD,YAAYF,GAC9BD,EAAEE,OAAO7B,cAAc8B,YAAYF,GACnCD,EAAEE,OAAOpB,iBAAiBqB,YAAYF,GACtCD,EAAEE,OAAOG,UAAUF,YAAYF,GAC/BD,EAAEE,OAAOI,aAAaH,YAAYF,EAAI,EAGpCM,EAAc,CAACC,EAAUC,EAAUC,GAAiB,KAItD,GAHID,GACAV,EAA2BU,EAAUjB,GAErCgB,EAAU,CAOV,GANAV,EAAQD,EACRA,EAAYW,EAASlD,QACUR,IAA3B4C,EAAQiB,IAAId,IACZH,EAAQkB,IAAIf,EAAW,SACU/C,IAAjC8C,EAAce,IAAId,IAClBD,EAAcgB,IAAIf,EAAW,IAC7Ba,EAAgB,CAChB,MAAMG,EAAajB,EAAce,IAAIb,GACjCe,GACAjB,EAAcgB,IAAIf,EAAWgB,GACjC,MAAMC,EAAcpB,EAAQiB,IAAIb,GAC5BgB,GACApB,EAAQkB,IAAIf,EAAWiB,EAC/B,CACAN,EAASN,OAAOlD,QAAQ+D,UAAUvB,GAAQtC,IACtC,IAAKzB,EAAmBa,MAAO,CAC3B,MAAMwE,EAAcpB,EAAQiB,IAAIH,EAASlD,IACzC,IAAKwD,EACD,OACJA,EAAYE,KAAK,IAAIpE,EAAS,MAAOM,EAAKI,GAAG2D,WAAYvF,EAAcY,QACvEsD,EAAcgB,IAAIJ,EAASlD,GAAI,GACnC,KAEJkD,EAASN,OAAO1C,WAAWuD,UAAUvB,GAAQtC,IACzC,IAAKzB,EAAmBa,MAAO,CAC3B,MAAMwE,EAAcpB,EAAQiB,IAAIH,EAASlD,IACzC,IAAKwD,EACD,OACJ,MAAMI,EAAO,IAAItE,EAAS,MAAOM,EAAKI,GAAG2D,WAAYvF,EAAcY,OACnEwE,EAAYE,KAAKE,GACjBA,EAAKnE,UAAY,CAACG,EAAMA,EAAKK,QAC7BqC,EAAcgB,IAAIJ,EAASlD,GAAI,GACnC,KAEJkD,EAASN,OAAOE,SAASW,UAAUvB,GAAQtC,IACvC,IAAKzB,EAAmBa,MAAO,CAC3B,MAAMwE,EAAcpB,EAAQiB,IAAIH,EAASlD,IACzC,IAAKwD,EACD,OACJ,MAAMI,EAAO,IAAItE,EAAS,OAAQM,EAAKI,GAAG2D,WAAYvF,EAAcY,OACpEwE,EAAYE,KAAKE,GACjBA,EAAKnE,UAAY,CAACG,EAAMA,EAAKK,QAC7BqC,EAAcgB,IAAIJ,EAASlD,GAAI,GACnC,KAEJkD,EAASN,OAAO7B,cAAc0C,UAAUvB,GAAQpB,IAC5C,IAAK3C,EAAmBa,MAAO,CAC3B,MAAMwE,EAAcpB,EAAQiB,IAAIH,EAASlD,IACzC,IAAKwD,EACD,OACJA,EAAYE,KAAK,IAAI1C,EAAe,MAAOF,EAAKd,GAAG2D,WAAYvF,EAAcY,QAC7EsD,EAAcgB,IAAIJ,EAASlD,GAAI,GACnC,KAEJkD,EAASN,OAAOpB,iBAAiBiC,UAAUvB,GAAQpB,IAC/C,IAAI+C,EACJ,IAAK1F,EAAmBa,MAAO,CAC3B,MAAM8E,EAAwC,KAAxB1F,EAAcY,MAC/B8E,GACDhC,IACJ,MAAM0B,EAAcpB,EAAQiB,IAAIH,EAASlD,IACzC,IAAKwD,EACD,QACqB,QAAvBK,EAAK/C,EAAKa,eAA4B,IAAPkC,EAAgBA,EAAK,IAAIE,QAAQC,UAAUnD,SAASa,IACjFwB,EAASN,OAAOI,aAAaiB,KAAK,CAACnD,EAAMA,EAAKa,QAAQuC,QAAQxC,IAAS,IAE3E,MAAMkC,EAAO,IAAI5C,EAAe,MAAOF,EAAKd,GAAG2D,WAAYvF,EAAcY,OACzEwE,EAAYE,KAAKE,GACjBA,EAAK9C,KAAOA,EACZwB,EAAcgB,IAAIJ,EAASlD,GAAI,IAC1B8D,GACD/B,GACR,KAEJmB,EAASN,OAAOG,UAAUU,UAAUvB,GAAQiC,IACxC,IAAKhG,EAAmBa,MAAO,CAC3B,MAAMwE,EAAcpB,EAAQiB,IAAIH,EAASlD,IACzC,IAAKwD,EACD,OACJ,MAAMY,EAAMC,KAAKC,OAAOH,EAAM,GAAK,GAAK,GAClCrD,EAAOqD,EAAM,GACbP,EAAO,IAAInC,EAAW,MAAOX,EAAKa,QAAQyC,GAAKpE,GAAG2D,WAAYvF,EAAcY,OAClFwE,EAAYE,KAAKE,GACjBA,EAAKlC,OAAS,CAACZ,EAAMA,EAAKa,QAAQyC,GAAMA,GACxC9B,EAAcgB,IAAIJ,EAASlD,GAAI,GACnC,KAEJkD,EAASN,OAAOI,aAAaS,UAAUvB,GAAQiC,IAC3C,IAAKhG,EAAmBa,MAAO,CAC3B,MAAMwE,EAAcpB,EAAQiB,IAAIH,EAASlD,IACzC,IAAKwD,EACD,OACJ,MAAMY,EAAMD,EAAM,GACZrD,EAAOqD,EAAM,GACbP,EAAO,IAAInC,EAAW,MAAOX,EAAKa,QAAQyC,GAAKpE,GAAG2D,WAAYvF,EAAcY,OAClFwE,EAAYE,KAAKE,GACjBA,EAAKlC,OAAS,CAACZ,EAAMA,EAAKa,QAAQyC,GAAMA,GACxC9B,EAAcgB,IAAIJ,EAASlD,GAAI,GACnC,IAER,IAEJ,QAAMd,GAAO,CAACgE,EAAUC,IAAaF,EAAYC,EAAUC,IAAW,CAAEoB,MAAO,OAAQC,WAAW,IAClG,MAAMC,EAAwB,CAACC,EAAaC,KACxC,MAAMf,EAAOc,EAAYE,WACZpF,IAAToE,IAEJzF,EAAmBa,OAAQ,EACT,QAAd4E,EAAKrF,MACLqF,EAAKrF,KAAO,MACZqF,EAAKxE,OAAOF,IAEO,QAAd0E,EAAKrF,MACVqF,EAAKrF,KAAO,MACZqF,EAAK3E,IAAIC,IAEU,SAAd0E,EAAKrF,OACVqF,EAAKrF,KAAO,OACZqF,EAAKvE,KAAKH,IAEdyF,EAAiBjB,KAAKE,GAClBc,EAAYG,OAAS,GACrBH,EAAYA,EAAYG,OAAS,GAAGzG,gBAAkBwF,EAAKxF,eAC3DqG,EAAsBC,EAAaC,GACvCxG,EAAmBa,OAAQ,EAC3BE,EAAMF,MAAM8F,cAAclD,OAAO,EAAG1C,EAAMF,MAAM8F,cAAcD,QAAO,EAiCzE,OA/BA5C,EAAe8C,gBAAgB,OAAQ,CACnCC,WAAY,KAAM,EAClBC,QAAS,KACL,MAAMzB,EAAcpB,EAAQiB,IAAId,GAChC,GAAIiB,GAAsC,IAAvBA,EAAYqB,OAAc,CACzC,MAAMtB,EAAajB,EAAce,IAAId,GACjCiB,GAAeD,GACfkB,EAAsBjB,EAAaD,EAC3C,KAGRtB,EAAe8C,gBAAgB,OAAQ,CACnCC,WAAY,KAAM,EAClBC,QAAS,KACL,MAAMzB,EAAcpB,EAAQiB,IAAId,GAC1BgB,EAAajB,EAAce,IAAId,GACjCiB,GAAeD,GAAoC,IAAtBA,EAAWsB,QACxCJ,EAAsBlB,EAAYC,EACtC,IAGRvB,EAAe8C,gBAAgB,oBAAqB,CAChDC,WAAY,IAA8B,KAAxB5G,EAAcY,MAChCiG,QAAS,IAAMnD,IAEnBG,EAAe8C,gBAAgB,qBAAsB,CACjDC,WAAY,IAA8B,KAAxB5G,EAAcY,MAChCiG,QAAS,IAAMlD,IAEnBE,EAAeiD,eAAe,CAAC,UAAW,KAAM,QAChDjD,EAAeiD,eAAe,CAAC,UAAW,KAAM,SACzC,QAAS,CACZC,UAnLa,IAoLblC,cACAR,8BAER,C,iCC3WA,MAAM2C,EAIF,WAAA9G,CAAY+G,GACR3G,OAAOC,eAAeC,KAAM,gBAAiB,CACzCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAO,IAEXN,OAAOC,eAAeC,KAAM,OAAQ,CAChCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAOQ,IAGXd,OAAOC,eAAeC,KAAM,gBAAiB,CACzCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,OAAO,IAEXJ,KAAKyG,cAAgBA,CACzB,CAKA,eAAIC,GAEA,OADoBC,SAASC,cAAc,kBAAkB5G,KAAKyG,gCAEtE,CAIA,cAAII,GACA,OAAO7G,KAAK8G,aAChB,CACA,cAAID,CAAWzG,GACX,MAAM,YAAEsG,GAAgB1G,KACpB0G,IACKtG,GACDsG,EAAYK,UAAUvG,OAAO,WACjCkG,EAAYM,MAAMC,MAAQ,MAE9BjH,KAAK8G,cAAgB1G,OACHQ,IAAdZ,KAAKkH,MACLlH,KAAKkH,MAEb,EASJ,MAAMC,UAAmB1D,IACrB,WAAA/D,CAAY0H,GACRzG,QACAb,OAAOC,eAAeC,KAAM,iBAAkB,CAC1CC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAO,IAEXJ,KAAKoH,eAAiBA,CAC1B,CACA,GAAA3C,CAAI4C,GAKA,OAJK1G,MAAM2G,IAAID,IACX1G,MAAM+D,IAAI2C,EAAKrH,KAAKoH,eAAeC,IAGhC1G,MAAM8D,IAAI4C,EACrB,EAgCJ,YAzBA,cAAyBF,EACrB,WAAAzH,GACIiB,SAAS4G,WACTzH,OAAOC,eAAeC,KAAM,OAAQ,CAChCC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAOQ,GAEf,CACA,GAAA6D,CAAI4C,GACA,IAAK1G,MAAM2G,IAAID,GAAM,CACjB,MAAMG,EAAWxH,KAAKoH,eAAeC,GACrCG,EAASN,KAAOlH,KAAKkH,KACrBvG,MAAM+D,IAAI2C,EAAKG,EACnB,CAEA,OAAO7G,MAAM8D,IAAI4C,EACrB,CACA,OAAAI,CAAQP,GACJlH,KAAKkH,KAAOA,EAEZlH,KAAKiC,SAASyF,IAAQA,EAAER,KAAOA,CAAI,GACvC,IAE2BG,GAAQ,IAAIb,EAAQa,I,oCCA5C,MAAMM,EAAK,IAjHX,MACH,WAAAjI,GACII,OAAOC,eAAeC,KAAM,oBAAqB,CAC7CC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,MAAO,IAAIqD,KAEnB,CAIA,aAAAmE,GACI5H,KAAK6H,kBAAkBC,OAC3B,CASA,qBAAAC,CAAsBC,EAAQC,GAC1B,MAAMC,EAAkBlI,KAAK6H,kBAAkBpD,IAAIuD,GACnD,IAAKE,EACD,MAAM,IAAI3H,MAAM,qBAAqByH,gCAEzCE,EAAgBC,SAASrD,KAAKmD,EAClC,CAOA,qBAAAG,CAAsBC,GAClB,MAAMH,EAAkBlI,KAAK6H,kBAAkBpD,IAAI4D,EAAKjH,IACxD,IAAK8G,EACD,MAAM,IAAI3H,MAAM,sBAAsB8H,EAAKjH,iCAE/CtB,OAAOC,eAAesI,EAAM,sBAAuB,CAC/C5D,IAAG,IACQyD,EAAgBA,gBAAgBI,oBAE3C,GAAA5D,CAAItE,GACA8H,EAAgBA,gBAAgBI,oBAAsBlI,CAC1D,IAEJN,OAAOC,eAAesI,EAAM,kBAAmB,CAC3C5D,IAAG,IACQyD,EAAgBA,gBAAgBK,gBAE3C,GAAA7D,CAAItE,GACA8H,EAAgBA,gBAAgBK,gBAAkBnI,CACtD,IAEJN,OAAOC,eAAesI,EAAM,OAAQ,CAChC5D,IAAG,IACQyD,EAAgBA,gBAAgBvI,MAGnD,CAOA,YAAA6I,CAAaR,GACT,OAAOhI,KAAK6H,kBAAkBP,IAAIU,EACtC,CAOA,sBAAAS,CAAuBT,GACnB,IAAKhI,KAAK6H,kBAAkBP,IAAIU,GAC5B,MAAM,IAAIzH,MAAM,mBAAmByH,wBAEvC,OAAOhI,KAAK6H,kBAAkBpD,IAAIuD,EACtC,CAOA,yBAAAU,CAA0BV,GACtB,IAAKhI,KAAK6H,kBAAkBP,IAAIU,GAC5B,MAAM,IAAIzH,MAAM,mBAAmByH,wBAEvC,OAAOhI,KAAK6H,kBAAkBc,OAAOX,EACzC,CAOA,iBAAAY,CAAkBP,EAAMJ,GACpB,GAAIjI,KAAK6H,kBAAkBP,IAAIe,EAAKjH,IAChC,MAAM,IAAIb,MAAM,yCAAyC8H,EAAKjH,qCAElEpB,KAAK6H,kBAAkBnD,IAAI2D,EAAKjH,GAAI,CAChC8G,gBAAiBG,EACjBQ,uBAAwBZ,EACxBE,SAAU,IAElB,E,0DCxGG,SAASW,EAAYC,GAExB,OADkCC,GAAUvD,KAAKwD,MAAMD,EAAQD,EAAa3I,OAAS2I,EAAa3I,KAEtG,CAOO,SAAS8I,EAAYC,GACxB,MAAM,MAAE7I,IAAU,UAUlB,MARiC,CAAC0I,EAAOzG,EAAQ6G,KAC7C,MAAMC,EAAgB/I,EAAMF,MAAMa,MAE7BW,QAAQZ,GAASA,EAAKI,KAAOmB,IAAW6G,EAAiBtH,SAASd,EAAKI,MACvEkI,KAAKtI,GAASA,EAAKuI,SAASJ,KAC5BvH,QAAQ4H,GAAgB/D,KAAKgE,IAAIT,EAAQQ,GAN7B,MAOjB,OAAgC,IAAzBH,EAAcpD,OAAeR,KAAKiE,OAAOL,QAAiBzI,CAAS,CAGlF,C,iLCfO,MAAM+I,EAAe,OACfC,EAAiB,SACjBC,EAAsB,cACtBC,EAAgB,Q,eCdd,MAAMC,EACjBC,MAAQ,IAAIvG,IAEZwG,aAAe,CACXC,2BAA4B,QAC5BC,yBAA0B,UAC1BC,eAAgB,WAOpB,WAAA1K,CAAY2K,GACRA,EAAWC,MAAMC,gBAAgB1F,UAAU7E,MAAM,EAAGqI,OAAMmC,SACtD,GAAInC,EAAK1I,KAAM,CACX,MACM8K,EADQzK,KAAK0K,cAAcrC,EAAK1I,MACduB,MAAMyJ,QAAwC/J,IAAlCZ,KAAKgK,MAAMW,IAAIP,iBAEnD,QAAkBxJ,IAAd6J,EAAyB,CACzB,MAAMG,EAAQ5K,KAAKgK,MAAMS,GAAWL,eAC9BS,EAAQL,EAAG5D,cAAc,iCAC/B,GAAc,OAAViE,EAAgBA,EAAM7D,MAAM8D,gBAAkBF,MAC7C,CACD,MAAMG,EAAYP,EAAG5D,cAAc,WACjB,OAAdmE,IACAA,EAAU/D,MAAM8D,gBACZE,iBAAiBD,GAAWE,iBAAiB,aAEzD,CACJ,CACJ,CAEA,MAAO,CAAE5C,OAAMmC,KAAI,GAE3B,CAEA,aAAAE,CAAc/K,GACV,MAAuB,iBAATA,GAAqBA,aAAgBuL,OAAS,CAACvL,GAAQA,CACzE,CAcA,kBAAAwL,CAAmBpJ,EAAMC,GACrB,MAAMoJ,EAAYpL,KAAK0K,cAAc3I,GAAMpC,MACrC0L,EAAUrL,KAAK0K,cAAc1I,GAAIrC,MAEvC,QAAmBiB,IAAfmB,GAAMpC,KACN,OAAOK,KAAKiK,aAGhB,QAAiBrJ,IAAboB,GAAIrC,KAAoB,CACxB,MAAM8K,EAAYW,EAAUlK,MAAMyJ,QAAwB/J,IAAlBZ,KAAKgK,MAAMW,KACnD,MAAO,IAAK3K,KAAKiK,gBAAiBjK,KAAKgK,MAAMS,GACjD,CAEA,MAAMa,EAAcF,EAAUxJ,QAAQ+I,GAAMU,EAAQvJ,SAAS6I,KAC7D,GAAIY,MAAMC,QAAQF,IAAgBA,EAAYrF,OAAS,EACnD,OAAOjG,KAAKiK,aAGhB,MAAMQ,EAAYa,EAAYpK,MAAMyJ,QAAwB/J,IAAlBZ,KAAKgK,MAAMW,KACrD,MAAO,IAAK3K,KAAKiK,gBAAiBjK,KAAKgK,MAAMS,GACjD,CAYA,kBAAAgB,CAAmBC,GACf1L,KAAKgK,MAAQ,CAAC,EACV0B,GAAUnK,YACVzB,OAAO6L,QAAQD,EAASnK,YAAYU,SAAQ,EAAEtC,EAAMiM,MAChD5L,KAAKgK,MAAMrK,GAAQ,IAAKiM,EAAIC,KAAMlM,EAAM,GAGpD,E,qEC5EJ,SAASmM,EAAgBC,EAAYC,EAASC,GAC1C,MAAM,OAAE1J,GAAWwJ,EAAWhK,KACxBmK,EAAWvF,SAASwF,eAAe5J,GAEzC,QADmB2J,EAAWA,EAASE,UAAYF,EAASG,aAAe,GACtDJ,EAAQK,GAAKN,CACtC,CAaA,SAASO,EAAkBC,EAAGF,EAAGG,EAAIC,EAAIC,GAGrC,MAAO,CAFIlH,KAAKmH,KAAKnH,KAAKgE,KAAK+C,EAAIC,IAAOD,EAAIC,IAAQD,EAAIC,IAAOH,EAAII,GAAOC,IACjElH,KAAKmH,KAAKnH,KAAKgE,KAAK6C,EAAII,IAAOJ,EAAII,IAAOJ,EAAII,IAAOF,EAAIC,GAAME,IAE9E,CAEA,MAAME,EAKF,WAAAnN,CAAYoN,EAAIC,EAAIC,EAAIC,EAAIlB,GACxB/L,KAAK8M,GAAKA,EACV9M,KAAK+M,GAAKA,EACV/M,KAAKgN,GAAKA,EACVhN,KAAKiN,GAAKA,EACVjN,KAAK+B,KAAOgK,EAAWhK,KACnBgK,EAAW/J,KACXhC,KAAKgC,GAAK+J,EAAW/J,IAEQ,UAAxBhC,KAAK+B,KAAKmL,WAA+C,WAAtBlN,KAAKgC,GAAGkL,WACnB,UAAxBlN,KAAK+B,KAAKmL,WAA+C,UAAtBlN,KAAKgC,GAAGkL,WACnB,UAAxBlN,KAAK+B,KAAKmL,WAA+C,WAAtBlN,KAAKgC,GAAGkL,cAE3ClN,KAAK8M,GAAI9M,KAAKgN,GAAIhN,KAAK+M,GAAI/M,KAAKiN,IAAM,CAACjN,KAAKgN,GAAIhN,KAAK8M,GAAI9M,KAAKiN,GAAIjN,KAAK+M,KACvE/M,KAAK+B,KAAM/B,KAAKgC,IAAM,CAAChC,KAAKgC,GAAIhC,KAAK+B,OAGlD,EAGW,MAAMoL,EACjBnG,MAAQ,SAERoG,UAAY,KAEZC,kBAAmB,EAgBnB,QAAAC,CAASC,EAAQC,EAAMlN,EAAO0L,GAC1B,MACM3J,EAAW/B,EAAMgC,aAAaiL,EAAOhL,QACrCC,EAASlC,EAAMgC,aAAakL,EAAKjL,QAKjCkL,GAHeF,EAAOG,aACTF,EAAKE,cAEyB,EAEjD,GAAI1N,KAAKqN,iBAAkB,CACvB,MAAMM,EAAqB,IACpB7N,OAAO0B,OAAOa,EAASZ,WACvB3B,OAAO0B,OAAOa,EAASX,UAC5BE,QAAQC,GAAMA,EAAE+L,OAASL,EAAOK,MAAQ/L,EAAEa,OACtCmL,EAAmB,IAClB/N,OAAO0B,OAAOgB,EAAOf,WACrB3B,OAAO0B,OAAOgB,EAAOd,UAC1BE,QAAQC,GAAMA,EAAE+L,OAASJ,EAAKI,MAAQ/L,EAAEa,OAa1C,OA9BkB,MAqBd,IAAI8K,EAAKpM,IAAI0M,QAAO,CAACC,EAAaC,IAASD,EAAcC,EAAKC,WAAW,IAAI,IAC7E,IAEA,IAAIV,EAAOnM,IAAI0M,QAAO,CAACC,EAAaC,IAASD,EAAcC,EAAKC,WAAW,IAAI,IAC/E,KAICN,EAAmB1H,OAAS4H,EAAiB5H,QACZwH,GAAczB,CACxD,CAEA,OAjCsB,GAiCCyB,EAAazB,CACxC,CAGA,YAAAkC,CAAapB,EAAIC,EAAIC,EAAIC,EAAIlB,GACzB,MAAMoC,EAAK,IAAItB,EAAqBC,EAAIC,EAAIC,EAAIC,EAAIlB,GAC9CqC,EAAK,GAAM3I,KAAKgE,IAAI0E,EAAGrB,GAAKqB,EAAGnB,IAErC,GAAImB,EAAGnM,GAAI,CACP,GAAqB,UAAjBmM,EAAGpM,KAAK6L,MAAmC,SAAfO,EAAGnM,GAAG4L,KAClC,MAAO,KAAKO,EAAGrB,MAAMqB,EAAGpB,QAAQoB,EAAGrB,GAAKsB,KAAMD,EAAGpB,OAAOoB,EAAGnB,GAAKoB,KAAMD,EAAGlB,OACrEkB,EAAGnB,MACHmB,EAAGlB,KAEX,GAAqB,SAAjBkB,EAAGpM,KAAK6L,MAAkC,UAAfO,EAAGnM,GAAG4L,KACjC,MAAO,KAAKO,EAAGrB,MAAMqB,EAAGpB,QAAQoB,EAAGrB,GAAKsB,KAAMD,EAAGpB,OAAOoB,EAAGnB,GAAKoB,KAAMD,EAAGlB,OACrEkB,EAAGnB,MACHmB,EAAGlB,KAEX,GAAqB,UAAjBkB,EAAGpM,KAAK6L,MAAmC,UAAfO,EAAGnM,GAAG4L,KAAkB,CACpD,MAAMS,EAAY5I,KAAK6I,IAAIH,EAAGrB,GAAKsB,EAAID,EAAGnB,GAAKoB,GAC/C,MAAO,KAAKD,EAAGrB,MAAMqB,EAAGpB,QAAQsB,KAAaF,EAAGpB,OAAOsB,KAAaF,EAAGlB,OAAOkB,EAAGnB,MAAMmB,EAAGlB,IAC9F,CACA,GAAqB,SAAjBkB,EAAGpM,KAAK6L,MAAkC,SAAfO,EAAGnM,GAAG4L,KAAiB,CAClD,MAAMW,EAAW9I,KAAKiE,IAAIyE,EAAGrB,GAAKsB,EAAID,EAAGnB,GAAKoB,GAC9C,MAAO,KAAKD,EAAGrB,MAAMqB,EAAGpB,QAAQwB,KAAYJ,EAAGpB,OAAOwB,KAAYJ,EAAGlB,OAAOkB,EAAGnB,MAAMmB,EAAGlB,IAC5F,CACJ,CAEA,MAAqB,UAAjBkB,EAAGpM,KAAK6L,KACD,KAAKO,EAAGrB,MAAMqB,EAAGpB,QAAQoB,EAAGrB,GAAKsB,KAAMD,EAAGpB,OAAOoB,EAAGnB,GAAKoB,KAAMD,EAAGlB,OACrEkB,EAAGnB,MACHmB,EAAGlB,KAEU,SAAjBkB,EAAGpM,KAAK6L,KACD,KAAKO,EAAGrB,MAAMqB,EAAGpB,QAAQoB,EAAGrB,GAAKsB,KAAMD,EAAGpB,OAAOoB,EAAGnB,GAAKoB,KAAMD,EAAGlB,OACrEkB,EAAGnB,MACHmB,EAAGlB,UAHX,CAQJ,CAEA,oBAAAuB,CAAqB1B,EAAIC,EAAIC,EAAIC,EAAIlB,GACjC,MAAMzL,EAAQN,KAAKoN,UAAUqB,eACvBN,EAAK,IAAItB,EAAqBC,EAAIC,EAAIC,EAAIC,EAAIlB,GAC9C2C,EAAa,GAAKpO,EAAM0L,QAE9B,GAAImC,EAAGpM,KAAKX,KAAO+M,EAAGnM,GAAGZ,GAAI,CAEzB,MAAMuN,EAAQ3O,KAAKsN,SAASa,EAAGpM,KAAMoM,EAAGnM,GAAI1B,EAAOA,EAAM0L,SAAW,GAAK1L,EAAM0L,QACzEQ,EAAqB,UAAjB2B,EAAGpM,KAAK6L,KAAmBO,EAAGrB,GAAK6B,EAAQR,EAAGrB,GAAK6B,EAC7D,MAAO,KAAKR,EAAGrB,MAAMqB,EAAGpB,qBACpB2B,KAAcA,EAAa,WAAWlC,KAAK2B,EAAGpB,qBAC9C2B,KAAcA,EAAa,WAAWP,EAAGrB,MAAMqB,EAAGpB,IAC1D,CACA,GAAqB,SAAjBoB,EAAGpM,KAAK6L,MAAkC,SAAfO,EAAGnM,GAAG4L,KAAiB,CAClD,MAAMgB,EAASF,EACTG,EAASpJ,KAAKgE,IAAI0E,EAAGpB,GAAKoB,EAAGlB,IAAM,EACnC6B,EAAgBX,EAAGpB,GAAKoB,EAAGlB,GAAK,EAAI,EAE1C,MAAO,KAAKkB,EAAGrB,MAAMqB,EAAGpB,qBACpB6B,KAAUC,SAAcC,KAAiBX,EAAGnB,MAAMmB,EAAGlB,IAC7D,CACA,GAAqB,UAAjBkB,EAAGpM,KAAK6L,MAAmC,UAAfO,EAAGnM,GAAG4L,KAAkB,CACpD,MAAMgB,EAASF,EACTG,EAASpJ,KAAKgE,IAAI0E,EAAGpB,GAAKoB,EAAGlB,IAAM,EACnC6B,EAAgBX,EAAGpB,GAAKoB,EAAGlB,GAAK,EAAI,EAE1C,MAAO,KAAKkB,EAAGrB,MAAMqB,EAAGpB,qBACpB6B,KAAUC,SAAcC,KAAiBX,EAAGnB,MAAMmB,EAAGlB,IAC7D,CAEA,MAAM0B,EAAQ3O,KAAKsN,SAASa,EAAGpM,KAAMoM,EAAGnM,GAAI1B,EAAOA,EAAM0L,SAAW,GAAK1L,EAAM0L,QAEzE+C,EAAyB,SAAjBZ,EAAGpM,KAAK6L,KAAkBO,EAAGrB,GAAKqB,EAAGnB,GAC7CgC,EAAwB,UAAfb,EAAGnM,GAAG4L,KAAmBO,EAAGnB,GAAKmB,EAAGrB,GAE7CmC,EAAyB,SAAjBd,EAAGpM,KAAK6L,KAAkBO,EAAGpB,GAAKoB,EAAGlB,GAC7CiC,EAAwB,UAAff,EAAGnM,GAAG4L,KAAmBO,EAAGlB,GAAKkB,EAAGpB,GAC7CoC,EAAUrD,EAAgBC,EAAYzL,EAAM0L,QAAS1L,EAAM2L,SAE3DK,EAAI6C,EAAUR,EAEdS,EAAUJ,EAASL,EACnBU,GAAW/C,EAAI4C,GAAU,GACxBI,EAASC,GAAWhD,EAAkByC,EAAQ1C,EAAG8C,EAASC,EAAS,GAEpEG,GAAYR,EAASD,GAAS,EAC9BU,EAAWN,GACVO,EAAUC,GAAYpD,EAAkByC,EAAQ1C,EAAGkD,EAAUC,EAAU,GAExEG,EAASb,EAAQJ,EACjBkB,GAAUvD,EAAI2C,GAAS,GACtBL,EAAQC,GAAUtC,EAAkBwC,EAAOzC,EAAGsD,EAAQC,GAAS,GAEtE,MAAO,KAAKb,KAAUE,gBAClBI,KAAWC,WAAiBP,KAAU1C,gBACtCoD,KAAYC,WAAkBZ,KAASzC,gBACvCsC,KAAUC,WAAgBE,KAASE,GAC3C,CAEA,gBAAAa,CAAiBhD,EAAIC,EAAIC,EAAIC,EAAIlB,GAC7B,MAAMzL,EAAQN,KAAKoN,UAAUqB,eACvBN,EAAK,IAAItB,EAAqBC,EAAIC,EAAIC,EAAIC,EAAIlB,GAEpD,QAA2BnL,IAAvBmL,EAAWhJ,SAAyBgJ,EAAWhJ,QAAQkD,OAAQ,CAC/D,MAAMlD,EAAUgJ,EAAWhJ,QAAQuG,KAAKxG,IAOpC,MAHW,CAAE0J,IAHMuD,EAMFjN,GALC0J,EAAIlM,EAAM2L,QAAQO,GAAKlM,EAAM0L,QAE3BM,GADJyD,EAAEzD,EAAIhM,EAAM2L,QAAQK,GAAKhM,EAAM0L,SAF7B,IAAC+D,CAMK,IAGtBC,EAAO,CAAC,CAAExD,EAAG2B,EAAGrB,GAAIR,EAAG6B,EAAGpB,KAChC,IAAIG,EAAYiB,EAAGpM,KAAK6L,KAsCxB,GArCkB,UAAdV,EACA8C,EAAKlL,KAAK,CAAE0H,EAAG2B,EAAGrB,GAAK,GAAIR,EAAG6B,EAAGpB,KACZ,SAAdG,GACP8C,EAAKlL,KAAK,CAAE0H,EAAG2B,EAAGrB,GAAK,GAAIR,EAAG6B,EAAGpB,KAErCG,EAAY,aACZnK,EAAQd,SAASa,IACK,aAAdoK,GACA8C,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK1J,EAAO0J,EAAIwD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK,EACpEF,EAAG0D,EAAKA,EAAK/J,OAAS,GAAGqG,IAE7B0D,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK1J,EAAO0J,EAAIwD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK,EACpEF,EAAGxJ,EAAOwJ,IAEd0D,EAAKlL,KAAK,CACN0H,EAAG1J,EAAO0J,EACVF,EAAGxJ,EAAOwJ,IAEdY,EAAY,eAEZ8C,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,EACzBF,EAAG0D,EAAKA,EAAK/J,OAAS,GAAGqG,GAAKxJ,EAAOwJ,EAAI0D,EAAKA,EAAK/J,OAAS,GAAGqG,GAAK,IAExE0D,EAAKlL,KAAK,CACN0H,EAAG1J,EAAO0J,EACVF,EAAG0D,EAAKA,EAAK/J,OAAS,GAAGqG,GAAKxJ,EAAOwJ,EAAI0D,EAAKA,EAAK/J,OAAS,GAAGqG,GAAK,IAExE0D,EAAKlL,KAAK,CACN0H,EAAG1J,EAAO0J,EACVF,EAAGxJ,EAAOwJ,IAEdY,EAAY,WAChB,IAEc,aAAdA,EACA8C,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK2B,EAAGnB,GAAKgD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK,EACjEF,EAAG0D,EAAKA,EAAK/J,OAAS,GAAGqG,IAE7B0D,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK2B,EAAGnB,GAAKgD,EAAKA,EAAK/J,OAAS,GAAGuG,GAAK,EACjEF,EAAG6B,EAAGlB,KAEV+C,EAAKlL,KAAK,CACN0H,EAAG2B,EAAGnB,GACNV,EAAG6B,EAAGlB,SAEP,CACH+C,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,EACzBF,EAAG0D,EAAKA,EAAK/J,OAAS,GAAGqG,GAAK6B,EAAGlB,GAAK+C,EAAKA,EAAK/J,OAAS,GAAGqG,GAAK,IAErE,IAAI2D,EAAS,EACcA,EAAR,SAAf9B,EAAGnM,GAAG4L,KAA0B,IACrB,GACfoC,EAAKlL,KAAK,CACN0H,EAAG2B,EAAGnB,GAAKiD,EACX3D,EAAG0D,EAAKA,EAAK/J,OAAS,GAAGqG,GAAK6B,EAAGlB,GAAK+C,EAAKA,EAAK/J,OAAS,GAAGqG,GAAK,IAErE0D,EAAKlL,KAAK,CACN0H,EAAG2B,EAAGnB,GAAKiD,EACX3D,EAAG6B,EAAGlB,KAEV+C,EAAKlL,KAAK,CACN0H,EAAG2B,EAAGnB,GACNV,EAAG6B,EAAGlB,IAEd,CACA,OAAO+C,CACX,CAEA,MAAME,EAAY,GAAK5P,EAAM0L,QACvBmE,GAAehC,EAAGrB,GAAKqB,EAAGnB,IAAM,EAEtC,GAAIjB,EAAW/J,GAAI,CACf,MAAM2M,EAAQ3O,KAAKsN,SAASa,EAAGpM,KAAMoM,EAAGnM,GAAI1B,EAAOA,EAAM0L,SAEzD,GAAqB,UAAjBmC,EAAGpM,KAAK6L,MAAmC,SAAfO,EAAGnM,GAAG4L,KAAiB,CACnD,MAAMwC,EAAM3K,KAAK6I,IAAIH,EAAGrB,GAAIqD,GAAexB,EAAQuB,EAE7CG,EAAYD,EAAMjC,EAAGnB,GAAK2B,EAAQuB,EAAY/B,EAAGrB,GAAK6B,EAAQuB,EAAYE,EAC1EE,EAAWnC,EAAGnB,GAAK2B,EAAQuB,EAGjC,OACIE,GAAOjC,EAAGnB,GAAK2B,EAAQuB,IACtBG,EAAYlC,EAAGnB,GAAKkD,GAAaI,EAAWnC,EAAGrB,GAAKoD,GAE9C,KAAK/B,EAAGrB,MAAMqB,EAAGpB,6BACpBsD,6BACClC,EAAGpB,GAAKoB,EAAGlB,IAAM,4BAClBqD,4BACAnC,EAAGlB,6BACHkB,EAAGnB,KAIJ,KAAKmB,EAAGrB,MAAMqB,EAAGpB,QAAQqD,OAASjC,EAAGlB,QAAQkB,EAAGnB,IAC3D,CACA,GAAqB,SAAjBmB,EAAGpM,KAAK6L,MAAkC,UAAfO,EAAGnM,GAAG4L,KAAkB,CACnD,MAAMwC,EAAM3K,KAAK6I,IAAIH,EAAGnB,GAAImD,GAAexB,EAAQuB,EAE7CG,EAAYD,EAAMjC,EAAGrB,GAAK6B,EAAQuB,EAAY/B,EAAGnB,GAAK2B,EAAQuB,EAAYE,EAC1EE,EAAWnC,EAAGrB,GAAK6B,EAAQuB,EAGjC,OACIE,GAAOjC,EAAGrB,GAAK6B,EAAQuB,IACtBG,EAAYlC,EAAGrB,GAAKoD,GAAaI,EAAWnC,EAAGnB,GAAKkD,GAE9C,KAAK/B,EAAGnB,MAAMmB,EAAGlB,6BACpBoD,6BACClC,EAAGpB,GAAKoB,EAAGlB,IAAM,4BAClBqD,4BACAnC,EAAGpB,6BACHoB,EAAGrB,KAIJ,KAAKqB,EAAGnB,MAAMmB,EAAGlB,QAAQmD,OAASjC,EAAGpB,QAAQoB,EAAGrB,IAC3D,CACA,GAAqB,UAAjBqB,EAAGpM,KAAK6L,MAAmC,UAAfO,EAAGnM,GAAG4L,KAClC,MAAO,KAAKO,EAAGrB,MAAMqB,EAAGpB,QACpBtH,KAAK6I,IAAIH,EAAGrB,GAAIqB,EAAGnB,GAAImD,GAAexB,EAAQuB,OAC5C/B,EAAGlB,QAAQkB,EAAGnB,KAExB,GAAqB,SAAjBmB,EAAGpM,KAAK6L,MAAkC,SAAfO,EAAGnM,GAAG4L,KACjC,MAAO,KAAKO,EAAGrB,MAAMqB,EAAGpB,QACpBtH,KAAKiE,IAAIyE,EAAGrB,GAAIqB,EAAGnB,GAAImD,GAAexB,EAAQuB,OAC5C/B,EAAGlB,QAAQkB,EAAGnB,IAE5B,CACA,MAAO,KAAKmB,EAAGrB,MAAMqB,EAAGpB,QAAQoD,OAAiBhC,EAAGlB,QAAQkB,EAAGnB,IACnE,CAEA,wBAAAuD,CAAyBzD,EAAIC,EAAIC,EAAIC,EAAIlB,GACrC,MAAMzL,EAAQN,KAAKoN,UAAUqB,eACvBN,EAAK,IAAItB,EAAqBC,EAAIC,EAAIC,EAAIC,EAAIlB,GAC9C4C,EAAQ3O,KAAKsN,SAASa,EAAGpM,KAAMoM,EAAGnM,GAAI1B,EAAOA,EAAM0L,SAAW,GAAK1L,EAAM0L,QAE/E,QAA2BpL,IAAvBmL,EAAWhJ,SAAyBgJ,EAAWhJ,QAAQkD,OAAQ,CAC/D,MAAMlD,EAAUgJ,EAAWhJ,QAAQuG,KAAKyG,IAG7B,CAAEvD,GAFGuD,EAAEvD,EAAIlM,EAAM2L,QAAQO,GAAKlM,EAAM0L,QAE3BM,GADJyD,EAAEzD,EAAIhM,EAAM2L,QAAQK,GAAKhM,EAAM0L,YAIzCgE,EAAO,CAAC,CAAExD,EAAG2B,EAAGrB,GAAIR,EAAG6B,EAAGpB,KAE1ByD,EAAuB,UADXrC,EAAGpM,KAAK6L,KACae,GAASA,EA6BhD,OA5BAqB,EAAKlL,KAAK,CAAE0H,EAAG2B,EAAGrB,GAAK0D,EAAQlE,EAAG6B,EAAGpB,KACrChK,EAAQd,SAASa,IACbkN,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,EACzBF,EAAGxJ,EAAOwJ,IAEd0D,EAAKlL,KAAK,CACN0H,EAAG1J,EAAO0J,EACVF,EAAGxJ,EAAOwJ,IAGd0D,EAAKlL,KAAK,CACN0H,EAAG1J,EAAO0J,EACVF,EAAGxJ,EAAOwJ,GACZ,IAEN0D,EAAKlL,KAAK,CACN0H,EAAGwD,EAAKA,EAAK/J,OAAS,GAAGuG,EACzBF,EAAG6B,EAAGlB,KAEV+C,EAAKlL,KAAK,CACN0H,EAAG2B,EAAGnB,GAAKwD,EACXlE,EAAG6B,EAAGlB,KAEV+C,EAAKlL,KAAK,CACN0H,EAAG2B,EAAGnB,GACNV,EAAG6B,EAAGlB,KAEH+C,CACX,CAEA,MACM1D,EADUR,EAAgBC,EAAYzL,EAAM0L,QAAS1L,EAAM2L,SAC7C0C,EAEpB,MAAqB,UAAjBR,EAAGpM,KAAK6L,MAAmC,SAAfO,EAAGnM,GAAG4L,KAC3B,KAAKO,EAAGrB,MAAMqB,EAAGpB,qBACpB4B,oBACArC,OAAO6B,EAAGnB,GAAK2B,OAAWR,EAAGlB,QAAQkB,EAAGnB,KAE3B,SAAjBmB,EAAGpM,KAAK6L,MAAkC,UAAfO,EAAGnM,GAAG4L,KAC1B,KAAKO,EAAGnB,MAAMmB,EAAGlB,qBACpB0B,oBACArC,OAAO6B,EAAGrB,GAAK6B,OAAWR,EAAGpB,QAAQoB,EAAGrB,KAE3B,UAAjBqB,EAAGpM,KAAK6L,MAAmC,UAAfO,EAAGnM,GAAG4L,KAC3B,KAAKO,EAAGnB,MAAMmB,EAAGlB,qBACpB0B,oBACAR,EAAGpB,QAAQoB,EAAGrB,KAED,SAAjBqB,EAAGpM,KAAK6L,MAAkC,SAAfO,EAAGnM,GAAG4L,KAC1B,KAAKO,EAAGnB,MAAMmB,EAAGlB,sBACnB0B,oBACDR,EAAGpB,QAAQoB,EAAGrB,UAHtB,CAOJ,CAEA,WAAApN,CAAY0N,EAAWpG,EAAOqG,GAAmB,GAC7CrN,KAAKoN,UAAYA,EACjBpN,KAAKgH,MAAQA,EACbhH,KAAKqN,iBAAmBA,CAC5B,CAYA,MAAAoD,CAAO3D,EAAIC,EAAIC,EAAIC,EAAIlB,GACnB,MAAM2E,EAAW1Q,KAAK2Q,WAAW5E,GAAc,WAAa,GAC5D,OAAO/L,KAAK,GAAGA,KAAKgH,cAAc0J,KAAY5D,EAAIC,EAAIC,EAAIC,EAAIlB,EAClE,CAQA,UAAA4E,CAAW5E,GAGP,QAASA,EAAW/J,IAAM+J,EAAWhK,KAAKQ,SAAWwJ,EAAW/J,GAAGO,MACvE,EC3dW,MAAMqO,EACjBC,qBAAkBjQ,EAElBkQ,0BAAuBlQ,EAEvBmQ,6BAA0BnQ,EAE1B,WAAAlB,GACI,QAA+BkB,IAA3BgQ,EAAcI,SACd,MAAM,IAAIzQ,MAAM,0CAExB,CAQA,kBAAO0Q,GAIH,OAHKL,EAAcI,WACfJ,EAAcI,SAAW,IAAIJ,GAE1BA,EAAcI,QACzB,CAQA,oBAAAE,CAAqBC,GACjB,QAAkCvQ,IAA9BZ,KAAK8Q,qBAET,OAAIK,EAASC,WAAW,MACbpR,KAAK8Q,qBAAqBO,OAAOnQ,MACnCC,GAAMA,EAAE0K,OAASsF,EAAShM,MAAM,KAAuBc,UAIzDjG,KAAK8Q,qBAAqB7P,MAAMC,MAClCC,GAAMA,EAAE0K,OAASsF,GAE1B,ECzBJ,MAAMG,EACF,WAAA5R,GACII,OAAO6L,QAAQ,cAA2B1J,SAAQ,EAAE4J,EAAM0F,MACtDvR,KAAK6L,GAAQ0F,EAAMC,OAAO,GAElC,EAKG,MAAMC,EAA8B,SAC9BC,EAA0B,iBAC1BC,EAA0B,GAAG,OAAyBD,IAoC5DE,eAAeC,EAA2BC,GAC7C,MAAMC,EA5BV,SAAuBC,GACnB,IAAIC,EAAc,KACM,oBAAbtL,WAEPsL,EAAc,GADItL,SAASoL,SAASG,KAAKC,MAAM,KAAKhN,MAAM,GAAI,GAAGiN,KAAK,WAG1E,MACMC,EAAW,yHAAYC,8BADT,6DAA6DL,MAE3EM,EAAOC,KAAKC,MAAMJ,GAClBK,EAAQV,EAAIG,MAAM,MAExB,GAAIO,EAAMzM,OAAS,EAAG,OAEtB,MAAMoB,EAAMqL,EAAM,GAAGC,UAAU,EAAGD,EAAM,GAAGzM,OAAS,GAC9C2M,EAAeF,EAAMvN,MAAM,GAAGiN,KAAK,IAEzC,OAAKtS,OAAO+S,KAAKN,GAAMzQ,SAASuF,GACzBkL,EAAKlL,GAAKyL,QAAQ,KAAMF,QAD/B,CAEJ,CAUqBG,CAAcjB,GAC/B,QAAiBlR,IAAbmR,EACA,MAAO,EAAC,EAAO,0CAA0CD,MAE7D,IAAIkB,EACJ,IACIA,QAAuBC,MAAMlB,EAAU,CAAEmB,KAAM,QACnD,CAAE,MAAOC,GACL,MAAO,EAAC,EAAOA,EAAMC,QACzB,CACA,IAEI,MAAO,EAAC,QADkBJ,EAAeK,OAE7C,CAAE,MAAOF,GACL,MAAO,EAAC,EAAOA,EAAMC,QACzB,CACJ,CAEe,MAAME,EACjBzC,gBAEA0C,gBAAkB,IAAIjC,EAEtBkC,OAAS,IAAI,IAEbC,aAAc,QAAWzT,KAAKwT,QAE9BE,qBAAsB,SAAI,GAE1BC,cAAgB/C,EAAcK,cAE9B2C,gBAAkB,CAAC,EAEnB,WAAAlU,GAGIM,KAAKwT,OAAOK,kBAEZ7T,KAAKyT,YAAYK,mBAAqB,IAAI3G,EACtCnN,KAAKyT,YACLzT,KAAKuT,gBAAgBQ,gBACrB/T,KAAKuT,gBAAgBlG,kBAGzBrN,KAAKyT,YAAYD,OAAOQ,cAAcC,aAAajU,KAAKuT,gBAAgBW,QACxElU,KAAKyT,YAAYU,eAAiB,IAAI,EAAenU,KAAKyT,aAI1DzT,KAAKyT,YAAYW,OAASpU,KAAKuT,gBAAgBa,OAC/CpU,KAAKyT,YAAYY,gBAAkBrU,KAAKuT,gBAAgBc,gBACxDrU,KAAKyT,YAAY1K,aAAe/I,KAAKuT,gBAAgBxK,aACrD/I,KAAKyT,YAAYD,OAAOc,eAAiBtU,KAAKuT,gBAAgBe,eAC9DtU,KAAKyT,YAAYc,YAAcvU,KAAKuT,gBAAgBgB,YACpDvU,KAAKyT,YAAYe,MAAQ,CAAC,EAC1BxU,KAAKyT,YAAYgB,SAAWzU,KAAKuT,gBAAgBkB,SAEjDzU,KAAK0U,qBAAuB,UAC5B1U,KAAKyT,YAAYpQ,gBAAiB,UAClCrD,KAAKyT,YAAYjQ,QAAU,KAC3BxD,KAAKyT,YAAYjQ,SAAU,SACvB,QAAMxD,KAAKyT,aAAahF,eACxBzO,KAAKyT,YAAYpQ,gBAErBrD,KAAKyT,YAAYkB,UJ3HlB,SAAsBlG,EAAgB+E,EAAQnQ,GACjD,MAAMC,EAAQC,OAAO,kBACfqR,GAAa,QAAI,IACjBC,GAAmB,QAAI,IACvBC,GAAyB,QAAI,GAC7BC,GAAU,SAAS,KAAOH,EAAWxU,QA6BrC4U,EAAgB,CAAC/T,EAAOG,EAAIwK,KAC9B,IAAK,IAAIqJ,EAAI,EAAGA,EAAIhU,EAAMgF,OAAQgP,GAAK,EAAG,CACtC,IAAI5M,EAOJ,GANKuD,GAAa,UAAPA,IACPvD,EAAOvI,OAAO0B,OAAOP,EAAMgU,GAAGxT,QAAQP,MAAMuB,GAAUA,EAAMrB,KAAOA,KAElEiH,GAAUuD,GAAa,WAAPA,IACjBvD,EAAOvI,OAAO0B,OAAOP,EAAMgU,GAAGvT,SAASR,MAAMuB,GAAUA,EAAMrB,KAAOA,KAEpEiH,EACA,OAAOA,CAEf,CACgB,EAwJpB,OA1BAhF,EAAe8C,gBAAgByD,EAAgB,CAC3CxD,WAAY,IAAMqI,EAAerO,MAAM8F,cAAcD,OAAS,EAC9DI,QAvJQ,KACR,MAAM,UAAE+G,IAAc,UAClBA,EAAUhN,MAAMoT,OAAO0B,YAE3B,UACAzG,EAAerO,MAAM8F,cAAcjE,SAASjB,KACxC,QAAWA,EAAK,KAEpB,UAAmB,IAiJvBqC,EAAeiD,eAAe,CAAC,UAAWsD,GAC1CvG,EAAe8C,gBAAgB0D,EAAqB,CAChDzD,WAAY,KAAM,EAClBC,QAAS,KACLoI,EAAerO,MAAM8F,cAAgB,EAAE,IAG/C7C,EAAeiD,eAAe,CAAC,UAAWuD,GAC1CxG,EAAe8C,gBAAgBwD,EAAc,CACzCvD,WAAY,KAAM,EAClBC,QAjLS,KAET,MAAM8O,EAA4B1G,EAAerO,MAAM8F,cAAckP,SAASjU,GAAM,IAC7ErB,OAAO0B,OAAOL,EAAEM,WAChB3B,OAAO0B,OAAOL,EAAEO,YAEjBC,EAAc8M,EAAerO,MAAMuB,YACpCC,QAAQM,GAASiT,EAA0BrT,SAASI,EAAKH,OAC1DoT,EAA0BrT,SAASI,EAAKF,MACvCsH,KAAKpH,IAAS,CAAGH,KAAMG,EAAKH,KAAKX,GAAIY,GAAIE,EAAKF,GAAGZ,OACtDyT,EAAiBzU,MAAQoS,KAAK6C,UAAU1T,GACxCiT,EAAWxU,MAAQoS,KAAK6C,UAAU5G,EAAerO,MAAM8F,cAAcoD,KAAKnI,GAAMA,EAAEE,UAClFyT,EAAuB1U,MAAQ,CAAC,IAuKpCiD,EAAeiD,eAAe,CAAC,UAAW,KAAMqD,GAChDtG,EAAe8C,gBAAgB2D,EAAe,CAC1C1D,WAAY,KAAO2O,EAAQ3U,MAC3BiG,QA/IU,KACV,IAAIpB,EAAIqQ,EACR,MAAM,UAAElI,IAAc,UACtB,GAAI2H,EAAQ3U,OAASgN,EAAUhN,MAAMoT,OAAO0B,SACxC,OAEJ,MAAMnM,EAAuD,QAAvC9D,EAAKmI,EAAUhN,MAAM2I,oBAAiC,IAAP9D,EAAgBA,EAAK,EAEpFsQ,EAAQ,IAAI9R,IACZ+R,EAAmBhD,KAAKC,MAAMmC,EAAWxU,OACzCqV,EAAyBjD,KAAKC,MAAMoC,EAAiBzU,OACrDsV,EAAW,GACXC,EAAiB,GACjBrV,EAAQmO,EAAerO,MAC7BiD,EAAeuS,eAAe,qBAC9B,IAAK,IAAIX,EAAI,EAAGA,EAAIO,EAAiBvP,OAAQgP,GAAK,EAAG,CACjD,IAAIY,EAOJ,GALIA,OADkFjV,KAAlD,QAA9B0U,EAAKE,EAAiBP,UAAuB,IAAPK,OAAgB,EAASA,EAAGQ,UACzDtC,EAAOpT,MAAM2V,UAAUtR,IAAI,GAAG,OAAyB+Q,EAAiBP,GAAGpJ,QAG3E2H,EAAOpT,MAAM2V,UAAUtR,IAAI+Q,EAAiBP,GAAGpJ,OAEzDgK,EACD,OAGJ,IAAIG,EAAa,IAAIH,EAASlW,KAC9B+V,EAAS5Q,KAAKkR,GACdA,EAAW1L,MAAM2L,WAAWpR,UAAUvB,GAAQ4S,IAC1C,MAAMC,EAAKD,EAcX,OAbIC,EAAG5M,WACHuL,EAAuB1U,OAAS,EAChC+V,EAAG5M,SAASiD,GAAKsI,EAAuB1U,MAAQqF,KAAK6I,IAAI,GAAIvF,GAC7DoN,EAAG5M,SAAS+C,GAAKwI,EAAuB1U,MAAQqF,KAAK6I,IAAI,GAAIvF,SAE1BnI,IAAnC4U,EAAiBP,GAAGmB,YACpBZ,EAAiBP,GAAGmB,WAAWnV,MAAMgB,SAASd,SAE3BP,IAAXO,EAAExB,OACFwB,EAAE0K,KAAO1K,EAAExB,KAAI,IAG3BqW,EAAW1L,MAAM2L,WAAWhS,YAAYX,GACjC6S,CAAE,IAEbH,EAAa1V,EAAMQ,QAAQkV,GAC3B,MAAMK,EAAYC,IAEd,MAAMC,GAAQ,SACdhB,EAAM7Q,IAAI4R,EAAIlV,GAAImV,GAClBD,EAAIlV,GAAKmV,CAAK,EAEZC,EAAgBxV,IAGlBqV,EAASrV,QACeJ,IAApBI,EAAKoV,YACLC,EAASrV,EAAKoV,YACdpV,EAAKoV,WAAWnV,MAAMgB,SAASwU,IAC3BD,EAAaC,EAAQ,IAIzBzV,EAAKO,WAAWU,SAASoG,IACrB,IAAIpD,EACJoD,EAAKjH,GAAmC,QAA7B6D,EAAKsQ,EAAM9Q,IAAI4D,EAAKjH,WAAwB,IAAP6D,EAAgBA,EAAKoD,EAAKjH,QAGhDR,IAAtByH,EAAKqO,eACLrO,EAAKqO,aAAepW,EAAMqW,sBAAsBtO,EAAKqO,cACzD,IAEJ1V,EAAKoV,WAAWzU,YAAYM,SAASC,IACjC,QAA6BtB,IAAzB2U,EAAM9Q,IAAIvC,EAAKH,YACQnB,IAAvB2U,EAAM9Q,IAAIvC,EAAKF,IACf,MAAM,IAAIzB,MACN,kEAA6B2B,EAAKH,WAAWG,EAAKF,iBAE1DE,EAAKH,KAAOwT,EAAM9Q,IAAIvC,EAAKH,MAC3BG,EAAKF,GAAKuT,EAAM9Q,IAAIvC,EAAKF,GAAG,KAKhChB,EAAKO,WAAWU,SAASoG,IACrBgO,EAAShO,QAGiBzH,IAAtByH,EAAKqO,eACLrO,EAAKqO,aAAepW,EAAMqW,sBAAsBtO,EAAKqO,cACzD,GAER,EAEJF,EAAahB,EAAiBP,IAC9Be,EAAWjV,KAAKjB,OAAO8W,OAAO9W,OAAO8W,OAAO,CAAC,EAAGpB,EAAiBP,IAAK,CAAE7T,GAAI4U,EAAW5U,WAGhDR,IAAnC6N,EAAerO,MAAMyW,WACrBpI,EAAerO,MAAMyW,UAAUC,yBAEvC,CACA,IAAK,IAAI7B,EAAI,EAAGA,EAAIQ,EAAuBxP,OAAQgP,GAAK,EAAG,CACvD,MAAM8B,EAASxB,EAAM9Q,IAAIgR,EAAuBR,GAAGlT,MAC7CiV,EAAOzB,EAAM9Q,IAAIgR,EAAuBR,GAAGjT,IACjD,GAAI+U,GAAUC,EAAM,CAChB,MAAMC,EAAWjC,EAAcU,EAAUqB,EAAQ,UAC3CG,EAASlC,EAAcU,EAAUsB,EAAM,SAC7C,GAAIC,GAAYC,EAAQ,CACpB,MAAMC,EAAgB7W,EAAM6B,cAAc8U,EAAUC,GAChDC,GACAxB,EAAe7Q,KAAKqS,EAE5B,CACJ,CACJ,CAGA,OAFA9T,EAAeuS,eAAe,sBAEvB,CACHF,WACAC,iBACH,IAuBLtS,EAAeiD,eAAe,CAAC,UAAW,KAAMwD,GAChDzG,EAAe8C,gBApMoB,kBAoMqB,CACpDC,WAAY,KAAM,EAClBC,QA/LU,KACVuO,EAAWxU,MAAQ,GACnByU,EAAiBzU,MAAQ,EAAE,KA+LxB,QAAS,CAAE2U,WACtB,CI7EqCqC,EACzB,QAAMpX,KAAKyT,aAAahF,gBACxB,QAAIzO,KAAKyT,YAAYD,QACrBxT,KAAKyT,YAAYpQ,eAEzB,CAgBA,+BAAMgU,CAA0BC,EAAuBC,GAAW,GAC9D,IAAKD,EAAuB,MAAO,CAAC,2BAEpC,GAAqC,iBAA1BA,GAAsCA,aAAiCpM,OAC9E,IACIoM,EAAwBE,EAAS/E,MAAM6E,EAC3C,CAAE,MAAOnE,GACL,MAAO,CAAEsE,OAAQ,CAACtE,GAAQuE,SAAU,GACxC,CAGA1X,KAAK0T,qBACL1T,KAAK2X,0BAGT,MAAMD,EAAW,GACXD,EAAS,IACT,QAAEG,GAAYN,EAiBpB,GAhBKtX,KAAK2T,cAAc7C,4BACJlQ,IAAZgX,EACAF,EAAS5S,KACL,4FAA4F9E,KAAK0U,yBAE9FkD,IAAY5X,KAAK0U,sBACxBgD,EAAS5S,KACL,qCAAqC8S,6DAAmE5X,KAAK0U,qEAKzH1U,KAAK2T,cAAc5C,wBAA0ByB,KAAKC,MAAMD,KAAK6C,UACzDiC,IAEJtX,KAAK2T,cAAc7C,qBAAuBwG,GACrCC,EAAU,CAEXvX,KAAK6X,mBAAqB,IAAIC,IAC9B,MACInE,cAAe5C,EAAyB0G,OAAQM,SAC1C/X,KAAKgY,sBAAsBV,GAErC,GADAG,EAAO3S,QAAQiT,GACXN,EAAOxR,OACP,MAAO,CAAEwR,SAAQC,YAIrB,QAA8C9W,IAA1CmQ,EAAwBkH,cAA6B,CACrD,MAAM,OACF5G,EAAQoG,OAAQS,SACV5E,EAAc2E,cAAclH,EAAwBkH,eAG9D,GADAR,EAAO3S,QAAQoT,GACXT,EAAOxR,OACP,MAAO,CAAEwR,SAAQC,YAGrB3G,EAAwBM,OAAS,IACzBN,EAAwBM,QAAU,MACnCA,EAEX,MACIN,EAAwBM,SAAW,GAIvC,MAAM,SAAE3F,GAAaqF,EAErB,GADA0G,EAAO3S,QAAQ9E,KAAKmY,eAAezM,GAAU,GAAO,IAChD+L,EAAOxR,OACP,MAAO,CAAEwR,SAAQC,YAIrB,MACID,OAAQW,EAAWV,SAAUW,SACvBrY,KAAKsY,yBAAyBvH,GACxC0G,EAAO3S,QAAQsT,GACfV,EAAS5S,QAAQuT,EACrB,CAQA,OANsB,IAAlBZ,EAAOxR,OACPjG,KAAK0T,qBAAsB,EAE3B1T,KAAK2X,0BAGF,CAAEF,SAAQC,WACrB,CAEA,uBAAAC,GACI3X,KAAKyT,YAAYD,OAAO+E,mBACxBvY,KAAKyT,YAAYD,OAAOgF,kBACxBxY,KAAKyT,YAAYD,OAAOK,kBACxB7T,KAAK0T,qBAAsB,EAC3B1T,KAAK2T,cAAc7C,qBAAuB,CAAC,EAC3C9Q,KAAK2T,cAAc5C,wBAA0B,CAAC,CAClD,CAUA,2BAAMiH,CAAsBrE,EAAe8E,EAAQ,IAAIX,KACnD,MAAML,EAAS,GAGTiB,EAAwB,GACxBC,EAAiB,IAAIb,IACrBc,EAAUjF,EAAciF,SAAW,GA4BzC,aA3BMC,QAAQC,IAAIF,EAAQtP,KAAIsI,MAAOmH,IACjC,GAAIJ,EAAerR,IAAIyR,GACnBtB,EAAO3S,KAAK,sDAAsDiU,UAGtE,GAAIN,EAAMnR,IAAIyR,GACVtB,EAAO3S,KAAK,0DAA0DiU,UAK1E,GAFAJ,EAAetY,IAAI0Y,IAEd/Y,KAAK6X,mBAAmBvQ,IAAIyR,GAAmB,CAChD/Y,KAAK6X,mBAAmBxX,IAAI0Y,GAC5B,MAAOC,EAAQC,SAAapH,EAA2BkH,IACxC,IAAXC,EACAvB,EAAO3S,KAAK,kDAAkDiU,cAA6BE,KAE3FP,EAAsB5T,KAClB,CACI6O,cAAesF,EACfR,MAAO,IAAIX,IAAI,IAAIW,EAAOM,KAI1C,MAGAtB,EAAOxR,cAKL4S,QAAQC,IAAIJ,EAAsBpP,KACpCsI,OAAS+B,cAAeuF,EAAMT,MAAOU,MAEjC,MACIxF,cAAeyF,EAAkB3B,OAAQW,SACnCpY,KAAKgY,sBAAsBkB,EAAMC,GAC3C1B,EAAO3S,QAAQsT,GACfzE,EAAgBL,EAAc+F,aAAa1F,EAAeyF,EAAiB,KAXxE,CAAEzF,gBAAe8D,SAchC,CASA,0BAAaQ,CAAcA,GACvB,MAAMR,EAAS,GACTpG,EAAS,GAEf,GAA6B,IAAzB4G,EAAchS,OACd,MAAO,CAAEoL,SAAQoG,UACnB,GAAIQ,EAAchS,SAAW,IAAI6R,IAAIG,GAAeqB,KAElD,OADA7B,EAAO3S,KAAK,mDACL,CAAEuM,SAAQoG,UAGrB,MAAM8B,EAAY,GAWlB,SAVMV,QAAQC,IAAIb,EAAc3O,KAAIsI,MAAO4H,IACvC,MAAOR,EAAQC,SAAapH,EAA2B2H,EAASC,MACjD,IAAXT,EAKJO,EAAUzU,KAAKmU,GAJXxB,EAAO3S,KAAK,8CAA8C0U,EAASC,iBAAiBR,IAIrE,KAGnBxB,EAAOxR,OAAQ,MAAO,CAAEoL,SAAQoG,UAEpC,IAAK,IAAIxC,EAAI,EAAGA,EAAIgD,EAAchS,OAAQgP,GAAK,EAAG,CAC9C,MAAMuE,EAAWD,EAAUtE,GACrByE,EAAmBzB,EAAchD,GAEvC,GAA+B,IAA3BuE,EAASnI,OAAOpL,OAAc,CAC9BwR,EAAO3S,KAAK,qFAAqF4U,EAAiBD,QAClH,QACJ,CAEA,MAAME,EAAcH,EAASnI,OAAO,GACpCsI,EAAY9N,KAAO6N,EAAiB7N,MAAQ8N,EAAY9N,UAE/BjL,IAArB+Y,EAAY9N,UAKgDjL,IAA5DyQ,EAAOnQ,MAAMZ,GAAUA,EAAMuL,OAAS8N,EAAY9N,QAKtD8N,EAAYC,SAAWF,EAAiBE,SACxCvI,EAAOvM,KAAK6U,IALRlC,EAAO3S,KAAK,uBAAuB4U,EAAiBD,4BALpDhC,EAAO3S,KAAK,0BAA0B4U,EAAiBD,oCAW/D,CAEA,MAAO,CAAEpI,SAAQoG,SACrB,CASA,oBAAAoC,GACI,MAAMpC,EAAS,GACTC,EAAW,GAEjB,GAAI1X,KAAKwT,OAAOuC,UAAUzO,IAAIqK,GAM1B,OALA8F,EAAO3S,KACH,cAAc4M,wIAIX,CAAE+F,SAAQC,YAGrB,MAAMoC,GAAU,QACZ,GACA,GACApI,EACA1R,KAAKyT,YAAYD,QAarB,OATIjI,MAAMC,QAAQsO,IAAYA,EAAQ7T,OAClCwR,EAAO3S,QAAQgV,GAEf9Z,KAAKyT,YAAYD,OAAOuG,iBACpBD,EACArI,EACAC,GAGD,CAAE+F,SAAQC,WACrB,CASA,8BAAMY,CAAyBhB,GAC3B,MAAMI,EAAW,GAEjB,IAAKJ,EAAuB,MAAO,CAAEG,OAAQ,CAAC,2BAA4BC,YAE1E,MAAM,MAAEzW,EAAK,OAAEoQ,EAAM,SAAE3F,GAAa4L,EAEpC,IAAI0C,EAAgB,GAEpB,IACI,MAAMC,EAAoBja,KAAKka,gBAAgBjZ,GAC/C+Y,EAAgBha,KAAKma,mBAAmBF,EAC5C,CAAE,MAAOG,GACL,MAAO,CAAE3C,OAAQ,CAAC2C,EAAEhH,SAAUsE,WAClC,CAEA,MAAMD,EAAS,GAIf,GAHAA,EAAO3S,QAAQ9E,KAAKqa,8BAChB,CAAEhJ,SAAQpQ,MAAO+Y,EAAetO,cAEhC+L,EAAOxR,OACP,MAAO,CAAEwR,SAAQC,YA8FrB,GA3FA1X,KAAK2T,cAAc7C,qBAAqB7P,MAAQuR,KAAKC,MAAMD,KAAK6C,UAAU2E,IAC1Eha,KAAK2T,cAAc7C,qBAAqBO,OAASmB,KAAKC,MAAMD,KAAK6C,UAAUhE,IAK3E2I,EAAc/X,SAASjB,KAClBA,EAAKsZ,SAAW,IAAIrY,SAASsY,IAC1B,MAAMC,EAAWR,EAAc9Y,MAAMC,GAAMA,EAAE0K,OAAS0O,SAGrC3Z,IAAb4Z,SAC2B5Z,IAAvB4Z,EAASC,YACTD,EAASC,UAAY,IAEzBD,EAASC,UAAU3V,KAAK9D,EAAK6K,MACjC,GACF,IAINmO,EAAc/X,SAASjB,IACnB,MAAM0Z,EAAW,IAAI5C,KACpB9W,EAAKsZ,SAAW,IAAIrY,SAASsY,IAC1B,MAAMC,EAAWR,EAAc9Y,MAAMC,GAAMA,EAAE0K,OAAS0O,SAGrC3Z,IAAb4Z,GACAA,EAASC,UAAUxY,SAASmY,GAAMM,EAASra,IAAI+Z,IACnD,IAEJM,EAAS/R,OAAO3H,EAAK6K,MACrB7K,EAAK0Z,SAAWnP,MAAMxJ,KAAK2Y,EAAS,IAIxCV,EAAc/X,SAASjB,IACfA,EAAKsZ,UACLtZ,EAAKsZ,QAAUtZ,EAAKsZ,QAAQ1Y,QACvB2Y,QAA2D3Z,IAAhDoZ,EAAc9Y,MAAMC,GAAMA,EAAE0K,OAAS0O,MAEzD,IAGJP,EAAc/X,SAASjB,IACnB,MAAM2Z,GAAS,QACX3Z,EAAK6K,KACL7K,EAAK4Z,MACL5Z,EAAKO,YAAc,GACnBP,EAAK6Z,YAAc,GACnB7Z,EAAK8Z,iBAAmB,GACxB9Z,EAAK+Z,wBAA0B,GAC/BrP,GAAUsP,YAAa,EACvBha,EAAKia,aAAe,GACpBja,EAAKsZ,SAAW,GAChBtZ,EAAKyZ,WAAa,GAClBzZ,EAAK0Z,UAAY,GACjB1Z,EAAKiG,OAAS,KAIlB,GAAIsE,MAAMC,QAAQmP,IAAWA,EAAO1U,OAChCwR,EAAO3S,QAAQ6V,OADnB,CAUA,GALA3a,KAAKyT,YAAYD,OAAO0H,iBAAiBP,EAAQ,CAC7CQ,MAAOna,EAAK6K,KACZ+N,SAAU5Y,EAAK4Y,SACfwB,WAAYpa,EAAKoa,aAAc,IAE/B,SAAUpa,EACV,GAAyB,iBAAdA,EAAKqa,KACZrb,KAAKyT,YAAYD,OAAO8H,UAAU5W,IAAI1D,EAAK6K,KAAM7K,EAAKqa,UACnD,CACH,MAAME,EAAWzb,OAAO+S,KAAK7R,EAAKqa,MAAM,GAClCG,EAAS1b,OAAO0B,OAAOR,EAAKqa,MAAM,GAClCI,EAAUzb,KAAKyT,YAAYD,OAAOkI,aAAajX,IAAI8W,GACzDvb,KAAKyT,YAAYD,OAAO8H,UAAU5W,IAAI1D,EAAK6K,KAAM,GAAG4P,KAAWD,IACnE,CAEA,SAAUxa,GACVlB,OAAO6L,QAAQ3K,EAAK2a,MAAM1Z,SAAQ,EAAE2Z,EAASnC,MACpCzZ,KAAKyT,YAAYD,OAAOqI,SAASvU,IAAItG,EAAK6K,OAC3C7L,KAAKyT,YAAYD,OAAOqI,SAASnX,IAAI1D,EAAK6K,KAAM,CAAC,GAErD7L,KAAKyT,YAAYD,OAAOqI,SAASpX,IAAIzD,EAAK6K,MAAM+P,GAAWnC,CAAG,GAtBtE,CAwBA,IAGAhC,EAAOxR,OACP,MAAO,CAAEwR,SAAQC,YAGrB,QAAe9W,IAAXyQ,EAEA,IAAK,MAAM/Q,KAAS+Q,EAAQ,CACxB,MAAMyI,GAAU,QACZxZ,EAAMW,MACNX,EAAMqB,YACNrB,EAAMuL,KACN7L,KAAKyT,YAAYD,QAIrB,GAAIjI,MAAMC,QAAQsO,IAAYA,EAAQ7T,OAAQ,CAC1CwR,EAAO3S,QAAQgV,GACf,QACJ,CAEA9Z,KAAKyT,YAAYD,OAAOuG,iBACpBD,EACAxZ,EAAMsZ,UAAYnI,EAClBnR,EAAMuL,MAIV,MAAMiQ,EAAkBtJ,KAAKC,MAAMD,KAAK6C,UAAU/U,IAC9CR,OAAOic,UAAUC,eAAeC,KAAKH,EAAiB,oBAC/CA,EAAgBlC,SAM3B,MACInC,OAAQyE,EACRxE,SAAUyE,SACJnc,KAAKoc,aAAa,CACxB/K,OAAQ,CAACyK,GACTlE,QAASN,EAAsBM,UAChC,GAAM,GAGT5X,KAAKyT,YAAYD,OAAOgF,kBACxBxY,KAAKyT,YAAYD,OAAO+E,mBAExBb,EAAS5S,QACFqX,EAAgB7S,KAAK+S,GAAY,UAAU/b,EAAMuL,qBAAqBwQ,OAG7E5E,EAAO3S,QACAoX,EAAc5S,KAAK6J,GAAU,UAAU7S,EAAMuL,qBAAqBsH,MAC7E,CAIJ,MAAMmJ,EAAiB,IAAI,IAAIxE,IAAIJ,KAG3BD,OAAQ8E,EAAe7E,SAAU8E,GAAoBxc,KAAK6Z,uBAIlE,OAHApC,EAAO3S,QAAQyX,GACfD,EAAexX,QAAQ0X,GAEhB,CAAE/E,SAAQC,SAAU4E,EAC/B,CAQA,eAAApC,CAAgBjZ,GAUZ,OATAA,EAAMgB,SAASjB,IACX,GAAIA,EAAKoa,WAAY,CACjB,MAAMvP,EAAO7K,EAAK4Y,SAASzH,MAAM,KAAKsK,IAAI,GAC1C,QAAkB7b,IAAdI,EAAK6K,MAAsB7K,EAAK6K,OAASA,EACzC,MAAM,IAAItL,MAAM,SAASS,EAAK6K,kEAAkEA,KAEpG7K,EAAK6K,KAAOA,CAChB,KAEG5K,CACX,CAWA,cAAAkX,CAAezM,OAAW9K,EAAW8b,GAAa,EAAOC,GAAU,GAE/D,IAAIC,EASJ,OAVID,IAAS3c,KAAK4T,gBAAkB,CAAC,QAEpBhT,IAAb8K,IACAA,EAAW,IAAK1L,KAAK4T,mBAAoBlI,GACzCkR,EAAcpK,KAAKC,MAAMD,KAAK6C,UAAU3J,UAE3B9K,IAAb8K,GAA0B1L,KAAK2T,cAAc7C,uBAC7CpF,EAAW1L,KAAK2T,cAAc7C,qBAAqBpF,UAAY,CAAC,GAG/DA,GAEDgR,IAGAhR,EAAW4H,EAAc+F,aACrB7G,KAAKC,MAAMD,KAAK6C,UACZrV,KAAK2T,cAAc7C,sBAAsBpF,UAAY,CAAC,IACtDA,IAIZ1L,KAAKyT,YAAYU,eAAe1I,mBAAmBC,GAE/CA,GAAY,SAAUA,GACtB5L,OAAO6L,QAAQD,EAASiQ,MAAM1Z,SAAQ,EAAE2Z,EAASrK,MAC7CvR,KAAKyT,YAAYD,OAAOqJ,SAASnY,IAAIkX,EAASrK,EAAM,IAIxD7F,GAAY,UAAWA,GACvB5L,OAAO6L,QAAQD,EAASoR,OAAO7a,SAAQ,EAAE8a,EAAUxL,MAC/CvR,KAAKyT,YAAYD,OAAOkI,aAAahX,IAAIqY,EAAUxL,EAAM,IAI7D7F,GAAY,gBAAiBA,IAC7B1L,KAAKyT,YAAYc,YAAc/B,KAAKC,MAAMD,KAAK6C,UAAU3J,EAAS6I,eAGtEvU,KAAKyT,YAAYD,OAAO0B,SAAWxJ,GAAUwJ,UAAYlV,KAAKuT,gBAAgB2B,SAC9ElV,KAAKyT,YAAYD,OAAOwJ,QAAUtR,GAAUsR,SAAWhd,KAAKuT,gBAAgByJ,QAE5Ehd,KAAKwT,OAAOc,eACR5I,GAAU4I,gBAAkBtU,KAAKuT,gBAAgBe,eACrDtU,KAAKyT,YAAYuH,UAAYtP,GAAUsP,WAAahb,KAAKuT,gBAAgByH,UACzEhb,KAAKyT,YAAYK,mBAAmB9M,MAChC0E,GAAUqI,iBAAmB/T,KAAKuT,gBAAgBQ,gBAEtD/T,KAAKyT,YAAY1K,aAAe2C,GAAU3C,cAAgB/I,KAAKuT,gBAAgBxK,aAC/E/I,KAAKyT,YAAYwJ,SAASC,WAAWC,SACjCzR,GAAU0R,gBAAkBpd,KAAKuT,gBAAgB6J,eACrDpd,KAAKyT,YAAYK,mBAAmBzG,iBAChC3B,GAAU2B,kBAAoBrN,KAAKuT,gBAAgBlG,iBAEvDrN,KAAKyT,YAAY4J,cAAgB,IAAIvF,IACrC9X,KAAKyT,YAAYW,OAAS1I,GAAU0I,QAAUpU,KAAKuT,gBAAgBa,OACnEpU,KAAKyT,YAAYY,gBACb3I,GAAU2I,iBAAmBrU,KAAKuT,gBAAgBc,gBACtDrU,KAAKyT,YAAYD,OAAOQ,cAAcC,aAClCvI,GAAUwI,QAAUlU,KAAKuT,gBAAgBW,QAE7ClU,KAAKyT,YAAYgB,SAAW/I,GAAU+I,UAAYzU,KAAKuT,gBAAgBkB,SACnEmI,IAAa5c,KAAK4T,gBAAkBgJ,GAEjC,IAvDe,CAAC,qCAwD3B,CAUA,kBAAAzC,CAAmBlZ,GACf,MAAMqc,EAAgB9K,KAAKC,MAAMD,KAAK6C,UAAUpU,IAE1Csc,EAAYjH,GAAuB,iBAARA,GAA4B,OAARA,IAAiB/K,MAAMC,QAAQ8K,GAC9E9K,EAAW8K,GAAQ/K,MAAMC,QAAQ8K,GAGjCkH,EAAa,CAACC,EAAOC,KACvB,MAAMC,EAAS,IAAKC,gBAAgBF,IA4CpC,MA3C2B,CAAC,WAAY,cAErBzb,SAASoF,WACjBsW,EAAOtW,EAAI,IAGlBkW,EAASE,IAAUF,EAASG,IAC5B5d,OAAO+S,KAAK4K,GAAOxb,SAASoF,IACxB,GAAIkW,EAASE,EAAMpW,IAIXsW,EAAOtW,GAHLA,KAAOsW,EAGKH,EAAWC,EAAMpW,GAAMqW,EAAKrW,IAF5BoW,EAAMpW,QAIrB,GAAImE,EAAQiS,EAAMpW,KAASmE,EAAQkS,EAAKrW,IAC3C,GAAY,YAARA,EACAsW,EAAOtW,GAAOoW,EAAMpW,OACjB,CACH,MAAMwW,EAAY/d,OAAOge,YACrBJ,EAAKrW,GAAKiC,KAAI,CAACgN,EAAKrB,IAAM,CAACqB,EAAIzK,KAAMoJ,MAEzCwI,EAAMpW,GAAKpF,SAASqU,IAChB,GAAIA,EAAIzK,MAAQyK,EAAIzK,QAAQgS,EAAW,CACnC,MAAME,EAAQF,EAAUvH,EAAIzK,MAC5B,IAAIyK,EAAI0H,SAOJ,MAAM,IAAIzd,MAAM,IAAIkd,EAAM5R,+BAA+ByK,EAAIzK,sBAAsB6R,EAAK7R,cANxF8R,EAAOtW,GAAK0W,GAAS,IACdL,EAAKrW,GAAK0W,MACVzH,UAEAqH,EAAOtW,GAAK0W,GAAOC,QAIlC,MACIL,EAAOtW,GAAKvC,KAAKwR,EACrB,GAER,MAEAqH,EAAOtW,GAAOoW,EAAMpW,EACxB,IAGDsW,CAAM,EAGX3D,EAAgB,CAAC,EACjBiE,EAAkBpS,IAEpB,GAAIA,KAAQmO,EAAe,OAAOA,EAAcnO,GAChD,IAWI6R,EAXA1c,EAAOC,EAAMC,MAAMC,GAAMA,EAAE0K,OAASA,IAExC,IAAK7K,EAAKsZ,QAEN,OADAN,EAAcnO,GAAQ7K,EACfA,EAGX,GAAI,IAAK8W,IAAI9W,EAAKsZ,SAAUhB,OAAStY,EAAKsZ,QAAQrU,OAC9C,MAAM,IAAI1F,MAAM,wCAAwCS,EAAK6K,cASjE,OALA7K,EAAKsZ,QAAQrY,SAASsZ,IAClBmC,EAAOO,EAAe1C,GACtBva,EAAOwc,EAAWxc,EAAM0c,EAAK,IAEjC1D,EAAcnO,GAAQ7K,EACfA,CAAI,EAOf,OAJoBsc,EAAc1b,QAC7BZ,IAAUA,EAAKkd,WAClB5U,KAAKtI,GAASid,EAAejd,EAAK6K,OAGxC,CAOA,iBAAAsS,GACI,OAAO3L,KAAKC,MAAMD,KAAK6C,UAAUrV,KAAK2T,cAAc5C,yBACxD,CAYA,YAAAqN,CAAalJ,EAAU8H,EAASzT,GAC5B,MAAMlI,EAAOrB,KAAKyT,YAAYD,OAAOnS,OAoCrC,OAnCAA,EAAKuW,QAAU5X,KAAK0U,qBAEfnL,GACDlI,EAAKgQ,OAAOpP,SAAS3B,WACVA,EAAM2L,eACN3L,EAAM0L,OAAO,SAINpL,IAAlBS,EAAKqK,WACLrK,EAAKqK,SAAW,CAAC,GAGrB,CACI,CAACwJ,EAAU,YACX,CAAC8H,EAAS,WACV,CAAChd,KAAKwT,OAAOc,eAAgB,kBAC7B,CAACtU,KAAKyT,YAAYuH,UAAW,aAC7B,CAAChb,KAAKyT,YAAYK,mBAAmB9M,MAAO,mBAC5C,CAAChH,KAAKyT,YAAY1K,aAAc,gBAChC,CAAC/I,KAAKyT,YAAYwJ,SAASC,WAAWC,SAAU,kBAChD,CAACnd,KAAKyT,YAAYK,mBAAmBzG,iBAAkB,qBACzDpL,SAAQ,EAAEoc,EAASxS,MACjB,MAAMyS,EAAIte,KAAK2T,cAAc7C,sBAAsBpF,UAAY,CAAC,EAC1D6S,EAAKve,KAAKuT,gBAEZ8K,KAAaC,EAAEzS,IAAS0S,EAAG1S,MAC3BxK,EAAKqK,SAASG,GAAQwS,EAC1B,IAGsC,IAAtCve,OAAO+S,KAAKxR,EAAKqK,UAAUzF,eACpB5E,EAAKqK,SAGTrK,CACX,CAiBA,kBAAM+a,CAAa5C,EAAUgF,GAAmB,EAAOC,GAAW,GAC9D,IAAI,kBAAEC,GAAsB1e,KAE5BA,KAAKmY,eAAe,CAAEuG,mBAAmB,IAAS,GAAM,GACxD,IACI,MAAMC,EAAmBrL,EAAcsL,iBAAiBpF,GACxD,GAAImF,EAAiB1Y,OACjB,MAAO,CAAEwR,OAAQkH,EAAkBjH,SAAU,IAGjD,KAC4B,iBAAb8B,GAAyBA,aAAoBtO,UACpDsO,EAAWhC,EAAS/E,MAAM+G,IAG9B,MAAM9E,EAAuB8E,EAAS5B,QAChCF,EAAW,GAWjB,QAV6B9W,IAAzB8T,EACAgD,EAAS5S,KACL,2CAA2C9E,KAAK0U,kEAE7CA,IAAyB1U,KAAK0U,sBACrCgD,EAAS5S,KACL,0CAA0C4P,6DAAgF1U,KAAK0U,iEAInI,aAAc8E,QAAwD5Y,IAA5CZ,KAAK2T,cAAc7C,qBAAoC,CACjF,MAAM2G,EAASnE,EAAcuL,iBAAiBrF,EAAS9N,UACvD,GAAIH,MAAMC,QAAQiM,IAAWA,EAAOxR,OAChC,MAAO,CAAEwR,SAAQC,YAErBgH,EAAoBlF,EAAS9N,SAASgT,mBAAqBA,EAE3D1e,KAAKmY,eACD,IAAKqB,EAAS9N,SAAUgT,mBAAmB,IAC3C,GACA,EAER,MACwC9d,IAApCZ,KAAKyT,YAAYhF,gBAEjBzO,KAAKyT,YAAYjQ,QAAQK,2BACrB7D,KAAKyT,YAAYhF,eACjBlL,OAAO,iBAGf,MAAMkU,EAAS,CACXA,aAAczX,KAAKyT,YAAYD,OAAOzS,KAClCyY,EACAgF,EACAC,GAEJ/G,YAMJ,OAJA1X,KAAKyT,YAAYjQ,QAAQa,YACrBrE,KAAKyT,YAAYhF,eACjBzO,KAAKyT,YAAYhF,gBAEdgJ,CACX,CAAE,MAAOqH,GACL,MAAO,CACHrH,OAAQ,CACJ,sEACAqH,EAAI/Z,YAER2S,SAAU,GAElB,CACJ,CAAE,QAEE1X,KAAKmY,eAAe,CAAEuG,sBAAqB,EAC/C,CACJ,CAQA,+BAAOK,GAIH,OAHKzL,EAActC,WACfsC,EAActC,SAAW,IAAIsC,GAE1BA,EAActC,QACzB,CAcA,mBAAOqI,CAAa2F,EAAeC,GAG/B,OADAA,EAAkBA,GAAmB,CAAC,OAChBre,IAAlBoe,GAAqE,IAAtClf,OAAO+S,KAAKmM,GAAe/Y,OACnDgZ,GAIXnf,OAAO6L,QAAQsT,GAAiBhd,SAAQ,EAAEoF,EAAKjH,MACvCmL,MAAMC,QAAQpL,IAAUmL,MAAMC,QAAQwT,EAAc3X,IACpD2X,EAAc3X,GAAKvC,QAAQ1E,GACH,iBAAVA,GAAoD,iBAAvB4e,EAAc3X,GAEzD2X,EAAc3X,GAAOiM,EAAc+F,aAAa2F,EAAc3X,GAAMjH,GAEpE4e,EAAc3X,GAAOjH,CACzB,IAEG4e,EACX,CAaA,6BAAOE,CAAuBC,EAAMC,EAAQC,EAAuB,CAAC,GAChE,MAAMC,EAAM,IAAI,EAAQ,CACpBC,iBAAiB,EACjBC,QAAS,CACLC,IAAK,oBAETC,QAAS,CACL,EACA,EACA,EACA,EACA,MAEDL,IAEPC,EAAIK,WAAW,WAEf,MAAMC,EAAWN,EAAIO,QAAQT,GACvBU,EAA+B,iBAATX,GAAqBA,aAAgBjU,OACjE,IAAI6U,EAEJ,IACIA,EAAWD,EAAetI,EAAS/E,MAAM0M,GAAQA,CACrD,CAAE,MAAOa,GACL,MAAO,CAAC,2BAA2BA,EAAUjb,aACjD,CAIA,OAFc6a,EAASG,GAGZ,GAIIH,EAASnI,OAAOnO,KAAK6J,IAGhC,MACMnD,EAAO,GADQoP,EAAOa,IAAI9N,MAAM,KAAKhN,MAAM,GAAI,GAAGiN,KAAK,OAC9Be,EAAM+M,eACrC,IAAIC,EAAc,GAElB,GAAIL,EAAc,CACd,MAAMM,EAAS,QAAcjB,GAEvBkB,EAAYD,EAAOE,SAASnN,EAAM+M,cAAc9f,MAAMmgB,KAAO,EAC7DC,EAAUJ,EAAOE,SAASnN,EAAM+M,cAAcO,SAASF,KAAO,EAGhEJ,EADAE,IAAcG,EACA,QAAQH,MAER,SAASA,KAAaG,KAE5C,CAEA,OAAQrN,EAAMuN,SACV,IAAK,OACD,MAAO,GAAGP,KAAenQ,KAAQmD,EAAMC,cAAa,IAAAiC,WAChDlC,EAAMwN,OAAOC,iBAErB,IAAK,uBACD,MAAO,GAAGT,KAAenQ,KAAQmD,EAAMC,cAAa,IAAAiC,WAChDlC,EAAMwN,OAAOE,sBAErB,IAAK,QACD,MAAO,GAAGV,KAAenQ,KAAQmD,EAAMC,cAAa,IAAAiC,WAChDlC,EAAMwN,OAAOG,gBAErB,IAAK,wBACD,MAAO,GAAGX,KAAenQ,KAAQmD,EAAMC,cAAa,IAAAiC,WAChDlC,EAAMwN,OAAOI,wBAGrB,IAAK,MACL,IAAK,QACD,MAAO,GACX,QACI,MAAO,GAAGZ,KAAenQ,KAAQmD,EAAMC,UAC/C,IAGUxR,QAAQkd,GAAgB,KAARA,GAClC,CAEA,6BAAAzE,CAA8B1G,GAC1B,MAAMgL,EAAmBrL,EAAc0N,sBACnCrN,EAAe,GACnB,GAAIgL,EAAiB1Y,OAAQ,OAAO0Y,EAGpC,MAAM,MAAE1d,EAAK,OAAEoQ,GAAWsC,EACpBsN,EAAgBhgB,EAAMW,QAAQZ,GAASA,EAAKoa,aAC5C8F,EAAoB,CAAC,EAGrBzJ,EAAS,GACfwJ,EAAchf,SAASjB,IACfA,EAAK6K,QAAQqV,EACbzJ,EAAO3S,KAAK,aAAa9D,EAAK4Y,6CAE9BsH,EAAkBlgB,EAAK6K,MAAQ7K,EAAK4Y,SAASzH,MAAM,KAAKhN,MAAM,GAAI,GAAGiN,KAAK,IAC9E,IAMJ,MAAM+O,EAAY,IAAIrJ,IAoDtB,OAnDA7W,EAAMgB,SAASjB,IACX,MAAMogB,EAAapgB,EAAK4Y,SAASzH,MAAM,KAEvC,IAAK,IAAI8C,EAAImM,EAAWnb,OAAS,EAAGgP,GAAK,EAAGA,GAAK,EAAG,CAChD,MAAMoM,EAAmBD,EAAWnM,GAC9BqM,EAAsBF,EAAWjc,MAAM,EAAG8P,GAAG7C,KAAK,KAExD,GACIiP,KAAoBH,GACpBlgB,EAAK6K,OAASwV,GACdC,IAAwBJ,EAAkBG,GAC5C,MACuBzgB,IAAjBI,EAAKsZ,SAA0BtZ,EAAKsZ,QAAQxY,SAASuf,IACrD5J,EAAO3S,KAAK,SAAS9D,EAAK6K,4CAA4CwV,OAE1E,KACJ,CACJ,CAIA,IAAK,IAAIpM,EAAI,EAAGA,GAAKjU,EAAKsZ,SAAW,IAAIrU,OAAQgP,GAAK,EAAG,CACrD,MAAMsM,EAAevgB,EAAKsZ,QAAQrF,GAClC,GAAIsM,KAAgBL,EAAmB,CACnC,MAAMM,EAAmD,KAApCN,EAAkBK,GACnC,GAAGL,EAAkBK,MAAiBA,IAAiBA,EAE3D,IAAKvgB,EAAK4Y,SAAS9X,SAAS0f,GAAe,CACvC/J,EAAO3S,KACH,SAAS9D,EAAK6K,uCAAuC0V,iCAEzD,KACJ,CACJ,CACJ,CAGIJ,EAAU7Z,IAAItG,EAAK6K,OACnB4L,EAAO3S,KAAK,SAAS9D,EAAK6K,mCAE9BsV,EAAU9gB,IAAIW,EAAK6K,KAAK,SAGbjL,IAAXyQ,GACAA,EAAOpP,SAAS3B,IACR6gB,EAAU7Z,IAAIhH,EAAMuL,OACpB4L,EAAO3S,KAAK,oBAAoBxE,EAAMuL,mCAE1CsV,EAAU9gB,IAAIC,EAAMuL,KAAK,IAG1B4L,CACX,CAQA,4BAAOuJ,CAAsBrN,EAAeyL,EAAS,GACjD,OAAO9L,EAAc4L,uBAAuBvL,EAAeyL,EAC/D,CAQA,uBAAOP,CAAiB4C,GACpB,OAAOnO,EAAc4L,uBAAuBuC,EAAc,EAC9D,CAQA,uBAAO7C,CAAiBpF,GACpB,OAAOlG,EAAc4L,uBAAuB1F,EAAU,EAC1D,CAOA,gBAAAkI,GACI,OAAO1hB,KAAKyT,YAAYhF,iBAAmBzO,KAAKyT,YAAYD,OAAOlT,KACvE,CAKA,kBAAAqhB,GACI3hB,KAAKyT,YAAYD,OAAOoO,iBAAiB5hB,KAAKyT,YAAYhF,eAC9D,CAKA,kBAAAoT,CAAmBhW,GACf7L,KAAKwT,OAAOsO,0BAA0BjW,EAC1C,CAEA,qBAAI6S,GACA,OAAO1e,KAAK4T,gBAAgB8K,mBACxB1e,KAAK2T,cAAc7C,sBAAsBpF,UAAUgT,mBACnD1e,KAAKuT,gBAAgBmL,iBAC7B,E,wEChsCW,MAAMqD,EACjBC,oBAAsB,GAGtB,WAAAtiB,GACI,GAAIM,KAAKN,cAAgBqiB,EACrB,MAAM,IAAIxhB,MAAM,uCAExB,CAEA,eAAA0hB,CAAgBC,GACZ,IAAKliB,KAAKgiB,oBAAoBlgB,SAASogB,GACnC,MAAM,IAAI3hB,MACN,kBAAkB2hB,QAAgBliB,KAAKN,YAAYmM,uDAC3B7L,KAAKgiB,uBAGrChiB,KAAKmiB,gBAAkBD,CAC3B,CAIA,eAAME,CAAU9hB,GACZ,MAAM,IAAIC,MAAM,0DACpB,EAMG,MAAM8hB,UAA4BN,EACrC,WAAAriB,GAKI,GAJAiB,QACAX,KAAKgiB,oBAAsB,CAAChiB,KAAKN,YAAYmM,MAC7C7L,KAAKmiB,gBAAkBniB,KAAKN,YAAYmM,KACxC7L,KAAKiiB,qBAAkBrhB,EACnBZ,KAAKN,cAAgB2iB,EACrB,MAAM,IAAI9hB,MAAM,uCAExB,ECtCJ,MAAc,GACd,MAAc,GAEC,MAAM+hB,UAA8BP,EAG/CC,oBAAsB,CAClB,OACA,wBACA,mBACA,qBACA,SACA,OACA,SACA,aACA,eACA,QAGJ,eAAMI,CAAU9hB,GACZ,MAAMiiB,EAAiB,EAAU,CAC7BC,SAAU,CACNvhB,MAAOX,EAAMW,MAAMqI,KAAKtI,IAAS,CAC7Bme,KAAM,CAAE/d,GAAIJ,EAAKI,GAAI6F,MAAOjG,EAAKiG,MAAOwb,OAAQzhB,EAAKyhB,YAEzDC,MAAOpiB,EAAMqB,YAAY2H,KAAKyC,IAAe,CACzCoT,KAAM,CAAE/d,GAAI2K,EAAW3K,GAAIuhB,OAAQ5W,EAAWhK,KAAM6gB,OAAQ7W,EAAW/J,SAG/EgF,MAAO,CACH,CACI6b,SAAU,OACV7b,MAAO,CACH8b,MAAO,YACP7b,MAAO,cACPwb,OAAQ,kBAIpBM,cAAc,IAGZC,EAAU,CAAEnX,KAAM7L,KAAKmiB,iBAE7B,OAAQniB,KAAKmiB,iBACT,IAAK,SACDa,EAAQC,YAAc,CAClBnW,GAAI,EACJC,GAAI,EACJmW,EAAG,IACHC,EAAG,KAEP,MACJ,IAAK,OACDH,EAAQI,oBAAsB,IAC9B,MACJ,IAAK,OACDJ,EAAQK,YAAc,IACtBL,EAAQM,gBAAmBC,GAAS,IACpC,MACJ,IAAK,OACDP,EAAQQ,YAAexiB,GAAS,IAChC,MACJ,IAAK,wBACL,IAAK,mBACL,IAAK,qBAAsB,CACvB,MAAO6K,KAAS4X,GAAUzjB,KAAKmiB,gBAAgBhQ,MAAM,KACrD6Q,EAAQU,QAAU,GAClBV,EAAQW,QAAU,IAClBX,EAAQS,OAASA,EAAOrR,KAAK,KAC7B4Q,EAAQnX,KAAOA,EACf,KACJ,EAMJ,MAAMqI,EAASqO,EAAerO,OAAO8O,GAMrC,OALA9O,EAAO0P,MACH,CAAC,OAAQ,QAAQ9hB,SAAS9B,KAAKmiB,wBAEzBjO,EAAO2P,UAAU,cAEpB,IACAvjB,EACHW,MAAOshB,EAAethB,QAAQqI,KAAKtI,IAAS,CACxCI,GAAIJ,EAAKI,KAGTmI,SAAU,CACNiD,EAAGxL,EAAKuI,WAAWiD,EAAIxL,EAAKiG,QAAU,EACtCqF,EAAGtL,EAAKuI,WAAW+C,EAAItL,EAAKyhB,SAAW,OAIvD,EClGW,MAAMqB,UAA0BzB,EAE3CL,oBAAsB,CAClB,YAGJG,gBAAkB,WAElB,SAAAC,CAAU9hB,GACN,MAAMW,EAAQX,EAAMW,MAAMqI,KAAKtI,IAAS,IACjCA,EACHuI,SAAU,CAAEiD,EAAG,EAAGF,EAAG,OAEzB,MAAO,IAAKhM,EAAOW,QACvB,ECuCW,MAAM8iB,EACjBC,kBAAepjB,EAEfqjB,mBAAgBrjB,EAEhBN,WAAQM,EAMRsjB,iBAAmB,CACfC,SAAU,IAAIL,EACdM,gBAAiB,IAAI9B,GAGzB,WAAA5iB,GACIM,KAAKiU,aAAa,WACtB,CAEA,YAAAA,CAAaiO,GACT,MAAOmC,EAAYC,GAAiBpC,EAAU/P,MAAM,OAC9C6R,EAAehkB,KAAKkkB,iBAAiBG,GAC3C,QAAqBzjB,IAAjBojB,EACA,MAAM,IAAIzjB,MAAM,uBAAuB2hB,0BAE3CliB,KAAKgkB,aAAeA,OACEpjB,IAAlB0jB,GACAtkB,KAAKgkB,aAAa/B,gBAAgBqC,GAEtCtkB,KAAKikB,cAAgB/B,CACzB,CAEA,sBAAAqC,GACI,OAAOzkB,OAAO6L,QAAQ3L,KAAKkkB,kBACtB5a,KAAI,EAAE+a,EAAYG,KAC2B,IAAtCA,EAAOxC,oBAAoB/b,OACpBue,EAAOxC,oBAAoB1Y,KAC7B4Y,GAAc,GAAGmC,OAAgBnC,MAGnCmC,IAEVI,MACT,CAEA,aAAAC,CAAclL,GACVxZ,KAAKM,MApFb,SAAyBkZ,GACrB,MAAMmL,EAAoB,IAAIlhB,IAC9B+V,EAASvY,MAAMgB,SAASjB,IACpBA,EAAKO,WAAWU,SAASoG,GAASsc,EAAkBjgB,IAAI2D,EAAKjH,GAAIJ,EAAKI,KAAI,IAG9E,MAAMH,EAAQuY,EAASvY,MAClBW,QAAQZ,QAA2BJ,IAAlBI,EAAKuI,WACtBD,KAAKtI,IAAS,CACXI,GAAIJ,EAAKI,OAEXO,EAAc6X,EAAS7X,YACxBC,QACImK,GACG9K,EAAMW,QAAQsU,GAAcA,EAAU9U,KAAOujB,EAAkBlgB,IAAIsH,EAAWhK,QACzEkE,OAAS,GACdhF,EAAMW,QAAQsU,GAAcA,EAAU9U,KAAOujB,EAAkBlgB,IAAIsH,EAAW/J,MACzEiE,OAAS,IAErBqD,KAAKyC,IAAe,CACjB3K,GAAI2K,EAAW3K,GACfW,KAAM4iB,EAAkBlgB,IAAIsH,EAAWhK,MACvCC,GAAI2iB,EAAkBlgB,IAAIsH,EAAW/J,QAE7C,MAAO,CAAEf,QAAOU,cACpB,CA2DqBijB,CAAgBpL,EACjC,CAEA,mBAAMqL,CAAcrL,GAGhB,OAFAxZ,KAAK8kB,mBA7Db,SAAyBxkB,EAAOkZ,GAC5B,MAAMuL,EAAe,IAAIthB,IAMzB,OALAnD,EAAMW,MAAMgB,SAASjB,GAAS+jB,EAAargB,IAAI1D,EAAKI,GAAIJ,EAAKuI,YAC7DiQ,EAASvY,MAAQuY,EAASvY,MAAMqI,KAAKtI,IAAS,IACvCA,EACHuI,SAAUwb,EAAazd,IAAItG,EAAKI,IAAM2jB,EAAatgB,IAAIzD,EAAKI,IAAMJ,EAAKuI,aAEpEiQ,CACX,CAuDewL,OADchlB,KAAKilB,UAAUjlB,KAAKM,OACVkZ,EACnC,CAEA,eAAMyL,CAAU3kB,GACZ,OAAON,KAAKgkB,aAAa5B,UAAU9hB,EACvC,CAEA,gBAAAwkB,GACI9kB,KAAKM,MAAMW,MAAQjB,KAAKM,MAAMW,MAAMqI,KAAKtI,IACrC,MAAMkkB,EAAcve,SAASwF,eAAenL,EAAKI,IACjD,MAAO,IACAJ,EACHiG,MAAOie,EAAYC,YACnB1C,OAAQyC,EAAY7Y,aACvB,GAET,E,2JC/FJ,SAAS+Y,EAAgBvK,GACrB,MAAMwK,EAAmB,CAAC,EACpBC,EAAY,IAAIxN,IAChBL,EAAS,GAgCf,OA9BAoD,EAAW5Y,SAASsjB,IAChB,QAAmB3kB,IAAf2kB,EAAKC,MAAqB,CAC1B,MAAMC,EAAcL,EAAgBG,EAAKC,OACrCja,MAAMC,QAAQia,IAAgBA,EAAYxf,QAC1CwR,EAAO3S,QAAQ2gB,GAGnB3lB,OAAO6L,QAAQ8Z,GAAaxjB,SAAQ,EAAEyjB,MAClC,GAAIJ,EAAUhe,IAAIoe,GAAa,CAC3B,MAAMC,EAAWD,EAAWvgB,MAAMugB,EAAWpgB,QAAQ,KAAO,GAC5DmS,EAAO3S,KACH,mBAAmB6gB,2BAAkCJ,EAAK1Z,wBAElE,CACAyZ,EAAUjlB,IAAIqlB,EAAW,IAG7BH,EAAKC,MAAQC,CACjB,CAEIH,EAAUhe,IAAI,YAAYie,EAAK1Z,SAC/B4L,EAAO3S,KACH,mBAAmBygB,EAAK1Z,yBAIhCwZ,EAAiB,YAAYE,EAAK1Z,QAAU,IAAK0Z,GACjDD,EAAUjlB,IAAI,YAAYklB,EAAK1Z,OAAO,IAGtC4L,EAAOxR,OACAwR,EAGJ4N,CACX,CAwMA,SAASO,EAAerU,GACpB,MAAMsU,EAAWrT,KAAKC,MAAMD,KAAK6C,UAAU9D,IAE3C,QAA4B3Q,IAAxBilB,EAAStkB,WAA0B,CACnC,MAAMukB,GAAM,QAAgBD,EAAStkB,WAAY,GAAI,IACrD,GAAIgK,MAAMC,QAAQsa,IAAQA,EAAI7f,OAC1B,OAAO6f,EAGX,MAAM,OAAErkB,EAAM,QAAEC,GAAYokB,EAC5BD,EAASpkB,OAASA,EAClBokB,EAASnkB,QAAUA,SAEZmkB,EAAStkB,UACpB,CAEA,QAA4BX,IAAxBilB,EAAShL,WAA0B,CACnC,MAAMiL,EAAMV,EAAgBS,EAAShL,YACrC,GAAItP,MAAMC,QAAQsa,IAAQA,EAAI7f,OAC1B,OAAO6f,EAGXD,EAASpkB,OAAS,IAAKokB,EAASpkB,UAAWqkB,UACpCD,EAAShL,UACpB,CAEA,QAAwCja,IAApCilB,EAASE,uBAAsC,CAC/C,MAAMjL,EAAkB,CAAC,EACzB+K,EAASE,uBAAuB9jB,SAASoG,IACrCyS,EAAgB,GAAGzS,EAAK6E,aAAa7E,EAAKwD,QAAU,IAAKxD,EAAM,IAEnEwd,EAASE,uBAAyBjL,CACtC,MACI+K,EAASE,uBAAyB,CAAC,EAOvC,OAJAF,EAAS1K,MAAQ0K,EAASG,cAAgB,UACnCH,EAASG,aAEhBH,EAASI,QAAS,EACXJ,CACX,CAEA,MAAMK,UAAmB,KACrBzkB,OAAS,CAAC,EAEVC,QAAU,CAAC,EAEX/B,UAAOiB,EAEP,WAAAlB,CACImM,EACA+O,EACAnZ,EACAC,EACAsZ,EACAC,EAAc,GACdkL,EAAc,GACdC,EAAgB,GAChBC,EAAe,GACfpf,EAAQ,KAERtG,QAEAX,KAAKib,YAAcA,EACnBjb,KAAKsa,QAAU6L,EACfnmB,KAAKya,UAAY2L,EACjBpmB,KAAK0a,SAAW2L,EAChBrmB,KAAK4a,MAAQA,EACb5a,KAAKmb,MAAQtP,EACb7L,KAAKgb,UAAYA,EACjBhb,KAAKL,KAAOkM,EACZ7L,KAAKiH,MAAQA,EAEbnH,OAAO+S,KAAKpR,GAAQQ,SAASqkB,IACzB,MAAMje,EAAO5G,EAAO6kB,KACpBtmB,KAAKumB,SAASD,EAAGje,EAAK,IAG1BvI,OAAO+S,KAAKnR,GAASO,SAASqkB,IAC1B,MAAMje,EAAO3G,EAAQ4kB,KACrBtmB,KAAKwmB,UAAUF,EAAGje,EAAK,GAE/B,CAQA,uBAAAoe,CAAwBlB,GACpB,MAAMhkB,EAAa,IACb,MAAEnB,GAAUmlB,GAGZ,cAAEmB,EAAa,6BAAEC,GAAiC3mB,KAAKyB,OAAO,YAAY8jB,EAAK1Z,QAG/E+a,EAAWrB,EAAK1Z,KAAKsG,MAAM,KAC3BjF,EAAY0Z,EAASA,EAAS3gB,OAAS,GAEvC4gB,EAAgBtB,EAAK1Z,KACtB1G,MAAM,GAAI,GAAK,KAAyBc,OAAS,EAAIiH,EAAUjH,SAE9D6gB,EAAW,CAAEC,KAAM,GAAIC,MAAO,IAE9BC,EAAW,IAAKjnB,KAAKyB,UAAWzB,KAAK0B,SAG3C5B,OAAO6L,QAAQsb,GAAUhlB,SAAQ,EAAEilB,EAAQC,MACnCD,EAAO9V,WAAW,cACtB0V,EAASK,EAAQvZ,MAAM9I,KAAKqiB,EAAQzZ,aAAa,IAGrD,IAAK,IAAIuH,EAAI,EAAGA,EAAI7U,EAAO6U,GAAK,EAAG,CAC/B,MAAMiS,EAAS,GAAGL,KAAiB5R,KAC7BmS,EAAkB,GAAGla,KAAaga,IAElC7e,EAAO,CACTwD,KAAMqb,EACNha,aAGEma,EAA0B,WAAdna,EAAyBlN,KAAK0B,QAAU1B,KAAKyB,OAQ/D,GANI2lB,KAAmBC,IACnBhf,EAAKqO,aAAe2Q,EAAUD,GAAiB1Q,aAC/CrO,EAAKuF,KAAOyZ,EAAUD,GAAiBxZ,KACvCvF,EAAKqF,aAAe2Z,EAAUD,GAAiB1Z,eAI9C5N,OAAOic,UAAUC,eAAeC,KAAK5T,EAAM,kBAC3CvI,OAAOic,UAAUC,eAAeC,KAAK5T,EAAM,QAC9C,CACE,MAAMuF,EAAqB,WAAdV,EAAyB,QAAU,OAChD,IAAIoa,EAAkBR,EAASlZ,GAAM2Z,MAAK,CAACxX,EAAGyX,IAAMzX,EAAIyX,IAAGC,WACvD,CAAC/Z,EAAcqQ,IAAUrQ,IAAiBqQ,KAGrB,IAArBuJ,IAEIA,EAD0B,IAA1BR,EAASlZ,GAAM3H,OACG,EAEAR,KAAK6I,OAAOwY,EAASlZ,IAAS,GAIxDvF,EAAKqF,aAAe4Z,EACpBjf,EAAKuF,KAAOA,EACZvF,EAAK1I,KAAO+mB,EACZre,EAAKqf,mBAAqBf,EAE1BG,EAASze,EAAKuF,MAAM9I,KAAKwiB,EAC7B,CAEA/lB,EAAWuD,KAAKuD,EACpB,CAEA,MAAMyd,GAAM,QAAgBvkB,EAAY,GAAI,IAC5C,GAAIgK,MAAMC,QAAQsa,IAAQA,EAAI7f,OAC1B,MAAM,IAAI1F,MAAM,wBAAwBP,KAAKL,yBAAyBmmB,EAAI1T,KAAK,QAEnF,MAAQ3Q,OAAQkmB,EAAWjmB,QAASkmB,GAAe9B,EAK7C9kB,EAAOhB,KAAKM,MAAMW,MAAMC,MAAMC,GAAMA,EAAEC,KAAOpB,KAAKoB,KACjCpB,KAAK6nB,iBAAiBC,KAAK9mB,EAClD+mB,CAAeJ,EAAWC,GAAY,EAAO,CAAC,GAAG1a,KAAa2Z,KAClE,CAEA,oBAAAmB,CAAqB3f,EAAM4f,GAGlB5f,EAAK6f,QAAWD,GACGjoB,KAAKmoB,cAAcxmB,YAAYC,QAC9CC,GAAMA,EAAEE,OAASsG,GAAQxG,EAAEG,KAAOqG,IAE3BpG,SAASJ,IACjB7B,KAAKmoB,cAAcvlB,iBAAiBf,EAAE,IAK1ComB,IACA,QAAwBjoB,KAAMqI,EAAMA,EAAKuF,MAG7CvF,EAAK6f,QAAUD,CACnB,CAEA,IAAA5mB,GACI,MAAM+mB,EAAaznB,MAAMU,OACnBgnB,EAAgB,GAChBC,EAAgB,GAChBvC,EAAyB,GA6C/B,OA3CAjmB,OAAO6L,QAAQ,IAAK3L,KAAKyB,UAAWzB,KAAK0B,UAAWO,SAAS2J,IACzD,MAAOsb,EAAQC,GAAWvb,EAEtBub,EAAQzkB,KACHykB,EAAQe,SACLf,EAAQ5lB,YAERwkB,EAAuBjhB,KAAK,CACxB+G,KAAMqb,EAAO/hB,MAAMgiB,EAAQja,UAAUjH,OAAS,GAC9CiH,UAAWia,EAAQja,YAI3Bob,EAAcxjB,KAAK,CACf+G,KAAMqb,EAAO/hB,MAAMgiB,EAAQja,UAAUjH,OAAS,GAC9CyQ,aAAcyQ,EAAQzQ,aACtBtV,GAAI+lB,EAAQ/lB,GACZ8L,UAAWia,EAAQja,UACnBU,KAAMuZ,EAAQvZ,KACdF,aAAcyZ,EAAQzZ,gBAI9B2a,EAAcvjB,KAAK,CACf+G,KAAMqb,EAAO/hB,MAAM,GACnB/D,GAAI+lB,EAAQ/lB,GACZhB,WAAyBQ,IAAlBumB,EAAQ/mB,MAAsB,KAAO+mB,EAAQ/mB,OAE5D,WAGGgoB,EAAW3mB,cACX2mB,EAAW1mB,QAClB0mB,EAAW7mB,WAAa+mB,EACxBF,EAAWvN,WAAawN,EACxBD,EAAWrC,uBAAyBA,EAEpCqC,EAAWvc,KAAOuc,EAAWzoB,YACtByoB,EAAWzoB,KAElByoB,EAAWpC,aAAoC,KAArBoC,EAAWjN,WAAeva,EAAYwnB,EAAWjN,aACpEiN,EAAWjN,MAEXiN,CACX,CAcA,gBAAAP,CAAiBU,EAAaC,EAAcX,GAAmB,EAAMjP,OAAUhY,GAC3E,MAAM6W,EAAS,GAuEf,OArEA3X,OAAO6L,QAAQ3L,KAAKyB,QAAQQ,SAAQ,EAAEqkB,EAAGje,WAEdzH,IAAnByH,EAAK6E,YAEJpN,OAAO+S,KAAK0V,GAAazmB,SAASwkB,SACtB1lB,IAAZgY,IAAyBA,EAAQ6P,MAAMC,GAAWpC,EAAElV,WAAWsX,OAEhEjR,EAAO3S,KACH,cAAcuD,EAAKwD,uBAAuBxD,EAAK6E,2DAKnDlN,KAAKM,MAAMkT,OAAOmV,mBAAmB3oB,KAAKM,MAAMc,GAAIiH,GAEpDrI,KAAK4oB,YAAYtC,IACrB,IAEJxmB,OAAO6L,QAAQ4c,GAAatmB,SAAQ,EAAE4mB,EAAKC,MACvC,QAAwBloB,IAApBkoB,EAAM5b,UAAyB,OACnC,MAAM6b,EAAYjpB,OAAO6L,QAAQ3L,KAAKyB,QAAQP,MAC1C,EAAE8nB,EAAKC,KAAWD,IAAQH,GAAOI,EAAM/b,YAAc4b,EAAM5b,YAE/D,QAAkBtM,IAAdmoB,EAAyB,CACzB,MAAMG,EAAc,IAAI,KAAcL,GACtCpR,EAAO3S,KACH,cAAcgkB,EAAMjd,uBAAuBid,EAAM5b,gEAGrDpN,OAAO8W,OAAOsS,EAAaJ,GAC3B9oB,KAAKmpB,aAAaD,EAAYhc,UAAW2b,EAAKK,EAClD,MAAWrB,GACP/nB,OAAO8W,OAAOmS,EAAU,GAAID,EAChC,IAGJhpB,OAAO6L,QAAQ3L,KAAK0B,SAASO,SAAQ,EAAEqkB,EAAGje,WAEfzH,IAAnByH,EAAK6E,YACJpN,OAAO+S,KAAK2V,GAAc1mB,SAASwkB,SACvB1lB,IAAZgY,IAAyBA,EAAQ6P,MAAMC,GAAWpC,EAAElV,WAAWsX,OAEhEjR,EAAO3S,KACH,cAAcuD,EAAKwD,uBAAuBxD,EAAK6E,2DAKnDlN,KAAKM,MAAMkT,OAAOmV,mBAAmB3oB,KAAKM,MAAMc,GAAIiH,GAEpDrI,KAAKopB,aAAa9C,IACtB,IAEJxmB,OAAO6L,QAAQ6c,GAAcvmB,SAAQ,EAAE4mB,EAAKC,MACxC,MAAMC,EAAYjpB,OAAO6L,QAAQ3L,KAAK0B,SAASR,MAC3C,EAAE8nB,EAAKC,KAAWD,IAAQH,GAAOI,EAAM/b,YAAc4b,EAAM5b,YAE/D,QAAkBtM,IAAdmoB,EAAyB,CACzB,MAAMG,EAAc,IAAI,KAAcL,GACtCpR,EAAO3S,KACH,cAAcgkB,EAAMjd,uBAAuBid,EAAM5b,gEAGrDpN,OAAO8W,OAAOsS,EAAaJ,GAC3B9oB,KAAKmpB,aAAaD,EAAYhc,UAAW2b,EAAKK,EAClD,MAAWrB,GACP/nB,OAAO8W,OAAOmS,EAAU,GAAID,EAChC,IAEGrR,CACX,CAEA,gBAAA4R,CAAiBC,GACb,MAAM7R,EAAS,GAgCf,OA9BA3X,OAAO6L,QAAQ3L,KAAKyB,QAAQQ,SAAQ,EAAEqkB,EAAGf,WAEd3kB,IAAnB2kB,EAAKrY,YACJpN,OAAO+S,KAAKyW,GAAiBxnB,SAASwkB,KACvC7O,EAAO3S,KACH,aAAaygB,EAAK1Z,sDAGtB7L,KAAK4oB,YAAYtC,IACrB,IAEJxmB,OAAO6L,QAAQ2d,GAAiBrnB,SAAQ,EAAE4mB,EAAKU,MAC3C,QAAwB3oB,IAApB2oB,EAAMrc,gBAIQtM,IAHAd,OAAO6L,QAAQ3L,KAAKyB,QAAQP,MAC1C,EAAE8nB,KAASA,IAAQH,IAEM,CACzB,MAAMW,EAAc,IAAI,IACpBD,EAAM1d,KACN0d,EAAMnpB,OACRqpB,SAAQ,GACVD,EAAYE,cAAgB,iBAC5BjS,EAAO3S,KACH,aAAaykB,EAAM1d,2DAGvB/L,OAAO8W,OAAO4S,EAAaD,GAC3BvpB,KAAKumB,SAASsC,EAAKW,EACvB,KAEG/R,CACX,CAEA,IAAA1W,CAAKwQ,GACD,IAAIoY,EAKJ,GAAI7pB,OAAOic,UAAUC,eAAeC,KAAK1K,EAAO,WAAaA,EAAM0U,OAC/D0D,EAAcpY,OAId,GAFAoY,EAAc/D,EAAerU,GAEzBhG,MAAMC,QAAQme,IAAgBA,EAAY1jB,OAC1C,OAAO0jB,EAAYrgB,KAAK6J,GAAU,QAAQnT,KAAKL,eAAeK,KAAKoB,eAAe+R,MAI1F,IAAIsE,EAAS,GAeT,GATA3X,OAAO6L,QAAQge,EAAYloB,QAAQQ,SAAQ,EAAE4J,EAAMxD,MAC1CwD,EAAKuF,WAAW,cAEjBvF,EAAKuF,WAAW,cAAgBvF,EAAK+d,SAAS,GAAG,SACjD5pB,KAAKymB,wBAAwBpe,EACjC,IAGJoP,EAveZ,SAA6BkS,EAAaloB,EAAQC,GAC9C,IAAI+V,EAAS,GAsEb,OA9CA3X,OAAO+S,KAAK,IACL8W,EAAYloB,UACZkoB,EAAYjoB,UAChBO,SAASilB,IACR,MAAMrb,EAAOqb,EAAO/hB,MAAM+hB,EAAO5hB,QAAQ,KAAO,GAC1C4H,EAAYga,EAAO/hB,MAAM,EAAG+hB,EAAO5hB,QAAQ,MACjD,GACKxF,OAAOic,UAAUC,eAAeC,KAAKxa,EAAQylB,IAC7CpnB,OAAOic,UAAUC,eAAeC,KAAKva,EAASwlB,IAO5C,GAAkB,aAAdha,EAA0B,CAEjC,MAAM2c,EAAcF,EAAYloB,OAAOylB,GAAQ9mB,MACzC0pB,EAAeroB,EAAOylB,GAAQvnB,KACpC,GAzCU,EAACoqB,EAAU3pB,KACzB,OAAQ2pB,GACJ,IAAK,WACL,IAAK,SACD,OAAO,EACX,IAAK,OACL,IAAK,MACD,MAAwB,iBAAV3pB,EAClB,IAAK,SACL,IAAK,UACL,IAAK,SACD,MAAwB,iBAAVA,EAClB,IAAK,OACD,MAAwB,kBAAVA,EAClB,IAAK,OACD,OAAOmL,MAAMC,QAAQpL,GACzB,QACI,OAAO,EACf,EAuBS4pB,CAAUF,EAAcD,GAEtB,GAAqB,WAAjBC,GAA8BroB,EAAOylB,GAAQ+C,MAAMnoB,SAAS+nB,IAEhE,GAAqB,SAAjBC,EAAyB,CAChC,MAAM,MAAEI,GAAUzoB,EAAOylB,GACnBiD,EAAqBN,EAAYjoB,QAAQqX,UAAeA,IAAQiR,IAClEC,EAAmBlkB,OAAS,GAC5BwR,EAAO3S,KAAK,aAAa+G,8BAAiCse,EAAmB/X,KAAK,qBAAqB8X,YAE/G,OAPIzS,EAAO3S,KAAK,aAAa+G,sBAAyBge,kBAA4BpoB,EAAOylB,GAAQ+C,cAF7FxS,EAAO3S,KAAK,aAAa+G,qBAAwBie,sBAAiCD,WAU1F,MApBsB,aAAd3c,EACAuK,EAAO3S,KAAK,mBAAmB+G,kCAE/B4L,EAAO3S,KAAK,oBAAoB+G,oBAAuBqB,iCAiB/D,IAIJpN,OAAO+S,KAAK8W,EAAY5D,wBAAwB9jB,SAASmoB,IACrD,IACKtqB,OAAOic,UAAUC,eAAeC,KAAKxa,EAAQ2oB,KAC7CtqB,OAAOic,UAAUC,eAAeC,KAAKva,EAAS0oB,GACjD,CACE,MAAMld,EAAYkd,EAAUjlB,MAAM,EAAGilB,EAAU9kB,QAAQ,MACjDuG,EAAOue,EAAUjlB,MAAMilB,EAAU9kB,QAAQ,KAAO,GAEtDmS,EAAO3S,KAAK,0BAA0B+G,oBAAuBqB,iCACjE,KAGAuK,GAAUA,EAAOxR,SAIrBwR,GAAS,QACL3X,OAAO+S,KAAK8W,EAAY5D,wBACxBtkB,EACAC,IANO+V,CAUf,CAqZqB4S,CAAoBV,EAAa3pB,KAAKyB,OAAQzB,KAAK0B,SACxD6J,MAAMC,QAAQiM,IAAWA,EAAOxR,OAChC,OAAOwR,EAAOnO,KAAK6J,GAAU,QAAQnT,KAAKL,eAAeK,KAAKoB,eAAe+R,MAIrFxS,MAAMI,KAAK4oB,GAGP7pB,OAAO+S,KAAK8W,EAAY5D,wBAAwB9f,QAChDnG,OAAO6L,QAAQ,IAAK3L,KAAKyB,UAAWzB,KAAK0B,UAAWO,SAAQ,EAAE,CAAEoG,WAEpCzH,IAApByH,EAAK9G,aACL8G,EAAK6f,QAAS,EAClB,IAKRpoB,OAAO6L,QAAQge,EAAY5D,wBAAwB9jB,SAC/C,EAAEmoB,EAAWE,MACoB,UAAzBA,EAAWpd,WAAkD,UAAzBod,EAAWpd,UAC/ClN,KAAKyB,OAAO2oB,GAAWlC,QAAS,EACA,WAAzBoC,EAAWpd,YAClBlN,KAAK0B,QAAQ0oB,GAAWlC,QAAS,EACrC,IAIR,MAAMpB,EAAW,CAAEC,KAAM,GAAIC,MAAO,IAE9BC,EAAW,IAAK0C,EAAYloB,UAAWkoB,EAAYjoB,SAGzD5B,OAAO6L,QAAQsb,GAAUhlB,SAAQ,EAAEilB,EAAQC,MACb,UAAtBA,EAAQja,WAA+C,UAAtBia,EAAQja,WACzClN,KAAKyB,OAAOylB,GAAQtZ,KAAOuZ,EAAQvZ,KACnC5N,KAAKyB,OAAOylB,GAAQxZ,aAAeyZ,EAAQzZ,aAC3C1N,KAAKyB,OAAOylB,GAAQxQ,aAAeyQ,EAAQzQ,aAC3CoQ,EAASK,EAAQvZ,MAAM9I,KAAKqiB,EAAQzZ,eACP,WAAtByZ,EAAQja,YACflN,KAAK0B,QAAQwlB,GAAQtZ,KAAOuZ,EAAQvZ,KACpC5N,KAAK0B,QAAQwlB,GAAQxZ,aAAeyZ,EAAQzZ,aAC5C1N,KAAK0B,QAAQwlB,GAAQxQ,aAAeyQ,EAAQzQ,aAC5CoQ,EAASK,EAAQvZ,MAAM9I,KAAKqiB,EAAQzZ,cACxC,IAGJ,MAAM6c,EAAwB5e,IAK1B7L,OAAO6L,QAAQA,GAAS1J,SAAQ,EAAEilB,EAAQC,MACtC,GAAID,EAAO9V,WAAW,aAAc,OAEpC,GAAI8V,KAAUD,EAAU,OAGxB,IAAKH,EAASK,EAAQvZ,MAAM9L,SAASqlB,EAAQzZ,cAAe,OAG5D,MAAM8c,EAAc/kB,KAAK6I,OAAOwY,EAASK,EAAQvZ,OACjDuZ,EAAQzZ,aAAe8c,EAAc,EACrC1D,EAASK,EAAQvZ,MAAM9I,KAAK0lB,EAAc,EAAE,GAC9C,EAWN,OARAD,EAAqBvqB,KAAKyB,QAC1B8oB,EAAqBvqB,KAAK0B,cAIHd,IAAnB2Q,EAAMhI,WACNvJ,KAAKuJ,cAAW3I,GAEb6W,CACX,CAEA,SAAAgT,GACI,IAAI3qB,OAAO0B,OAAOxB,KAAKyB,WAAY3B,OAAO0B,OAAOxB,KAAK0B,UAAUO,SAAS2J,IACrE9L,OAAO0B,OAAOoK,EAAG5H,QAAQ/B,SAASyoB,IAG9BA,EAAMzmB,YAAY2H,EAAG,GACvB,GAEV,EAkBG,SAAS+e,EACZ9e,EACA+O,EACArZ,EACAsZ,EACAC,EACAC,EACAC,EACAC,EAAc,GACdkL,EAAc,GACdC,EAAgB,GAChBC,EAAe,GACfpf,EAAQ,KAER,MAAM2jB,GAAsB,QAAmBrpB,GAC/C,IAAKqpB,EAAoBC,QACrB,OAAOD,EAAoBxqB,MAAMkJ,KAAK6J,GAAU,QAAQtH,cAAiBsH,MAG7E,MAAM2X,GAAmB,QAAgBvpB,EAAYuZ,EAAiBC,GAEtE,GAAIxP,MAAMC,QAAQsf,IAAqBA,EAAiB7kB,OACpD,OAAO6kB,EAAiBxhB,KAAK6J,GAAU,QAAQtH,cAAiBsH,MAGpE,SAAS4X,EAAuB1iB,GAC5B,MAAO,KACH,MAAM6gB,EAAc,IAAI,KAAc7gB,EAAKwD,MAE3C,OADA/L,OAAO8W,OAAOsS,EAAa7gB,GACpB6gB,CAAW,CAE1B,CAGA,MAAMznB,EAAS3B,OAAOge,YAClBhe,OAAO6L,QAAQmf,EAAiBrpB,QAAQ6H,KAAI,EAAEnI,EAAGkH,KAAU,CACvDlH,EACA4pB,EAAuB1iB,OAIzBuf,EAAa9nB,OAAOge,YACtBhe,OAAO6L,QAAQmf,EAAiBppB,SAAS4H,KAAI,EAAEnI,EAAGkH,KAAU,CACxDlH,EACA4pB,EAAuB1iB,OAIzBgd,EAAmBD,EAAgB,IAAIvK,KAAe+P,EAAoBxqB,QAEhF,GAAImL,MAAMC,QAAQ6Z,IAAqBA,EAAiBpf,OACpD,OAAOof,EAAiB/b,KAAK6J,GAAU,QAAQtH,cAAiBsH,MAEpE,MAAM6X,EA/uBV,SAA0BnQ,GACtB,MAAMoQ,EAAU,CAACC,EAAGhD,GAAS,KACzB,MAAMtB,EAAWsE,EAAErf,KACbke,EAAWmB,EAAEvrB,KACnB,IACI0I,EADA8iB,EAAUD,EAAE1Z,QAGhB,OAAQuY,GACJ,IAAK,WACD1hB,EAAO,IAAI,KAAcue,EAAUuE,GAAS1B,SAAQ,GACpDphB,EAAKqhB,cAAgB,gBACrB,MACJ,IAAK,OACDrhB,EAAO,IAAI,IAAeue,EAAUuE,GAAS1B,SAAQ,GACrDphB,EAAKqhB,cAAgB,iBACrB,MACJ,IAAK,SACDrhB,EAAO,IAAI,KAAgBue,EAAUuE,EAASD,EAAExhB,IAAKwhB,EAAE5c,KAAKmb,SAAQ,GACpEphB,EAAKqhB,cAAgB,kBACrB,MACJ,IAAK,UACDrhB,EAAO,IAAI,KAAiBue,EAAUuE,EAASD,EAAExhB,IAAKwhB,EAAE5c,KAAKmb,SAAQ,GACrEphB,EAAKqhB,cAAgB,mBACrB,MACJ,IAAK,MACDrhB,EAAO,IAAI,IACPue,EACAuE,EAAQC,cACRF,EAAExhB,IAAM2hB,OAAOH,EAAExhB,KAAO4hB,IACxBJ,EAAE5c,IAAM+c,OAAOH,EAAE5c,KAAOgd,KAC1B7B,SAAQ,GACVphB,EAAKqhB,cAAgB,eACrB,MACJ,IAAK,SAAU,CACX,MAAM6B,EAAKL,EAAE1pB,OAAO8H,KAAKkiB,GAAYA,EAAQzmB,aAC7CsD,EAAO,IAAI,KAAgBue,EAAUuE,EAASI,GAAI9B,SAAQ,GAC1DphB,EAAKqhB,cAAgB,iBACzB,CAAE,MACF,IAAK,OACDrhB,EAAO,IAAI,IAAkBue,EAAUuE,GAAS1B,SAAQ,GACxDphB,EAAKqhB,cAAgB,oBACrB,MACJ,IAAK,cACe9oB,IAAZuqB,IACAA,EAAUD,EAAExhB,KAEhBrB,EAAO,IAAI,IAAgBue,EAAUuE,EAASD,EAAExhB,IAAKwhB,EAAE5c,IAAK4c,EAAElmB,MAAMykB,SAChE,GAEJphB,EAAKqhB,cAAgB,kBACrB,MACJ,IAAK,OACe,OAAZyB,IACAA,EAAU,IAEd9iB,EAAO,IAAI,IAAcue,EAAUuE,EAASD,EAAEhB,OAAOT,SAAQ,GAC7DphB,EAAKqhB,cAAgB,gBACrB,MACJ,QAEI+B,QAAQtY,MAAM4W,EAAU,kCAehC,YAbanpB,IAATyH,IACAA,EAAK6f,OAASA,EACd7f,EAAK1I,KAAOoqB,OAE2BnpB,IAAnCsqB,EAAEvE,+BACFte,EAAKse,6BAA+BuE,EAAEvE,mCAGlB/lB,IAApBsqB,EAAExE,gBACFre,EAAKqe,cAAgBwE,EAAExE,gBAIxBre,CAAI,EAGTqjB,EAAiB,CAAC,EAgBxB,OAdA5rB,OAAO6L,QAAQkP,GAAY5Y,SAAQ,EAAE0pB,EAAOT,WACxBtqB,IAAZsqB,EAAE1F,OACFkG,EAAeC,GAAS,KACpB,MAAMC,EAAkBX,EAAQC,GAEhC,OADAU,EAAgBpG,MAAQ1lB,OAAO+S,KAAKqY,EAAE1F,OAC/BoG,CACV,EACD9rB,OAAO6L,QAAQuf,EAAE1F,OAAOvjB,SAAQ,EAAEyjB,EAAYmG,MAC1CH,EAAehG,GAAc,IAAMuF,EAAQY,EAAO,KAGtDH,EAAeC,GAAS,IAAMV,EAAQC,EAC1C,IAEGQ,CACX,CAgpB8BI,CAAiBzG,GAErCsC,EAAY,IACXlmB,KACAupB,GAGP,OAAO,cAAc9E,EACjB,WAAAxmB,GACIiB,MACIkL,EACA+O,EACA+M,EACAC,EACA5M,EACAC,EACAkL,EACAC,EACAC,EACApf,EAER,EAER,CAkBO,SAAS8kB,EAAyB9qB,EAAOQ,EAAS,GAAIC,EAAU,IAEnE,MAAMsqB,EAAqB,CAAC,SAAU,SAAU,WAE1CC,EAAc,IACbhrB,EAAMqI,KAAKtI,GAASlB,OAAO6L,QAAQ,IAAK3K,EAAKS,UAAWT,EAAKU,YAAY+iB,QAC9E7iB,QAAO,EAAEyF,KAAS2kB,EAAmBvD,MAAMC,GAAWrhB,EAAI+J,WAAWsX,OAClE9mB,QACG,EAAE,CAAEyG,KAAUA,EAAKqO,eAIrBwV,EAAmBpsB,OAAOqsB,OAAO,MACjCC,EAAqB,GAC3BH,EAAYhqB,SACR,EAAE,CAAEoG,MACA6jB,EAAiB7jB,EAAKqO,eAAiBwV,EAAiB7jB,EAAKqO,eAAiB,GAAK,EACvC,IAAxCwV,EAAiB7jB,EAAKqO,cACtB0V,EAAmBtnB,KAAKuD,GAExB+jB,EAAmBtnB,KAAK,cAAcuD,EAAKqO,6BAA6BwV,EAAiB7jB,EAAKqO,uBAClG,IAGR,MAAM2V,EAAgBD,EAAmBxqB,QAAQT,GAAmB,iBAANA,IAC9D,GAAIkrB,EAAcpmB,OACd,OAAOomB,EAIX,MAAM/D,EAAgB,GACtB8D,EAAmBnqB,SAASoG,IACxB,MAAMJ,EAAUhH,EAAM,GAAGX,MAAMc,GAI3B,EAAAuG,GAAGa,aAAaH,EAAKjH,KACrB,EAAAuG,GAAGc,uBAAuBJ,EAAKjH,IAAI8G,kBAAoBG,GACvD,EAAAV,GAAGc,uBAAuBJ,EAAKjH,IAAI8G,gBAAgB9G,KAAOiH,EAAKjH,IAC/D,EAAAuG,GAAGc,uBAAuBJ,EAAKjH,IAAIyH,yBAA2BZ,GAE9D,EAAAN,GAAGe,0BAA0BL,EAAKjH,IAGjC,EAAAuG,GAAGa,aAAaH,EAAKjH,KACtB,EAAAuG,GAAGiB,kBAAkBP,EAAMJ,GAG/B,MAAMof,EAA+B,WAAnBhf,EAAK6E,UAAyBxL,EAAUD,EACpD+D,EAAM6hB,EAAUI,WAAWjb,GAAMA,EAAEpL,KAAOiH,EAAKjH,MACxC,IAAToE,EAGA8iB,EAAcxjB,KAAK,CACf+G,KAAMxD,EAAKqO,aACXtV,GAAIiH,EAAKjH,GACTsV,kBAAc9V,EACdgN,KAAMvF,EAAKuF,KACXV,UAAW7E,EAAK6E,UAChBQ,kBAAc9M,KAGlBymB,EAAU7hB,GAAKqG,KAAOxD,EAAKqO,aAC3B4R,EAAcxjB,KAAKuiB,EAAU7hB,IACjC,IAGJ,MAAM8mB,GAAiC,QAAmBhE,EAAe,CAAC,GAC1E,OAAI/c,MAAMC,QAAQ8gB,IAAmCA,EAA+BrmB,OACzEqmB,EAGJ,CACH7qB,OAAQ3B,OAAO0B,OAAO8qB,EAA+B7qB,QACrDC,QAAS5B,OAAO0B,OAAO8qB,EAA+B5qB,SAE9D,CAWO,SAAS6qB,EAAatrB,EAAOU,EAAakK,EAAM2H,GACnD,MAAMmW,EAAc1oB,EAAMqI,KAAKtI,GAAS4kB,EAAe5kB,KACjDqrB,EAAgB1C,EAAY/nB,QAAQT,GAAmB,iBAANA,IACvD,GAAIkrB,EAAcpmB,OACd,OAAOomB,EAGX,MAAM9a,EAAQ,CACV1F,OACA5K,MAAO0oB,EACPhoB,cACAF,OAAQ,GACRC,QAAS,IAGb,OAAO,IAAI,KAAc6P,EAAOiC,EACpC,C,qZC78BA,MASagZ,GARLC,OAAO1a,SAAS2a,SAET,M,wHCef,MAAMC,EAAgBrZ,EAAA,GAAcyL,2BAQpC,SAAS6N,EAASC,GACd,MAAM,UAAEzf,IAAc,UAChB9M,EAAQ,IAAI8M,EAAUhN,MAAMoT,OAAOnC,QAAQnQ,MAAM4C,GAAMA,EAAE1C,KAAOyrB,IACtE,QAAcjsB,IAAVN,EACA,MAAM,IAAIC,MAAM,kBAAkBssB,sBAEtC,OAAOvsB,CACX,CASA,SAASwsB,EAAQD,EAAUE,GACvB,MACM/rB,EADQ4rB,EAASC,GACJ5rB,MAAMC,MAAMC,GAAMA,EAAEC,KAAO2rB,IAC9C,QAAansB,IAATI,EACA,MAAM,IAAIT,MAAM,iBAAiBwsB,sBAErC,OAAO/rB,CACX,CAWA,SAASgsB,EAAYhsB,EAAMI,EAAIyK,GAC3B,IAAI0Z,EACJ,QAAW3kB,IAAPQ,GAGA,GAFAmkB,EAAOzlB,OAAO0B,OAAOR,EAAKS,QAAQP,MAAMgqB,GAAMA,EAAE9pB,KAAOA,SAE1CR,IAAT2kB,QAAoC3kB,IAAd2kB,EAAK3X,KAC3B,MAAM,IAAIrN,MAAM,qBAAqBa,2BAMzC,GAFAmkB,EAAOzlB,OAAO0B,OAAOR,EAAKS,QAAQP,MAAMgqB,GAAMA,EAAErf,OAASA,SAE5CjL,IAAT2kB,QAAoC3kB,IAAd2kB,EAAK3X,KAC3B,MAAM,IAAIrN,MAAM,uBAAuBsL,sBAG/C,OAAO0Z,CACX,CAqBO,SAAS0H,IACZ,MAAO,CACHzT,SAAUmT,EAAcvO,eAEhC,CAKO,SAAS8O,EAAkBvM,GAC9B,MAAM3f,EAAO8rB,EAAQnM,EAAOkM,SAAUlM,EAAOoM,SAG7C,IAAK,MAAMI,KAAYxM,EAAO9F,WAC1BmS,EAAYhsB,EAAMmsB,EAAS/rB,GAAI+rB,EAASthB,MAI5C,IAAK,MAAMshB,KAAYxM,EAAO9F,WACbmS,EAAYhsB,EAAMmsB,EAAS/rB,GAAI+rB,EAASthB,MAChDzL,MAAQ+sB,EAASC,SAE9B,CAKO,SAASC,EAAgB1M,GAC5B,MAAM3f,EAAO8rB,EAAQnM,EAAOkM,SAAUlM,EAAOoM,SAC7C/rB,EAAKuI,SAASiD,EAAImU,EAAOpX,SAASiD,EAClCxL,EAAKuI,SAAS+C,EAAIqU,EAAOpX,SAAS+C,CACtC,CAIO,SAASghB,EAAa3M,GACzB,OAAO,QAAU3gB,UAAM,OAAQ,GAAQ,YACnC,MAAM,UAAEoN,IAAc,UAChB9M,EAAQssB,EAASjM,EAAOkM,UAC9BlM,EAAO1f,MAAMssB,MAAMtrB,SAASd,IACxB,MAAMqsB,EAAOpgB,EAAUhN,MAAMoT,OAAOuC,UAAUtR,IAAItD,EAAE0K,MACpD,IAAK2hB,EACD,MAAM,IAAIjtB,MAAM,gCAAgCY,EAAE0K,QAEjD,CACD,MAAM7K,EAAO,IAAIwsB,EAAK7tB,KACtBqB,EAAKI,GAAKD,EAAEC,GACZd,EAAMQ,QAAQE,GACd,MAAMyW,EAASzW,EAAKD,KAAKI,GACzB,GAAIoK,MAAMC,QAAQiM,IAAWA,EAAOxR,OAChC,MAAM,IAAI1F,MAAMkX,EAAOrF,KAAK,MACpC,KAEJuO,EAAO1f,MAAMwsB,QAAQxrB,SAASd,IAC1B,IAAI8D,EACJ,MAAMjE,EAAO8rB,EAAQnM,EAAOkM,SAAU1rB,GACQ,QAAzC8D,EAAK0b,EAAO+M,+BAA4C,IAAPzoB,GAAgBA,EAClE3E,EAAMgB,WAAWN,GAGjBV,EAAMqtB,eAAe3sB,EACzB,GAER,GACJ,CAIO,SAAS4sB,EAAmBjN,GAC/B,OAAO,QAAU3gB,UAAM,OAAQ,GAAQ,YACnC,MAAMM,EAAQssB,EAASjM,EAAOkM,UAC9BlM,EAAOhf,YAAY4rB,MAAMtrB,SAASJ,IAC9B,MAAMoV,EAAW3W,EAAMutB,kBAAkBhsB,EAAEE,MAC3C,IAAKkV,EACD,MAAM,IAAI1W,MAAM,qBAAqBsB,EAAEE,uBAC3C,MAAMmV,EAAS5W,EAAMutB,kBAAkBhsB,EAAEG,IACzC,IAAKkV,EACD,MAAM,IAAI3W,MAAM,qBAAqBsB,EAAEG,qBAE3C,IADmB1B,EAAM6B,cAAc8U,EAAUC,GAE7C,MAAM,IAAI3W,MAAM,mBAAmBsB,EAAEE,WAAWF,EAAEG,uBAAuB,IAEjF2e,EAAOhf,YAAY8rB,QAAQxrB,SAASJ,IAChCvB,EAAMsC,iBA9FlB,SAAuBiqB,EAAU9qB,EAAMC,GACnC,MACM+J,EADQ6gB,EAASC,GACElrB,YAAYT,MAAMW,GAAMA,EAAEE,KAAKX,KAAOW,GAAQF,EAAEG,GAAGZ,KAAOY,IACnF,QAAmBpB,IAAfmL,EACA,MAAM,IAAIxL,MAAM,mBAAmBwB,QAAWC,qBAElD,OAAO+J,CACX,CAuFmC+hB,CAAcnN,EAAOkM,SAAUhrB,EAAEE,KAAMF,EAAEG,IAAI,GAE5E,GACJ,CAIO,SAAS+rB,EAAapN,GACzBgM,EAAcvQ,aAAauE,EAAOnH,SACtC,CAKO,SAASwU,EAAerN,GAC3B,OAAO,QAAU3gB,UAAM,OAAQ,GAAQ,YACnC,MAAMgB,EAAO8rB,EAAQnM,EAAOkM,SAAUlM,EAAOoM,SACvClS,EAAa,GACnB,QAA0Bja,IAAtB+f,EAAO9F,WAA0B,CAEjC,IAAK,MAAMsS,KAAYrtB,OAAO0B,OAAOR,EAAKS,aAChBb,IAAlBusB,EAASvf,MACTiN,EAAW/V,KAAK,CACZ1D,GAAI+rB,EAAS/rB,GACbyK,KAAMshB,EAASthB,KACfzL,MAAO+sB,EAAS/sB,QAI5B,OAAOya,CACX,CAEA,IAAK,MAAMsS,KAAYxM,EAAO9F,WAAY,CACtC,MAAM0K,EAAOyH,EAAYhsB,EAAMmsB,EAAS/rB,GAAI+rB,EAASthB,MACrDgP,EAAW/V,KAAK,CACZ1D,GAAImkB,EAAKnkB,GACTyK,KAAM0Z,EAAK1Z,KACXzL,MAAOmlB,EAAKnlB,OAEpB,CACA,OAAOya,CACX,GACJ,CAKO,SAASoT,EAAStN,GACrB,OAAO,QAAU3gB,UAAM,OAAQ,GAAQ,YAEnC,MAAO,CACHgB,KAFS8rB,EAAQnM,EAAOkM,SAAUlM,EAAOoM,SAE9B1rB,OAEnB,GACJ,CAKO,SAAS6sB,EAAgBvN,GAC5B,MAAMwN,EAAgB,IAAQ1pB,IAAIkc,EAAOyN,QACzC,IAAKD,EAActnB,WACf,MAAM,IAAItG,MAAM,sBAEpB,IAAK4tB,EAAcznB,YACf,MAAM,IAAInG,MAAM,2CAA2CogB,EAAOyN,UACtE,IAAyB,IAArBzN,EAAO0N,SAAX,CAIA,GAAI1N,EAAO0N,SAAW,KAAO1N,EAAO0N,SAAW,EAC3C,MAAM,IAAI9tB,MAAM,mDAAmDogB,EAAO0N,YAC9EF,EAAcznB,YAAYM,MAAMC,MAAQ,GAAG0Z,EAAO0N,YAClDF,EAAcznB,YAAYK,UAAUvG,OAAO,UAJ3C,MAFI2tB,EAAcznB,YAAYK,UAAU1G,IAAI,UAOhD,CAIO,SAASiuB,EAAgB3N,GAC5BgM,EAAcxU,eAAewI,EAAOjV,UAAU,EAClD,CAIO,SAAS6iB,IACZ5B,EAAclZ,YAAYD,OAAOgb,YACrC,CAIO,SAASC,EAAa9N,GAEzB,IAAe,IADA,KAAc+N,uBAAuB/N,EAAO9U,KAAM8U,EAAOzL,UAEpE,MAAM,IAAI3U,MAAM,8BAA8BogB,EAAO9U,uBAE7D,CAIO,SAAS8iB,EAAehO,GACrBA,EAAO9U,QAAQ,KAAc+iB,MAC/B,KAAcF,uBAAuB/N,EAAO9U,MAEhD,KAAcxL,IAAIsgB,EAAOvN,QAASuN,EAAO9U,KAC7C,CACO,SAASgjB,EAAkBlO,GAC9B,IAAoBmO,YAAYnO,EAAOhhB,KAAMghB,EAAOxF,MAAOwF,EAAOoO,QACtE,CACO,SAASC,EAAqBrO,GACEsO,KACRC,oBAAoBvO,EAAOhN,cAC1D,CC3RA,MAAMwb,EAAoB,cACpBC,EAAsB,eACe,EAAAC,uBAiB3C,MAAM/P,EAAM,IAAI,IAAJ,CAAY,CACpBI,QAAS,CAAC,GACVH,iBAAiB,EACjB+P,QAAQ,IAENC,EAAoB5b,EAAA,GACpB6b,EAAmB7b,EAAA8b,EACnBC,EAAoB/b,EAAA,GAE1B,IAAIgc,EACJ,IACI,CAACJ,EAAmBC,EAAkBE,GAAmBztB,SAAS2tB,IAC9D9vB,OAAO6L,QAAQikB,GAAW3tB,SAAQ,EAAE4tB,EAAgBC,MAChD,IAAI7qB,EACJ0qB,EAAoBE,EACpBvQ,EAAIO,QAAQiQ,EAAWnP,QACvBrB,EAAIO,QAAsC,QAA7B5a,EAAK6qB,EAAWC,eAA4B,IAAP9qB,EAAgBA,EAAK,CAAC,EAAE,GAC5E,GAEV,CACA,MAAO+a,GACH,MAAM,IAAIzf,MAAM,oCAAoCovB,oBAAoC3P,IAC5F,CAIA,MAAMgQ,EAAgC,CAACC,EAAMC,EAASC,KAAiB,aAAU,OAAQ,OAAQ,GAAQ,YACrG,IAAIlrB,EAEJ,KAAMirB,EAAQ9B,UAAUmB,GAAoB,CACxC,QAAmB3uB,IAAfsvB,EAAQ9uB,GACR,OAAO,IAAAgvB,4BAA2BF,EAAQ9uB,GAAI,EAAG,mCACrD,MAAM,IAAIb,MAAM,kCACpB,CACA,MAAM6e,EAASmQ,EAAkBW,EAAQ9B,QAEzC,IADc9O,EAAIM,SAASR,EAAOuB,OAAkC,QAAzB1b,EAAKirB,EAAQvP,cAA2B,IAAP1b,EAAgBA,EAAK,CAAC,GACtF,CACR,QAAmBrE,IAAfsvB,EAAQ9uB,GACR,OAAO,IAAAgvB,4BAA2BF,EAAQ9uB,GAAI,EAAG,wCACrD,MAAM,IAAIb,MAAM,uCACpB,CACA,MAAM8vB,QAAiBJ,EAAKC,EAASC,GACrC,QAAmBvvB,IAAfsvB,EAAQ9uB,GACR,OAAO,KAEX,QAA8ER,KAAzEyvB,aAA2C,EAASA,EAASjQ,SAA4C,OAAnBhB,EAAO2Q,UACxEzQ,EAAIM,SAASR,EAAO2Q,QAASM,EAASjQ,QACxC,CAChB,QAAmBxf,IAAfsvB,EAAQ9uB,GACR,OAAO,IAAAgvB,4BAA2BF,EAAQ9uB,GAAI,EAAG,yCAErD,MAAM,IAAIb,MAAM,wCACpB,CAEJ,OAAO8vB,CACX,IACA,IAAIC,EAAY,EAEhB,MAAMC,EAAW,IAAMD,IACjBE,EAAgB,CAClB,8BAA+B,mBAC/B,+BAAgC,kDAE9BC,EAAgB,IAAIhtB,IACpBitB,EAAqB,OAC3B,IAAIC,EACAC,EAwGJ,MAOA,EAPY,CACR,WAAIC,GAGA,OAFKD,GAtGb,WAESpE,IAELmE,GAAS,IAAA/kB,IAAG4gB,EAAe,CACvBsE,aAAcN,IAGlBI,EAAgB,IAAI,EAAAvB,uBAAuB,IAAI,EAAA0B,cAAiB,IAAI,EAAAC,eAAed,IAAY,QAAUlwB,UAAM,OAAQ,GAAQ,YAC3H,IAAIiF,EAAIqQ,EACR,MAAM8Y,EAAUe,EAAkB8B,KAAKf,EAAQ9B,QAC3CgB,EAAsBc,EAAQ9B,OAElC,KAAMA,KAAUsB,MAAwBtB,KAAUoB,GAC9C,MAAM,IAAIjvB,MAAM,8BAEpB,GAAIowB,EAAOO,aACP,OAAOrY,QAAQsY,OAAO,IAAI5wB,MAAM,gFAEpC,MAAMqvB,EAAaxB,KAAUsB,EACzBA,EAAoBF,EAClBpQ,EAASwQ,EAAUxB,GAEzB,IADc9O,EAAIM,SAASR,EAAOuB,OAAkC,QAAzB1b,EAAKirB,EAAQvP,cAA2B,IAAP1b,EAAgBA,EAAK,CAAC,GAE9F,OAAO4T,QAAQsY,OAAO,IAAI5wB,MAAM,yCAChC2vB,EAAQ9uB,IACRqvB,EAAc/rB,IAAIwrB,EAAQ9uB,GAAIge,GAGlC,MAAMgS,EAAYxB,IAAcJ,EAAoB,cAAgB,eAC9Dna,EAAY7C,KAAK6C,UAAU6a,GACjC,IAEI,GAAI7a,EAAUpP,OAASyqB,EAAoB,CACvC,MAAMW,EAAkC,QAArB/b,EAAK4a,EAAQ9uB,UAAuB,IAAPkU,EAAgBA,EAAKgc,OAAOC,aAC5E,IAAK,IAAItc,EAAI,EAAGA,EAAII,EAAUpP,OAAQgP,GAAKyb,EACvCC,EAAOtrB,KAAK+rB,EAAU,CAClBhwB,GAAIiwB,EACJG,MAAOnc,EAAU1C,UAAUsC,EAAGxP,KAAKiE,IAAIuL,EAAIyb,EAAoBrb,EAAUpP,SACzEwrB,IAAKxc,EAAIyb,GAAsBrb,EAAUpP,QAIrD,MAEI0qB,EAAOtrB,KAAK+rB,EAAUlB,EAE9B,CACA,MAAOlQ,GACH,OAAOnH,QAAQsY,OAAOnR,EAC1B,CACA,OAAOnH,QAAQ6Y,SACnB,KAAInB,IAEJK,EAAce,OAAOC,gBAAgB5B,GAErClwB,OAAO6L,QAAQ,GAAkB1J,SAAQ,EAAE4J,EAAMgmB,MACvB,mBAAX,GAAyBhmB,KAAQ0jB,EACxCqB,EAAckB,UAAUjmB,EAAMgmB,GACP,mBAAX,GACZ,IAAoBE,UAAU,UAAW,YAAYlmB,qCACzD,IAGJ8kB,EAAOqB,GAAG,WAAW,IAAM,IAAoBlD,YAAY,OAAQ,mDAAoD,QACvH6B,EAAOqB,GAAG,cAAc,KACpB,IAAoBlD,YAAY,UAAW,iDAAkD,MAC7F8B,EAAcqB,yBAAyB,yBAAyB,IAEpEtB,EAAOqB,GAAG,OAAQ7S,IAAS,QAAUnf,UAAM,OAAQ,GAAQ,YACvD,MAAMqwB,QAAiBO,EAAce,OAAOO,QAAQ/S,GACpD,GAAIkR,EACA,IACI,MAAM8B,QAAYxB,EAAOyB,YAAY,eAAgB/B,QACzCzvB,IAARuxB,GAAsBA,GACtB,IAAoBrD,YAAY,QAAS,wCAAyC,KAE1F,CACA,MAAO3b,GACH,IAAoB2b,YAAY,QAAS,eAAe3P,EAAKiP,gCAAiCjb,EAClG,CAER,MACAwd,EAAOqB,GAAG,gBAAiB3B,IACvB,IAAIprB,EAEAorB,EAASjQ,QAAUiQ,EAASjvB,KAAiD,QAAzC6D,EAAKwrB,EAAchsB,IAAI4rB,EAASjvB,WAAwB,IAAP6D,OAAgB,EAASA,EAAG8qB,WAC3FzQ,EAAIM,SAE1B6Q,EAAchsB,IAAI4rB,EAASjvB,IAAI2uB,QAASM,EAASjQ,QAE7CwQ,EAAcyB,OAAOH,SAAQ,IAAA9B,4BAA2BC,EAASjvB,GAAI,EAAG,0CAIhFwvB,EAAcyB,OAAOH,QAAQ7B,EAAS,IAE1CO,EAAczB,kBAAoBA,EAClCyB,EAAcxB,oBAAsBA,EACxC,CAIYkD,GACG1B,CACX,GAEsB,QClMpB2B,EAAyB,CAAC,EAKhC,SAASC,GAA0BnC,GHA3B,IGEAA,EAAS1wB,KACT,IAAoBmvB,YAAY,OAAQuB,EAASoC,SHF9C,IGGIpC,EAAS1wB,KAChB,IAAoBmvB,YAAY,QAAS,mBAAmBuB,EAASoC,UAAWpC,EAASoC,SHFpF,IGGEpC,EAAS1wB,MAChB,IAAoBmvB,YAAY,UAAW,YAAYuB,EAASoC,UAAWpC,EAASoC,QAE5F,CAMA,SAASC,IAA0B,OAAEjb,EAAM,SAAEC,GAAYib,EAAYC,GAIjE,OAHIrnB,MAAMC,QAAQkM,IAAaA,EAASzR,QACpC,IAAoB6oB,YAAY,UAAW8D,EAAclb,MAEzDnM,MAAMC,QAAQiM,KAAWA,EAAOxR,SAChC,IAAoB6oB,YAAY,QAAS6D,EAAYlb,GAC9C,GAGf,CAIA,MAAMob,GACFC,8BAA+B,EAE/BC,iBAAqC,OAAlBvG,EAEnBG,cAAgBrZ,EAAA,GAAcyL,2BAE9BiU,iBAAmB,KAEnBC,sBAX+B,KAa/BC,gBAAkB,CAAC,EAMnB,4BAAMC,GACF,IACI,MAAM9C,QAAiB,EAAQH,QAAQ,eAGlCG,EAASrX,OAAOoa,WAAapzB,KAAK8yB,8BACnC,IAAoBhE,YAAY,UAAW,yCAI3C9uB,KAAK8yB,+BAAiCzC,EAASrX,OAAOoa,YAClCzsB,SAASC,cAAc,iBAC/BI,MAAMC,MAAQ,KAC1B,IAAQhF,SAAQ,CAACoxB,EAAI/M,KAAQ,IAAQ7hB,IAAI6hB,GAAGzf,YAAa,CAAK,KAGlE7G,KAAK8yB,6BAA+BzC,EAASrX,OAAOoa,SACxD,CAAE,MAAOjgB,GACLnT,KAAK8yB,8BAA+B,CACxC,CACJ,CAUA,aAAMQ,GACF,IAGI,aAFM,EAAQpD,QAAQ,wBACtBlwB,KAAK8yB,8BAA+B,EAC7B,IACX,CAAE,MAAO3f,GAIL,OAHAnT,KAAK8yB,8BAA+B,EAG7B,EH5EU,KG0EC3f,EAAMogB,OH5Ed,GG6E2E,UAAY,OAC5EpgB,EAAMC,QAC/B,CACJ,CAOA,0BAAMogB,GACF,IAAIpgB,EAAU,gBACd,IACI,MAAM+L,QAAa,EAAQ+Q,QAAQ,qBAEnC,GHlGJ,IGkGQ/Q,EAAKxf,KAA2B,CAChC,MAAMgU,EAAgBwL,EAAKsT,cAErBzyB,KAAKkvB,oBAAoBvb,GAE/B,IAAoBmb,YAAY,OAAQ,oCAC5C,MHrGC,IGqGU3P,EAAKxf,MACZyT,EAAU+L,EAAKsT,QACf,IAAoB3D,YAAY,UAAW1b,IHzGhD,IG0GY+L,EAAKxf,OACZyT,EAAU+L,EAAKsT,QACf,IAAoB3D,YAAY,QAAS1b,GAEjD,CAAE,MAAOD,GACLC,EAAUD,EAAMC,QAChB,IAAoB0b,YAAY,QAAS1b,EAC7C,CACJ,CAEA,yBAAM8b,CAAoBvb,GACtB,GAAI+e,GACApf,EAAA,GAAc0N,sBAAsBrN,GACpC,yCACA,4BACD,OACH,MAAMrT,EAAQN,KAAK2sB,cAAcvO,eACjC,GAAIsU,SACM1yB,KAAK2sB,cAActV,0BAA0B1D,GACnD,sCACA,qCACD,OACH,MAAM8D,QAAezX,KAAK2sB,cAAcvQ,aAAa9b,GAAO,GACxDmX,EAAOA,OAAOxR,QACd,IAAoB6oB,YAChB,QACA,mDACArX,EAAOA,OAGnB,CAMA,4BAAMgc,GACF,IACI,MAAMP,QAAwB,EAAQhD,QAAQ,wBAC9ClwB,KAAKkzB,gBAAkB,IAAKX,KAA2BW,EAC3D,CAAE,MAAO/f,GACLnT,KAAKkzB,gBAAkB,IAAKX,GAC5B,IAAoBzD,YAAY,UAAW,+DAAgE3b,EAAMC,QACrH,CACJ,CAKA,2BAAMsgB,GACF,MAAMla,EAAWxZ,KAAK2sB,cAAcvO,eACpC,IAAK5E,EAAU,OAAO,EAEtB,IAAI2F,EACJ,IACIA,QAAa,EAAQ+Q,QAAQ,kBAAmB,CAAE1W,YACtD,CAAE,MAAOrG,GAIL,OAFAgM,EAAOhM,EAAMC,QACb,IAAoB0b,YAAY,QAAS3P,IAClC,CACX,CAGA,OH3KA,IG2KIA,EAAKxf,KACEwf,GH3KR,IG8KCA,EAAKxf,KACL,IAAoBmvB,YAAY,QAAS,mBAAmB3P,EAAKsT,UAAWtT,EAAKsT,SH7KhF,IG8KMtT,EAAKxf,MACZ,IAAoBmvB,YAAY,UAAW,YAAY3P,EAAKsT,UAAWtT,EAAKsT,UAEzE,EACX,CASA,2BAAMkB,CAAsBltB,GACxB,MAAM+S,EAAWxZ,KAAK2sB,cAAcvO,eAC9BwV,EAAmB,IAAQnvB,IAAIgC,GACrC,IAAK+S,EAAU,OACf,MAAMqa,EAA0B,EAAQ1E,kBAAkB8B,KAAKxqB,GAC3D,EAAQ2oB,oBAAsB3oB,EAElC,GAA+B,iBAA3BotB,EAA2C,CAC3C,GAAID,EAAiB/sB,WAEjB,YADA,IAAoBkrB,UAAU,QAAS,8DAG3C,IAAoBA,UAAU,OAAQ,mBAC1C,CAGA,IAAI5S,EAFJyU,EAAiB/sB,YAAa,EAG9B,IAEQsY,EADA0U,EAAuBziB,WAAW,mBACrB,EAAQ8e,QAAQzpB,EAAe,CAAE+S,mBAEjC,EAAQ0W,QAAQ2D,EAErC,CAAE,MAAO1gB,GAKL,OAHAgM,EAAOhM,EAAMC,QACb,IAAoB0b,YAAY,QAAS,0BAA2B3P,QACpEyU,EAAiB/sB,YAAa,EAElC,CAEA2rB,GAA0BrT,GAC1ByU,EAAiB/sB,YAAa,CAClC,CASA,yBAAMitB,CAAoBrtB,GACtB,GAAK,IAAQhC,IAAIgC,GAAeI,WAKhC,IAEI2rB,SADuB,EAAQtC,QAAQ,gBAAiB,CAAE9B,OAAQ3nB,IAEtE,CAAE,MAAO0M,GACL,IAAoB2b,YAAY,QAAS3b,EAAMC,QACnD,MATI,IAAoB2e,UAAU,QAAS,2CAU/C,CAWA,oBAAMgC,GACF,MAAMC,EAAOrtB,SAASwF,eAAe,2BAA2B8nB,MAAM,GACtE,IAAKD,EAAM,OAEX,MAAME,EAAS,IAAIC,WACbC,GAAW,IAAAC,SAAQL,EAAKr0B,MACxB20B,EAAgB,IAAIzb,SAAS6Y,IAC/BwC,EAAOK,UAAY,KACf7C,EACI,EAAawC,EAAO9T,OAAS8T,EAAO9T,OAAOtN,QAAQ,kBAAmB,IACzE,CACJ,IAGDshB,EACAF,EAAOM,WAAWR,EAAMI,GAExBF,EAAOO,cAAcT,GAEzB,MAAMxa,QAAiB8a,EACvB,GAAK9a,EAKL,IACI,MAAM2F,QAAa,EAAQ+Q,QAAQ,kBAAmB,CAAEwE,8BAA+Blb,EAAUmb,KAAMX,EAAKr0B,KAAMi1B,QAASR,IAC3H,GH1RJ,IG0RQjV,EAAKxf,KAA2B,CAChC,MAAM,OAAE8X,EAAM,SAAEC,SAAmB1X,KAAK2sB,cAAcvQ,aAAa+C,EAAKsT,SACpElnB,MAAMC,QAAQiM,IAAWA,EAAOxR,OAChC,IAAoB6oB,YAAY,QAAS,sBAAuBrX,GACzDlM,MAAMC,QAAQkM,IAAaA,EAASzR,OAC3C,IAAoB6oB,YAAY,UAAW,iCAAkCpX,GAE7E,IAAoBqa,UAAU,OAAQ,oBAE9C,MAAO,GHlSR,IGkSY5S,EAAKxf,KAA8B,CAC1C,MAAMyT,EAAU+L,EAAKsT,QACrB,IAAoB3D,YAAY,QAAS,mBAAmB3P,EAAKsT,UAAWrf,EAChF,MHnSC,IGmSU+L,EAAKxf,MACZ,IAAoBmvB,YAAY,UAAW,YAAY3P,EAAKsT,UAAW,oBAE/E,CAAE,MAAOtf,GACL,MAAMgM,EAAOhM,EAAMC,QACnB,IAAoB0b,YAAY,QAAS3P,EAC7C,MAxBI,IAAoB4S,UAAU,QAAS,wBAyB/C,CASA,uBAAM8C,CAAkBzG,EAAQ0G,GAC5B,GACI90B,KAAK+yB,kBAAoB/yB,KAAK8yB,8BAC9B9yB,KAAK2sB,cAAcjO,kBAEnB,UACU,EAAQwR,QAAQ9B,EAAQ0G,EAClC,CAAE,MAAO3hB,GACL,IAAoB2b,YAChB,UAAW,mCAAoC3b,EAAMC,QAE7D,CAER,CAQA,yBAAM2hB,CAAoBC,EAAc5hB,GACpC,GACIpT,KAAK+yB,kBAAoB/yB,KAAK8yB,6BAIlC,UACU,EAAQ5C,QAAQ,gBAAiB,CAAErkB,KAAMmpB,EAAc5hB,WACjE,CAAE,MAAOD,GACL,IAAoB2b,YAAY,UAAW,oCAAqC3b,EAAMC,QAC1F,CACJ,CAOA,2BAAM6hB,GACF,KAAOj1B,KAAKk1B,gBAEFl1B,KAAKmzB,yBACNnzB,KAAK8yB,+BACN,IAAQ7wB,SAAQ,CAACoxB,EAAI/M,KAAQ,IAAQ7hB,IAAI6hB,GAAGzf,YAAa,CAAK,UAExD7G,KAAKm1B,sBAAqB,UAG9B,IAAItc,SAASuc,GAAMC,WAAWD,EAAGp1B,KAAKizB,wBAEpD,CAKA,mBAAAqC,GACkC,OAA1Bt1B,KAAKgzB,mBACLhzB,KAAKk1B,UAAW,EAChBl1B,KAAKgzB,iBAAmBhzB,KAAKi1B,wBAErC,CAcA,0BAAME,CAAqBI,GAAkB,GAKzC,GAJIA,SACMv1B,KAAKmzB,0BAGVnzB,KAAK8yB,6BAA8B,CACpC,GACI,IAAoBhE,YAChB,OACA,4DAMY,aAFM9uB,KAAKszB,gBAIjB,IAAIza,SAASuc,GAAMC,WAAWD,EAAGp1B,KAAKizB,yBAE5C,IAAoBnE,YAChB,OACA,sDAGF9uB,KAAK8yB,8BACf9yB,KAAKizB,sBAhYkB,IAiY3B,CAOA,GANIjzB,KAAK8yB,oCACCja,QAAQC,IAAI,CACd9Y,KAAKwzB,uBACLxzB,KAAKyzB,2BAGTzzB,KAAK8yB,6BACL,UACU,EAAQ5C,QAAQ,sBAC1B,CAAE,MAAO/c,GACDA,EAAMogB,OAAS,EAAAiC,iBAAiBC,iBH/ZZ,IGgapBtiB,EAAMogB,MACN,IAAoBzE,YAAY,UAAW3b,EAAMC,QAASD,EAAMgM,KAExE,CAER,EAGJ,IAAIuW,GAEW,SAASzG,KAEpB,OADKyG,KAA4BA,GAA6B,IAAI7C,IAC3D6C,EACX,C,kBC7be,SAASC,EAAYC,EAAOC,GACvC,MAAMC,EAAmBF,EACzB,IAAIG,GAAiBD,EAUrB,OAPqBE,IACbC,KAAKC,MAAQH,EAAgBD,GAC7BD,EAASG,GAEbD,EAAgBE,KAAKC,KAAK,CAIlC,C,kDCjBA,IAIIC,EAJA7pB,EAAI,EACJ6W,EAAI,EAKR,MAAMiT,EAAoBhc,IACtB,MAAM,QAAEic,GAAYjc,EAOhBic,EANiB,IAOjBF,EAAkBhT,GAJX7W,EAAI+pB,GAKf,EAGEC,EAAiB,KACnB,MAAMC,EAAkB5vB,SAASC,cAAc,qBAE/CD,SAAS6vB,oBAAoB,YAAaJ,GAC1CzvB,SAAS6vB,oBAAoB,UAAWF,GACxCC,EAAgBvvB,MAAM,kBAAoB,EAAE,EAGnCyvB,EAAoBC,GAAetc,IAC5C,MAAMmc,EAAkB5vB,SAASC,cAAc,qBAC/CuvB,EAAoBO,EAEpBpqB,EAAI8N,EAAEic,QAGN,MAAMM,EAASlK,OAAOzhB,iBAAiBurB,GACvCpT,EAAIyT,SAASD,EAAOlU,OAAQ,IAE5B9b,SAASkwB,iBAAiB,YAAaT,GACvCzvB,SAASkwB,iBAAiB,UAAWP,GACrCC,EAAgBvvB,MAAM,kBAAoB,MAAM,C,iFC1CpD,MAAM8vB,EAAmB,QAMZC,EAA2B,QAYxC,SAASC,EAAgBprB,EAAIsc,EAAQrc,OAAOjL,GACxC,MAAMyH,EAAO,CAAC,EAad,OAZAvI,OAAO8W,OAAOvO,EAAMuD,GAEpBvD,EAAKwD,KAAOA,GAAQD,EAAGC,UACLjL,IAAdyH,EAAK1I,OACL0I,EAAK1I,KAA0B,iBAAZiM,EAAGjM,MAAqBiM,EAAGjM,gBAAgBuL,OAAS,CAACU,EAAGjM,MAAQiM,EAAGjM,MAE1F0I,EAAKqhB,cAAgB,gBACrBrhB,EAAK6f,OAASA,EAGd7f,EAAK4uB,aAAe5uB,EAAKuF,KACzBvF,EAAK6uB,qBAAuB7uB,EAAKqF,aAC1BrF,CACX,CAWA,SAAS8uB,EAAsB51B,EAAY61B,GAAiB,GACxD,MAAM3f,EAAS,GACT4f,EAAa,CACfC,MAAO,CAAC,EACRC,MAAO,CAAC,EACR5Z,OAAQ,CAAC,GAGbpc,EAAWU,SAAS2J,IAGhB,GAAI9L,OAAOic,UAAUC,eAAeC,KAAKrQ,EAAI,WAAY,OAGzD,MAAM4rB,EAAShlB,KAAKC,MAAMD,KAAK6C,UAAUzJ,IAEnCsB,EAAYtB,EAAGsB,WAAa4pB,EAGlC,GAFAU,EAAOtqB,UAAYA,OAEFtM,IAAbgL,EAAG6rB,MAAqB,CACxB,MAAO1Q,EAAMC,GAASpb,EAAG6rB,MAEzB,IAAK,IAAIC,EAAI3Q,EAAM2Q,EAAI1Q,EAAO0Q,GAAK,EAAG,CAClC,MAAM7rB,EAAO,GAAGD,EAAGC,QAAQ6rB,UAES92B,IAAhCy2B,EAAWnqB,GAAWrB,IACtB4L,EAAO3S,KACH,oBAAoB+G,oBAAuBqB,sBAGnDsqB,EAAO9gB,aAAe9K,EAAG8K,aAAe,GAAG9K,EAAG8K,gBAAgBghB,UAAO92B,EAGrEy2B,EAAWnqB,GAAWrB,GAAQ2G,KAAKC,MAAMD,KAAK6C,UAAUmiB,GAC5D,CACJ,WAC2C52B,IAAnCy2B,EAAWnqB,GAAWtB,EAAGC,OACzB4L,EAAO3S,KACH,oBAAoB8G,EAAGC,uBAAuBqB,sBAItDmqB,EAAWnqB,GAAWtB,EAAGC,MAAQ2rB,EAGrC,GAAIJ,EAAgB,CAChB,MAAM9O,EAAgB,GAEtBkP,EAAOj2B,WAAWU,SAAS01B,IACvB,MAAMC,EAAaD,EAAWzqB,WAAa4pB,EAC3C,QAAyBl2B,IAArB+2B,EAAWF,MAAqB,CAChC,MAAO1Q,EAAMC,GAAS2Q,EAAWF,MAEjC,IAAK,IAAIC,EAAI3Q,EAAM2Q,EAAI1Q,EAAO0Q,GAAK,EAAG,CAClC,MAAM7rB,EAAO,GAAG+rB,KAAcD,EAAW9rB,QAAQ6rB,KACjDpP,EAAcxjB,KAAK+G,EACvB,CACJ,KAAO,CACH,MAAMA,EAAO,GAAG+rB,KAAcD,EAAW9rB,OACzCyc,EAAcxjB,KAAK+G,EACvB,KAEJ2rB,EAAOj2B,WAAa+mB,CACxB,KAIJ,MAAMuP,EAAqB/3B,OAAOge,YAC9Bhe,OAAO6L,QAAQ0rB,EAAWE,OAAO31B,QAAO,EAAEiK,EAAM0F,MAC5C,MAAMrE,EAAYqE,EAAMrE,WAAa4pB,EAC/BgB,EACFh4B,OAAO+S,KAAKwkB,EAAW1Z,QAAQ7b,SAAS+J,IACxC/L,OAAO+S,KAAKwkB,EAAWC,OAAOx1B,SAAS+J,GAO3C,OANIisB,GACArgB,EAAO3S,KACH,oBAAoB+G,oBAAuBqB,6EAI3C4qB,CAAS,KAqBzB,OAjBAT,EAAWE,MAAQM,EACnBR,EAAWC,MAAQ,IAAKD,EAAWC,SAAUD,EAAWE,cACjDF,EAAWE,MAElBF,EAAWC,MAAQx3B,OAAOge,YACtBhe,OAAO6L,QAAQ0rB,EAAWC,OAAOhuB,KAAI,EAAEuC,EAAM0F,KAAW,CACpD,GAAGA,EAAMrE,aAAarB,IACtB0F,MAGR8lB,EAAW1Z,OAAS7d,OAAOge,YACvBhe,OAAO6L,QAAQ0rB,EAAW1Z,QAAQrU,KAAI,EAAEuC,EAAM0F,KAAW,CACrD,GAAGA,EAAMrE,aAAarB,IACtB0F,MAIJkG,EAAOxR,OACAwR,EAGJ4f,CACX,CAUO,SAASU,EAA6BhS,EAAwBtkB,EAAQC,GACzE,MAAM+V,EAAS,GAETugB,EAAiB,IAAIlgB,IAkB3B,OAhBAiO,EAAuB9jB,SAAS4J,IAC5B,MAAMtK,EAAaE,EAAOoK,IAAOtK,YAAcG,EAAQmK,IAAOtK,WACxD02B,EAAiBpsB,EAAK1G,MAAM,EAAG0G,EAAKvG,QAAQ,MAC5C8kB,EAAYve,EAAK1G,MAAM0G,EAAKvG,QAAQ,KAAO,GAEjD/D,EAAWU,SAASi2B,IAChB,GAAIF,EAAe1wB,IAAI4wB,GAAW,CAC9B,MAAMC,EAAgBD,EAAS/yB,MAAM,EAAG+yB,EAAS5yB,QAAQ,MACnD8yB,EAAiBF,EAAS/yB,MAAM+yB,EAAS5yB,QAAQ,KAAO,GAE9DmS,EAAO3S,KAAK,CAACszB,EAAgBD,EAAe/N,EAAW6N,GAC3D,MACID,EAAe33B,IAAI63B,EACvB,GACF,IAECzgB,CACX,CAUO,SAAS4gB,EAAwBtS,EAAwBtkB,EAAQC,GACpE,MAAM+V,EAASsgB,EAA6BhS,EAAwBtkB,EAAQC,GACtE2qB,EAAgB,GAUtB,OARA5U,EAAOxV,SAAQ,EAAEm2B,EAAgBD,EAAe/N,EAAW6N,MACvD5L,EAAcvnB,KACV,sBAAsBszB,qBAAkCD,gDACvB/N,oBAA4B6N,oDAEhE,IAGE5L,CACX,CASO,SAASiM,EAAmB72B,EAAQC,GACvC,MAAM62B,EAAkB,CACpBxR,KAAM,CAAC,EACPC,MAAO,CAAC,GAGNvP,EAAS,GAGf3X,OAAO6L,QAAQ,IAAKlK,KAAWC,IAAWO,SAAQ,EAAE4J,EAAMxD,MACpC,UAAdA,EAAKuF,WAAmChN,IAAdyH,EAAKuF,MAAyC,WAAnBvF,EAAK6E,WAC1DqrB,EAAgBvR,MAAMnb,GAAQ,IAAKxD,GACnCkwB,EAAgBvR,MAAMnb,GAAM+B,KAAO,UACd,SAAdvF,EAAKuF,WAAkChN,IAAdyH,EAAKuF,MAAyC,WAAnBvF,EAAK6E,aAChEqrB,EAAgBxR,KAAKlb,GAAQ,IAAKxD,GAClCkwB,EAAgBxR,KAAKlb,GAAM+B,KAAO,OACtC,IAGJ,MAAM4qB,EAAa3sB,GAASA,EAAK1G,MAAM0G,EAAKvG,QAAQ,KAAO,GAGrDmzB,EAA6B,IAAI3gB,IACjC4gB,EAA8B,IAAI5gB,IA4BxC,GA1BAhY,OAAO6L,QAAQ4sB,EAAgBxR,MAAM9kB,SAAQ,EAAE4J,EAAMxD,WACvBzH,IAAtByH,EAAKqF,eACD+qB,EAA2BnxB,IAAIe,EAAKqF,eACpC+J,EAAO3S,KACH,oBAAoB0zB,EAAU3sB,qBAAwBxD,EAAK6E,8CACxB7E,EAAKqF,kFAIhD+qB,EAA2Bp4B,IAAIgI,EAAKqF,cACxC,IAGJ5N,OAAO6L,QAAQ4sB,EAAgBvR,OAAO/kB,SAAQ,EAAE4J,EAAMxD,WACxBzH,IAAtByH,EAAKqF,eACDgrB,EAA4BpxB,IAAIe,EAAKqF,eACrC+J,EAAO3S,KACH,oBAAoB0zB,EAAU3sB,qBAAwBxD,EAAK6E,8CACxB7E,EAAKqF,kFAIhDgrB,EAA4Br4B,IAAIgI,EAAKqF,cACzC,IAGA+J,EAAOxR,OACP,OAAOwR,EAGX,IAAIkhB,EAAwB,EACxBC,EAAyB,EAgC7B,OARA94B,OAAO6L,QAAQ4sB,EAAgBxR,MAAM9kB,SAAQ,EAAE,CAAEoG,MAC7CA,EAAKqF,aAvBc,CAACrF,IACpB,QAA0BzH,IAAtByH,EAAKqF,aAA4B,CACjC,KAAO+qB,EAA2BnxB,IAAIqxB,IAClCA,GAAyB,EAG7B,OADAF,EAA2Bp4B,IAAIs4B,GACxBA,CACX,CACA,OAAOtwB,EAAKqF,YAAY,EAeJmrB,CAAexwB,EAAK,IAG5CvI,OAAO6L,QAAQ4sB,EAAgBvR,OAAO/kB,SAAQ,EAAE,CAAEoG,MAC9CA,EAAKqF,aAhBe,CAACrF,IACrB,QAA0BzH,IAAtByH,EAAKqF,aAA4B,CACjC,KAAOgrB,EAA4BpxB,IAAIsxB,IACnCA,GAA0B,EAG9B,OADAF,EAA4Br4B,IAAIu4B,GACzBA,CACX,CACA,OAAOvwB,EAAKqF,YAAY,EAQJorB,CAAgBzwB,EAAK,IAGtC,CACH5G,OAAQ3B,OAAOge,YACXhe,OAAO6L,QAAQ,IAAK4sB,EAAgBxR,QAASwR,EAAgBvR,QACxDplB,QAAO,EAAE,CAAEyG,KAA6B,WAAnBA,EAAK6E,aAEnCxL,QAAS5B,OAAOge,YACZhe,OAAO6L,QAAQ,IAAK4sB,EAAgBxR,QAASwR,EAAgBvR,QACxDplB,QAAO,EAAE,CAAEyG,KAA6B,WAAnBA,EAAK6E,aAG3C,CAYO,SAAS6rB,EAAmBx3B,GAC/B,MAAMkW,EAAS,GACToD,EAAa,GA0CnB,OAzCAtZ,EAAWU,SACNoG,IACOvI,OAAOic,UAAUC,eAAeC,KAAK5T,EAAM,aAEvCkD,MAAMC,QAAQnD,EAAK2wB,UACK,IAAxB3wB,EAAK2wB,QAAQ/yB,QACbgzB,OAAOC,UAAU7wB,EAAK2wB,QAAQ,KAC9BC,OAAOC,UAAU7wB,EAAK2wB,QAAQ,IAG9Bne,EAAW/V,KAAK,CACZ+G,KAAM,GAAGxD,EAAKwD,QAAQxD,EAAK6E,aAAa6pB,IACxCp3B,KAAM,UACN+J,IAAKrB,EAAK2wB,QAAQ,GAClB1qB,IAAKjG,EAAK2wB,QAAQ,GAClBxnB,QAASnJ,EAAK2wB,QAAQ,GAEtBtS,cAAere,EAAK1I,KACpBw5B,4BAA6B9wB,EAAKqf,sBAEd,IAAjBrf,EAAK2wB,QAEZne,EAAW/V,KAAK,CACZ+G,KAAM,GAAGxD,EAAKwD,QAAQxD,EAAK6E,aAAa6pB,IACxCp3B,KAAM,UACN+J,IAAK,EACL8H,QAAS,EAETkV,cAAere,EAAK1I,KACpBw5B,4BAA6B9wB,EAAKqf,qBAGtCjQ,EAAO3S,KACH,cAAcuD,EAAKwD,+GAI/B,IAIJ4L,EAAOxR,OACA,CAAE4kB,SAAS,EAAOzqB,MAAOqX,GAE7B,CAAEoT,SAAS,EAAMzqB,MAAOya,EACnC,CASO,SAASue,EACZ73B,EACAuZ,EACAC,GAEA,IAAItD,EAAS,GAGb,MAAM4f,EAAaF,EAAsB51B,GAGzC,GAAIgK,MAAMC,QAAQ6rB,IAAeA,EAAWpxB,OACxC,OAAOoxB,EAoCX,GAhCAvc,EAAgB7Y,SAASo3B,IACrB,MAAMC,EAAaD,EAAMnsB,WAAa4pB,EACtCuC,EAAM93B,WAAWU,SAASoG,IACtB,MAAM6E,EAAY7E,EAAK6E,WAAa4pB,EACpC,QAAmBl2B,IAAfyH,EAAKovB,MAAqB,CAC1B,MAAO1Q,EAAMC,GAAS3e,EAAKovB,MAE3B,IAAK,IAAIC,EAAI3Q,EAAM2Q,EAAI1Q,EAAO0Q,GAAK,EAAG,CAClC,MAAM7rB,EAAO,GAAGqB,KAAa7E,EAAKwD,QAAQ6rB,KAErC53B,OAAO+S,KAAK,IAAKwkB,EAAWC,SAAUD,EAAW1Z,SAAU7b,SAAS+J,IAErE4L,EAAO3S,KACH,oBAAoBuD,EAAKwD,QAAQ6rB,qBAAqBxqB,gCACrBmsB,EAAMxtB,uBAC/BytB,qBAGpB,CACJ,KAAO,CACH,MAAMztB,EAAO,GAAGqB,KAAa7E,EAAKwD,OAC7B/L,OAAO+S,KAAK,IAAKwkB,EAAWC,SAAUD,EAAW1Z,SAAU7b,SAAS+J,IACrE4L,EAAO3S,KACH,oBAAoBuD,EAAKwD,uBAAuBqB,gCACfmsB,EAAMxtB,uBAC/BytB,qBAGpB,IACF,IAGF7hB,EAAOxR,OACP,OAAOwR,EAGX,MAAM8hB,EAAmBpC,EAAsBrc,GAAiB,GAEhE,GAAIvP,MAAMC,QAAQ+tB,IAAqBA,EAAiBtzB,OACpD,OAAOszB,EAIX,MAAMC,EAA2B,IAAI1hB,IACrChY,OAAO0B,OAAO,IACP+3B,EAAiBjC,SACjBiC,EAAiB5b,SACrB1b,SAASsP,IACRA,EAAMhQ,WAAWU,SAASoG,GAASmxB,EAAyBn5B,IAAIgI,IAAM,IAI1E,MAAMoxB,EAA8B1e,EAAuBzR,KACtDkc,GAAU,GAAGA,EAAMtY,WAAa4pB,KAAoBtR,EAAM3Z,SAS/D,GANA4L,EAAS4gB,EACLoB,EACA,IAAKF,EAAiBjC,SAAUD,EAAWC,OAC3C,IAAKiC,EAAiB5b,UAAW0Z,EAAW1Z,SAG5ClG,EAAOxR,OACP,OAAOwR,EAKX4f,EAAWC,MAAQx3B,OAAOge,YAAYhe,OAAO6L,QAAQ0rB,EAAWC,OAAO11B,QACnE,EAAEiK,MAAW2tB,EAAyBlyB,IAAIuE,MAG9CwrB,EAAW1Z,OAAS7d,OAAOge,YAAYhe,OAAO6L,QAAQ0rB,EAAW1Z,QAAQ/b,QACrE,EAAEiK,MAAW2tB,EAAyBlyB,IAAIuE,MAG9C,MAAM6tB,EAAcpB,EAChB,IAAKjB,EAAWC,SAAUiC,EAAiBjC,OAC3C,IAAKD,EAAW1Z,UAAW4b,EAAiB5b,SAEhD,GAAIpS,MAAMC,QAAQkuB,IAAgBA,EAAYzzB,OAC1C,OAAOyzB,EAGX,MAAMlB,EAAa3sB,GAASA,EAAK1G,MAAM0G,EAAKvG,QAAQ,KAAO,GAErDq0B,EAAoB,CACtBl4B,OAAQ,CAAC,EACTC,QAAS,CAAC,GA0Cd,OApCA5B,OAAO6L,QAAQ+tB,EAAYj4B,QAAQQ,SAAQ,EAAE4J,EAAMxD,WAEvBzH,IAApByH,EAAK9G,WAELo4B,EAAkBl4B,OAAOoK,GAAQmrB,EAC7B3uB,GACCoxB,EAA4B33B,SAAS+J,GACtC2sB,EAAU3sB,IAGd8tB,EAAkBl4B,OAAOoK,GAAQmrB,EAC7B3uB,GACA,EACAmwB,EAAU3sB,GAElB,IAGJ/L,OAAO6L,QAAQ+tB,EAAYh4B,SAASO,SAAQ,EAAE4J,EAAMxD,WAExBzH,IAApByH,EAAK9G,WAELo4B,EAAkBj4B,QAAQmK,GAAQmrB,EAC9B3uB,GACCoxB,EAA4B33B,SAAS+J,GACtC2sB,EAAU3sB,IAGd8tB,EAAkBj4B,QAAQmK,GAAQmrB,EAC9B3uB,GACA,EACAmwB,EAAU3sB,GAElB,IAGG8tB,CACX,C,0FCpgBA,MAAMC,GAAQ,QAAqB,CAC/BC,QAAS,IACTtwB,SAAU,KAASuwB,aACnBze,MAAM,EACN0e,aAAa,IAGJC,EAAY,CACrBxM,KAAM,EACNnR,QAAS,EACTlJ,MAAO,GAGI,MAAM8mB,EACjBppB,4BAA6B,EAE7BA,0BAA2B,EAQ3B,0BAAOqpB,CAAoBC,GACvBF,EAAoBG,kBAAoBD,CAC5C,CAUA,oBAAOE,CAAcC,GACjBL,EAAoBM,kBAAoBD,CAC5C,CAKA,8BAAOE,GACHP,EAAoBG,kBAAoBH,EAAoBM,iBAChE,CAEA,gBAAOxI,CAAUpyB,EAAMyT,GACnB,MAAMqf,EAAU,CACZgI,UAAW,IACXC,MAAO,CACH/6B,OACAyT,YAIR,GACI4mB,EAAUr6B,IAASq6B,EACf,KAAcjb,2BAA2BtL,YAAYgB,UAAU2W,gBAC9D6O,EAAoBG,kBAEzBR,EAAMnH,OACH,CACH,MAAMkI,EAAOh0B,SAASC,cAAc,2BAChC+zB,IACAA,EAAK5zB,UAAUvG,OAAO,WACtB60B,YAAW,IAAMsF,EAAK5zB,UAAU1G,IAAI,YAAY,KAExD,CACA,KAAkBA,IAAI,CAAEV,OAAMyT,WAClC,CAYA,kBAAO0b,CAAYnvB,EAAMwb,EAAOyf,GAC5BX,EAAoBlI,UAAUpyB,EAAMwb,GACpC,KAAc0f,UAAU1f,EAAOyf,EACnC,E,oEC9FJ,MAAME,EAAmB,MACrB,IACI,MAAMC,EAAYt1B,KAAKu1B,SAASj2B,SAAS,IACnCk2B,EAAcx1B,KAAKu1B,SAASj2B,SAAS,IAG3C,OAFAm2B,aAAaC,QAAQJ,EAAWE,GAChCC,aAAaE,WAAWL,IACjB,CACX,CAAE,MACE,OAAO,CACX,CACH,EAVwB,GAYnBM,EAAY,IAAI53B,IAChBgB,EAAO4C,GACLyzB,EAAyBI,aAAaI,QAAQj0B,GAC3Cg0B,EAAU52B,IAAI4C,IAAQ,KAG3B3C,EAAM,CAAC2C,EAAKjH,KACV06B,EAAkBI,aAAaC,QAAQ9zB,EAAKjH,GAC3Ci7B,EAAU32B,IAAI2C,EAAKjH,EAAM,EAG5BI,EAAU6G,IACRyzB,EAAkBI,aAAaE,WAAW/zB,GACzCg0B,EAAU1yB,OAAOtB,EAAI,EAIjBk0B,GAAoB,QAAS,CACtCC,cAAehpB,KAAKC,MAAMhO,EAAI,mBAAqB,GACnD,GAAApE,CAAIo7B,GACAz7B,KAAKw7B,cAAc12B,KAAK22B,GAExB/2B,EAAI,gBAAiB8N,KAAK6C,UAAUrV,KAAKw7B,eAC7C,EAEA,MAAAh7B,GACIA,EAAO,iBACPR,KAAKw7B,cAAgB,EACzB,EAEA,SAAAE,CAAU3d,GACN,MAAM4d,EAAmB37B,KAAKw7B,cAAc55B,QAAO,CAACg6B,EAAGp2B,IAAQuY,IAAUvY,IAEzEd,EAAI,gBAAiB8N,KAAK6C,UAAUsmB,IACpC37B,KAAKw7B,cAAgBG,CACzB,IAGSE,EAAgB,WAEhBC,GAAgB,QAAS,CAElClN,KAAM,CACFmN,SAAUvpB,KAAKC,MAAMhO,EAAI,UAAY,IAEzCu3B,SAAU,CACND,UAAU,GAEd,GAAA17B,CAAI47B,EAAKjrB,EAAW6qB,GAChB77B,KAAK4uB,KAAK5d,GAAUlM,KAAKm3B,GAGrBjrB,IAAa6qB,GACbn3B,EAAI,OAAQ8N,KAAK6C,UAAUrV,KAAK4uB,KAAK5d,IAE7C,EACA,UAAAkrB,CAAWlrB,EAAW6qB,GAClB,OAAO77B,KAAKg8B,SAAShrB,EACzB,EAkBA,SAAA6pB,CAAU1f,EAAOyf,EAAU5pB,EAAW6qB,GAClC,IAAIM,EAAgBhhB,EAChByf,IACwB,iBAAbA,GAAyBA,aAAoB1vB,UACpD0vB,EAAW,CAACA,IAEhBuB,GAAiB,IAEjBvB,EAAS34B,SAASmR,IACd+oB,GAAiB,KACjBA,GAAiB,OACjBA,GAAiB/oB,CAAO,KAG5B+oB,GAAiB,IAErBn8B,KAAKK,IAAI87B,EAAenrB,EAC5B,EAEA,MAAAxQ,CAAOwQ,EAAW6qB,GACV7qB,IAAa6qB,GACbr7B,EAAO,QAEXR,KAAK4uB,KAAK5d,GAAY,EAC1B,EAUA,sBAAA0d,CAAuB7iB,EAAMmwB,GAAW,GACpC,OAAIl8B,OAAO+S,KAAK7S,KAAK4uB,MAAM9sB,SAAS+J,KAEpC7L,KAAK4uB,KAAK/iB,GAAQ,GAClB7L,KAAKg8B,SAASnwB,GAAQmwB,GACf,EACX,G","sources":["webpack://pipeline-manager/./src/core/History.ts","webpack://pipeline-manager/./src/core/communication/runInformation.ts","webpack://pipeline-manager/./src/core/interfaceRegistry.ts","webpack://pipeline-manager/./src/core/snappers.ts","webpack://pipeline-manager/./src/core/Clipboard.ts","webpack://pipeline-manager/./src/core/InterfaceTypes.js","webpack://pipeline-manager/./src/core/ConnectionRenderer.js","webpack://pipeline-manager/./src/core/Specification.js","webpack://pipeline-manager/./src/core/EditorManager.js","webpack://pipeline-manager/./src/core/layoutEngines/baseEngine.js","webpack://pipeline-manager/./src/core/layoutEngines/cytoscapeEngine.js","webpack://pipeline-manager/./src/core/layoutEngines/noLayoutEngine.js","webpack://pipeline-manager/./src/core/LayoutManager.js","webpack://pipeline-manager/./src/core/NodeFactory.js","webpack://pipeline-manager/./src/core/utils.ts","webpack://pipeline-manager/./src/core/communication/remoteProcedures.ts","webpack://pipeline-manager/./src/core/communication/rpcCommunication.ts","webpack://pipeline-manager/./src/core/communication/ExternalApplicationManager.js","webpack://pipeline-manager/./src/core/doubleClick.js","webpack://pipeline-manager/./src/core/events.js","webpack://pipeline-manager/./src/core/interfaceParser.js","webpack://pipeline-manager/./src/core/notifications.js","webpack://pipeline-manager/./src/core/stores.js"],"sourcesContent":["/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n/* eslint-disable max-classes-per-file */\nimport { reactive, ref, watch, } from 'vue';\nimport { v4 as uuidv4 } from 'uuid';\nexport const suppressingHistory = ref(false);\nconst transactionId = ref('');\nexport class Step {\n    constructor(type, topic, tid = uuidv4()) {\n        Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"transactionId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // I need this to be of basically any type, as\n        // it may need to receive objects, arrays of objects, other steps\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        Object.defineProperty(this, \"topic\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.type = type;\n        this.topic = topic;\n        this.transactionId = tid;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    add(graph) {\n        throw new Error(`Method add has thrown an error for topic: ${this.topic}`);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    remove(graph) {\n        throw new Error(`Method remove has thrown an error for topic: ${this.topic}`);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    edit(graph) {\n        throw new Error(`Method edit has thrown an error for topic: ${this.topic}`);\n    }\n}\nclass NodeStep extends Step {\n    constructor(type, topic, tid = uuidv4()) {\n        if (tid === '')\n            tid = uuidv4(); // eslint-disable-line no-param-reassign\n        super(type, topic, tid);\n        Object.defineProperty(this, \"nodeTuple\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    add(graph) {\n        if (this.nodeTuple[0] !== undefined) {\n            const n = graph.value.addNode(this.nodeTuple[0]);\n            n.load(this.nodeTuple[1]);\n        }\n    }\n    remove(graph) {\n        const node = graph.value.nodes.find((n) => n.id === this.topic);\n        if (node !== undefined) {\n            this.nodeTuple = [node, node.save()];\n            graph.value.removeNode(node);\n        }\n    }\n    edit(graph) {\n        if (this.nodeTuple[0] !== undefined) {\n            // save node connections\n            const interfaces = [\n                ...Object.values(this.nodeTuple[0].inputs),\n                ...Object.values(this.nodeTuple[0].outputs),\n            ];\n            const connections = graph.value.connections.filter((c) => interfaces.includes(c.from) || interfaces.includes(c.to));\n            // remove the current version of the node\n            graph.value.removeNode(this.nodeTuple[0]);\n            // save the current version and load the previous save\n            const n = graph.value.addNode(this.nodeTuple[0]);\n            const save = this.nodeTuple[1];\n            this.nodeTuple = [this.nodeTuple[0], this.nodeTuple[0].save()];\n            n.load(save);\n            // restore connections\n            connections.forEach((conn) => {\n                graph.value.addConnection(conn.from, conn.to);\n            });\n        }\n    }\n}\nclass ConnectionStep extends Step {\n    constructor(type, topic, tid = uuidv4()) {\n        if (tid === '')\n            tid = uuidv4(); // eslint-disable-line no-param-reassign\n        super(type, topic, tid);\n        Object.defineProperty(this, \"conn\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n    }\n    add(graph) {\n        if (this.conn !== undefined) {\n            // The object of the interfaces itself has changed and despite\n            // having all the same fields, it will not assign the connection\n            // correctly. That's why it is necessary to extract the nodeId\n            // from what we have and find the interface in said node manually\n            const fromNode = graph.value.findNodeById(this.conn.from.nodeId);\n            const toNode = graph.value.findNodeById(this.conn.to.nodeId);\n            if (!fromNode || !toNode)\n                return;\n            const from = [\n                ...Object.values(fromNode.inputs),\n                ...Object.values(fromNode.outputs),\n            ].filter((iface) => iface.port).find((iface) => iface.id === this.conn.from.id);\n            const to = [\n                ...Object.values(toNode.inputs),\n                ...Object.values(toNode.outputs),\n            ].filter((iface) => iface.port).find((iface) => iface.id === this.conn.to.id);\n            if (!from || !to)\n                return;\n            const connAdded = graph.value.addConnection(from, to);\n            if (connAdded === undefined) {\n                return;\n            }\n            connAdded.id = this.conn.id;\n        }\n    }\n    remove(graph) {\n        const conn = graph.value.connections.find((n) => n.id === this.topic);\n        if (conn !== undefined) {\n            this.conn = conn;\n            graph.value.removeConnection(conn);\n        }\n    }\n}\nclass AnchorStep extends Step {\n    constructor(type, topic, tid = uuidv4()) {\n        if (tid === '')\n            tid = uuidv4(); // eslint-disable-line no-param-reassign\n        super(type, topic, tid);\n        Object.defineProperty(this, \"anchor\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n    }\n    add(graph) {\n        if (this.anchor !== undefined) {\n            const conn = graph.value.connections.find((n) => n.from.id === this.anchor[0].from.id &&\n                n.to.id === this.anchor[0].to.id &&\n                n.id === this.anchor[0].id);\n            if (conn !== undefined)\n                if (conn.anchors === undefined)\n                    conn.anchors = [];\n            conn.anchors.splice(this.anchor[2], 0, this.anchor[1]);\n        }\n    }\n    remove(graph) {\n        if (this.anchor !== undefined) {\n            const conn = graph.value.connections.find((n) => n.from === this.anchor[0].from && n.to === this.anchor[0].to);\n            if (conn !== undefined)\n                conn.anchors.splice(this.anchor[2], 1);\n        }\n    }\n}\nexport function suppressHistoryLogging(value) {\n    suppressingHistory.value = value;\n}\nexport function startTransaction(id = uuidv4()) {\n    if (transactionId.value !== '')\n        return undefined;\n    transactionId.value = id;\n    return id;\n}\nexport function commitTransaction() {\n    transactionId.value = '';\n}\nexport function useHistory(graph, commandHandler) {\n    const token = Symbol('CustomHistoryToken');\n    const maxSteps = 200;\n    const history = new Map();\n    const undoneHistory = new Map();\n    let currentId = 'ThisShouldNotAppearInHistoryMaps';\n    let oldId = 'ThisShouldNotAppearInHistoryMaps';\n    const unsubscribeFromGraphEvents = (g, tok) => {\n        g.events.addNode.unsubscribe(tok);\n        g.events.removeNode.unsubscribe(tok);\n        g.events.editNode.unsubscribe(tok);\n        g.events.addConnection.unsubscribe(tok);\n        g.events.removeConnection.unsubscribe(tok);\n        g.events.addAnchor.unsubscribe(tok);\n        g.events.removeAnchor.unsubscribe(tok);\n    };\n    // Switch all the events to any new graph that's displayed\n    const graphSwitch = (newGraph, oldGraph, copyStateStack = false) => {\n        if (oldGraph) {\n            unsubscribeFromGraphEvents(oldGraph, token);\n        }\n        if (newGraph) {\n            oldId = currentId;\n            currentId = newGraph.id;\n            if (history.get(currentId) === undefined)\n                history.set(currentId, []);\n            if (undoneHistory.get(currentId) === undefined)\n                undoneHistory.set(currentId, []);\n            if (copyStateStack) {\n                const undoneItem = undoneHistory.get(oldId);\n                if (undoneItem)\n                    undoneHistory.set(currentId, undoneItem);\n                const historyItem = history.get(oldId);\n                if (historyItem)\n                    history.set(currentId, historyItem);\n            }\n            newGraph.events.addNode.subscribe(token, (node) => {\n                if (!suppressingHistory.value) {\n                    const historyItem = history.get(newGraph.id);\n                    if (!historyItem)\n                        return;\n                    historyItem.push(new NodeStep('add', node.id.toString(), transactionId.value));\n                    undoneHistory.set(newGraph.id, []);\n                }\n            });\n            newGraph.events.removeNode.subscribe(token, (node) => {\n                if (!suppressingHistory.value) {\n                    const historyItem = history.get(newGraph.id);\n                    if (!historyItem)\n                        return;\n                    const step = new NodeStep('rem', node.id.toString(), transactionId.value);\n                    historyItem.push(step);\n                    step.nodeTuple = [node, node.save()];\n                    undoneHistory.set(newGraph.id, []);\n                }\n            });\n            newGraph.events.editNode.subscribe(token, (node) => {\n                if (!suppressingHistory.value) {\n                    const historyItem = history.get(newGraph.id);\n                    if (!historyItem)\n                        return;\n                    const step = new NodeStep('edit', node.id.toString(), transactionId.value);\n                    historyItem.push(step);\n                    step.nodeTuple = [node, node.save()];\n                    undoneHistory.set(newGraph.id, []);\n                }\n            });\n            newGraph.events.addConnection.subscribe(token, (conn) => {\n                if (!suppressingHistory.value) {\n                    const historyItem = history.get(newGraph.id);\n                    if (!historyItem)\n                        return;\n                    historyItem.push(new ConnectionStep('add', conn.id.toString(), transactionId.value));\n                    undoneHistory.set(newGraph.id, []);\n                }\n            });\n            newGraph.events.removeConnection.subscribe(token, (conn) => {\n                var _a;\n                if (!suppressingHistory.value) {\n                    const inTransaction = transactionId.value !== '';\n                    if (!inTransaction)\n                        startTransaction();\n                    const historyItem = history.get(newGraph.id);\n                    if (!historyItem)\n                        return;\n                    ((_a = conn.anchors) !== null && _a !== void 0 ? _a : []).slice().reverse().forEach((anchor) => {\n                        newGraph.events.removeAnchor.emit([conn, conn.anchors.indexOf(anchor)]);\n                    });\n                    const step = new ConnectionStep('rem', conn.id.toString(), transactionId.value);\n                    historyItem.push(step);\n                    step.conn = conn;\n                    undoneHistory.set(newGraph.id, []);\n                    if (!inTransaction)\n                        commitTransaction();\n                }\n            });\n            newGraph.events.addAnchor.subscribe(token, (tuple) => {\n                if (!suppressingHistory.value) {\n                    const historyItem = history.get(newGraph.id);\n                    if (!historyItem)\n                        return;\n                    const idx = Math.trunc((tuple[1] - 1) / 3);\n                    const conn = tuple[0];\n                    const step = new AnchorStep('add', conn.anchors[idx].id.toString(), transactionId.value);\n                    historyItem.push(step);\n                    step.anchor = [conn, conn.anchors[idx], idx];\n                    undoneHistory.set(newGraph.id, []);\n                }\n            });\n            newGraph.events.removeAnchor.subscribe(token, (tuple) => {\n                if (!suppressingHistory.value) {\n                    const historyItem = history.get(newGraph.id);\n                    if (!historyItem)\n                        return;\n                    const idx = tuple[1];\n                    const conn = tuple[0];\n                    const step = new AnchorStep('rem', conn.anchors[idx].id.toString(), transactionId.value);\n                    historyItem.push(step);\n                    step.anchor = [conn, conn.anchors[idx], idx];\n                    undoneHistory.set(newGraph.id, []);\n                }\n            });\n        }\n    };\n    watch(graph, (newGraph, oldGraph) => graphSwitch(newGraph, oldGraph), { flush: 'post', immediate: true });\n    const singleStepTransaction = (mainHistory, auxiliaryHistory) => {\n        const step = mainHistory.pop();\n        if (step === undefined)\n            return;\n        suppressingHistory.value = true;\n        if (step.type === 'add') {\n            step.type = 'rem';\n            step.remove(graph);\n        }\n        else if (step.type === 'rem') {\n            step.type = 'add';\n            step.add(graph);\n        }\n        else if (step.type === 'edit') {\n            step.type = 'edit';\n            step.edit(graph);\n        }\n        auxiliaryHistory.push(step);\n        if (mainHistory.length > 0 &&\n            mainHistory[mainHistory.length - 1].transactionId === step.transactionId)\n            singleStepTransaction(mainHistory, auxiliaryHistory);\n        suppressingHistory.value = false;\n        graph.value.selectedNodes.splice(0, graph.value.selectedNodes.length);\n    };\n    commandHandler.registerCommand('undo', {\n        canExecute: () => true,\n        execute: () => {\n            const historyItem = history.get(currentId);\n            if (historyItem && historyItem.length !== 0) {\n                const undoneItem = undoneHistory.get(currentId);\n                if (historyItem && undoneItem)\n                    singleStepTransaction(historyItem, undoneItem);\n            }\n        },\n    });\n    commandHandler.registerCommand('redo', {\n        canExecute: () => true,\n        execute: () => {\n            const historyItem = history.get(currentId);\n            const undoneItem = undoneHistory.get(currentId);\n            if (historyItem && undoneItem && undoneItem.length !== 0) {\n                singleStepTransaction(undoneItem, historyItem);\n            }\n        },\n    });\n    commandHandler.registerCommand('START_TRANSACTION', {\n        canExecute: () => transactionId.value === '',\n        execute: () => startTransaction,\n    });\n    commandHandler.registerCommand('COMMIT_TRANSACTION', {\n        canExecute: () => transactionId.value !== '',\n        execute: () => commitTransaction,\n    });\n    commandHandler.registerHotkey(['Control', 'z'], 'undo');\n    commandHandler.registerHotkey(['Control', 'y'], 'redo');\n    return reactive({\n        max_steps: maxSteps,\n        graphSwitch,\n        unsubscribeFromGraphEvents,\n    });\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n/* eslint-disable max-classes-per-file */\n/**\n * Class with information about ran procedure.\n */\nclass RunInfo {\n    /**\n     * @param procedureName Name of the procedure\n     */\n    constructor(procedureName) {\n        Object.defineProperty(this, \"procedureName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"hook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        /** @private */\n        Object.defineProperty(this, \"pr_inProgress\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.procedureName = procedureName;\n    }\n    /**\n     * Finds progress bar affiliated with run.\n     * If cannot be found, throws Error.\n     */\n    get progressBar() {\n        const progressBar = document.querySelector(`#navbar-button-${this.procedureName} > .progress-bar`);\n        return progressBar;\n    }\n    /**\n     * Specifies if run is in progress.\n     */\n    get inProgress() {\n        return this.pr_inProgress;\n    }\n    set inProgress(value) {\n        const { progressBar } = this;\n        if (progressBar) {\n            if (!value)\n                progressBar.classList.remove('animate');\n            progressBar.style.width = '0%';\n        }\n        this.pr_inProgress = value;\n        if (this.hook !== undefined) {\n            this.hook();\n        }\n    }\n}\n/**\n * @template K key type\n * @template V value type\n * @extends {Map<K,V>}\n *\n * Map automatically creating values if key is not found.\n */\nclass DefaultMap extends Map {\n    constructor(defaultFactory) {\n        super();\n        Object.defineProperty(this, \"defaultFactory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.defaultFactory = defaultFactory;\n    }\n    get(key) {\n        if (!super.has(key)) {\n            super.set(key, this.defaultFactory(key));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return super.get(key);\n    }\n}\n/**\n * @extends {DefaultMap<string, RunInfo>}\n *\n * DefaultMap with custom hook run when RunInfo inProgress changes value.\n */\nclass RunInfoMap extends DefaultMap {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"hook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n    }\n    get(key) {\n        if (!super.has(key)) {\n            const newValue = this.defaultFactory(key);\n            newValue.hook = this.hook;\n            super.set(key, newValue);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return super.get(key);\n    }\n    setHook(hook) {\n        this.hook = hook;\n        // eslint-disable-next-line no-param-reassign\n        this.forEach((v) => { v.hook = hook; });\n    }\n}\nexport default new RunInfoMap((key) => new RunInfo(key));\n","/*\n * Copyright (c) 2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nexport class InterfaceRegistry {\n    constructor() {\n        Object.defineProperty(this, \"exposedInterfaces\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    /**\n     * Clears the registry.\n     */\n    clearRegistry() {\n        this.exposedInterfaces.clear();\n    }\n    /**\n     * Stores graph id of a shared interface in the registry, so that when\n     * privatizing an interface we can remove it from all the graphs that use it.\n     * If the interface is not registered, an error is thrown.\n     *\n     * @param {string} intfId Id of the interface.\n     * @param {string} graphId Id of a graph that has the registered interface\n     */\n    pushGraphIdToRegistry(intfId, graphId) {\n        const sharedInterface = this.exposedInterfaces.get(intfId);\n        if (!sharedInterface) {\n            throw new Error(`Interface with id ${intfId} not found in the register.`);\n        }\n        sharedInterface.graphIds.push(graphId);\n    }\n    /**\n     * Seamlessly wraps passed `intf`, so that the properties `maxConnectionsCount`,\n     * `connectionCount` and `type` are shared between those two interfaces.\n     *\n     * @param {NodeInterface} intf Interface for which the wrapper is created.\n     */\n    createSharedInterface(intf) {\n        const sharedInterface = this.exposedInterfaces.get(intf.id);\n        if (!sharedInterface) {\n            throw new Error(`'Interface with id ${intf.id} not found in the register.`);\n        }\n        Object.defineProperty(intf, 'maxConnectionsCount', {\n            get() {\n                return sharedInterface.sharedInterface.maxConnectionsCount;\n            },\n            set(value) {\n                sharedInterface.sharedInterface.maxConnectionsCount = value;\n            },\n        });\n        Object.defineProperty(intf, 'connectionCount', {\n            get() {\n                return sharedInterface.sharedInterface.connectionCount;\n            },\n            set(value) {\n                sharedInterface.sharedInterface.connectionCount = value;\n            },\n        });\n        Object.defineProperty(intf, 'type', {\n            get() {\n                return sharedInterface.sharedInterface.type;\n            },\n        });\n    }\n    /**\n     * Checks if the interface of given id is registered.\n     *\n     * @param {string} intfId Id of the interface to check.\n     * @returns {boolean} True if the interface is registered, false otherwise.\n     */\n    isRegistered(intfId) {\n        return this.exposedInterfaces.has(intfId);\n    }\n    /**\n     * Returns the registered interface of given id. If the interface is not registered,\n     * an error is thrown.\n     *\n     * @param {string} intfId Id of the interface to get.\n     */\n    getRegisteredInterface(intfId) {\n        if (!this.exposedInterfaces.has(intfId)) {\n            throw new Error(`Interface of id ${intfId} is not registered.`);\n        }\n        return this.exposedInterfaces.get(intfId);\n    }\n    /**\n     * Deletes the registered interface of given id. If the interface is not registered,\n     * an error is thrown.\n     *\n     * @param {string} intfId Id of the interface to delete\n     */\n    deleteRegisteredInterface(intfId) {\n        if (!this.exposedInterfaces.has(intfId)) {\n            throw new Error(`Interface of id ${intfId} is not registered.`);\n        }\n        return this.exposedInterfaces.delete(intfId);\n    }\n    /**\n     * Registers an interface in the registry, so that it can be shared between\n     * multiple graph nodes. If the interface is already registered, an error is thrown.\n     *\n     * @param {NodeInterface} intf Interface to register.\n     */\n    registerInterface(intf, graphId) {\n        if (this.exposedInterfaces.has(intf.id)) {\n            throw new Error(`Trying to register an interface of id ${intf.id}, but it is already registered.`);\n        }\n        this.exposedInterfaces.set(intf.id, {\n            sharedInterface: intf,\n            sharedInterfaceGraphId: graphId,\n            graphIds: [],\n        });\n    }\n}\nexport const ir = new InterfaceRegistry();\n","/*\n * Copyright (c) 2022-2023 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { useGraph } from '@baklavajs/renderer-vue';\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Function for calculating node position based on given movementStep.\n *\n * @param movementStep Vue's reference to value containing snap offset\n */\nexport function gridSnapper(movementStep) {\n    const calculateSnappedPosition = (coord) => Math.round(coord / movementStep.value) * movementStep.value;\n    return calculateSnappedPosition;\n}\n/**\n * Creates function that aligns the value of node position along specified axis if it is close\n * enough to other node position\n *\n * @param kind Either 'x' or 'y', defines along which axis the coordinate is aligned\n */\nexport function nodeSnapper(kind) {\n    const { graph } = useGraph();\n    const snapDistance = 100;\n    const calculateSnappedPosition = (coord, nodeId, selectedNodesIds) => {\n        const nearestCoords = graph.value.nodes\n            // any definition is an ad-hoc solution as we don't have our node definition\n            .filter((node) => node.id !== nodeId && !selectedNodesIds.includes(node.id))\n            .map((node) => node.position[kind])\n            .filter((otherCoords) => Math.abs(coord - otherCoords) < snapDistance);\n        return nearestCoords.length !== 0 ? Math.min(...nearestCoords) : undefined;\n    };\n    return calculateSnappedPosition;\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n/*\nThe baklavajs functionality was fully copied to this file, as the original\nimplementation is not exported and cannot be integrated with custom history\nas the Commands have been replaced.\n\nThe original source is slightly adjusted to integrate with the customized history\nand the new command handler\n*/\nimport { computed, reactive, ref, } from 'vue';\nimport { v4 as uuidv4 } from 'uuid';\nimport { GRAPH_NODE_TYPE_PREFIX, } from '@baklavajs/core';\nimport { useViewModel, } from '@baklavajs/renderer-vue';\nimport { startTransaction, commitTransaction, } from './History.ts';\nimport { removeNode } from '../custom/CustomNode.js';\nexport const COPY_COMMAND = 'COPY';\nexport const DELETE_COMMAND = 'DELETE';\nexport const UNHIGHLIGHT_COMMAND = 'UNHIGHLIGHT';\nexport const PASTE_COMMAND = 'PASTE';\nexport const CLEAR_CLIPBOARD_COMMAND = 'CLEAR_CLIPBOARD';\nexport function useClipboard(displayedGraph, editor, commandHandler) {\n    const token = Symbol('ClipboardToken');\n    const nodeBuffer = ref('');\n    const connectionBuffer = ref('');\n    const consecutivePasteNumber = ref(0);\n    const isEmpty = computed(() => !nodeBuffer.value);\n    const clear = () => {\n        nodeBuffer.value = '';\n        connectionBuffer.value = '';\n    };\n    const copy = () => {\n        // find all connections from and to the selected nodes\n        const interfacesOfSelectedNodes = displayedGraph.value.selectedNodes.flatMap((n) => [\n            ...Object.values(n.inputs),\n            ...Object.values(n.outputs),\n        ]);\n        const connections = displayedGraph.value.connections\n            .filter((conn) => interfacesOfSelectedNodes.includes(conn.from) ||\n            interfacesOfSelectedNodes.includes(conn.to))\n            .map((conn) => ({ from: conn.from.id, to: conn.to.id }));\n        connectionBuffer.value = JSON.stringify(connections);\n        nodeBuffer.value = JSON.stringify(displayedGraph.value.selectedNodes.map((n) => n.save()));\n        consecutivePasteNumber.value = 0;\n    };\n    const del = () => {\n        const { viewModel } = useViewModel();\n        if (viewModel.value.editor.readonly)\n            return;\n        startTransaction();\n        displayedGraph.value.selectedNodes.forEach((node) => {\n            removeNode(node);\n        });\n        commitTransaction();\n    };\n    const findInterface = (nodes, id, io) => {\n        for (let i = 0; i < nodes.length; i += 1) {\n            let intf;\n            if (!io || io === 'input') {\n                intf = Object.values(nodes[i].inputs).find((iface) => iface.id === id);\n            }\n            if (!intf && (!io || io === 'output')) {\n                intf = Object.values(nodes[i].outputs).find((iface) => iface.id === id);\n            }\n            if (intf) {\n                return intf;\n            }\n        }\n        return undefined;\n    };\n    const paste = () => {\n        var _a, _b;\n        const { viewModel } = useViewModel();\n        if (isEmpty.value || viewModel.value.editor.readonly) {\n            return;\n        }\n        const movementStep = (_a = viewModel.value.movementStep) !== null && _a !== void 0 ? _a : 1;\n        // Map old IDs to new IDs\n        const idmap = new Map();\n        const parsedNodeBuffer = JSON.parse(nodeBuffer.value);\n        const parsedConnectionBuffer = JSON.parse(connectionBuffer.value);\n        const newNodes = [];\n        const newConnections = [];\n        const graph = displayedGraph.value;\n        commandHandler.executeCommand('START_TRANSACTION');\n        for (let i = 0; i < parsedNodeBuffer.length; i += 1) {\n            let nodeType;\n            if (((_b = parsedNodeBuffer[i]) === null || _b === void 0 ? void 0 : _b.subgraph) !== undefined) {\n                nodeType = editor.value.nodeTypes.get(`${GRAPH_NODE_TYPE_PREFIX}${parsedNodeBuffer[i].name}`);\n            }\n            else {\n                nodeType = editor.value.nodeTypes.get(parsedNodeBuffer[i].name);\n            }\n            if (!nodeType) {\n                return;\n            }\n            /* eslint-disable-next-line new-cap */\n            let copiedNode = new nodeType.type();\n            newNodes.push(copiedNode);\n            copiedNode.hooks.beforeLoad.subscribe(token, (nodeState) => {\n                const ns = nodeState;\n                if (ns.position) {\n                    consecutivePasteNumber.value += 1;\n                    ns.position.x += consecutivePasteNumber.value * Math.max(40, movementStep);\n                    ns.position.y += consecutivePasteNumber.value * Math.max(40, movementStep);\n                }\n                if (parsedNodeBuffer[i].graphState !== undefined) {\n                    parsedNodeBuffer[i].graphState.nodes.forEach((n) => {\n                        /* eslint-disable-next-line no-param-reassign */\n                        if (n.type !== undefined)\n                            n.name = n.type;\n                    });\n                }\n                copiedNode.hooks.beforeLoad.unsubscribe(token);\n                return ns;\n            });\n            copiedNode = graph.addNode(copiedNode);\n            const mapNewId = (obj) => {\n                /* eslint-disable no-param-reassign */\n                const newId = uuidv4();\n                idmap.set(obj.id, newId);\n                obj.id = newId;\n            };\n            const assignNewIds = (node) => {\n                /* eslint-disable no-param-reassign */\n                // New node id\n                mapNewId(node);\n                if (node.graphState !== undefined) {\n                    mapNewId(node.graphState);\n                    node.graphState.nodes.forEach((subNode) => {\n                        assignNewIds(subNode);\n                    });\n                    // If it is a subgraph node, then some interfaces have to have the same IDs\n                    // as the ones in the subgraph\n                    node.interfaces.forEach((intf) => {\n                        var _a;\n                        intf.id = (_a = idmap.get(intf.id)) !== null && _a !== void 0 ? _a : intf.id;\n                        // If the node has any external interfaces, then their names have\n                        // to be resolved as they cannot conflict with the existing ones.\n                        if (intf.externalName !== undefined) {\n                            intf.externalName = graph.resolveNewExposedName(intf.externalName);\n                        }\n                    });\n                    node.graphState.connections.forEach((conn) => {\n                        if (idmap.get(conn.from) === undefined ||\n                            idmap.get(conn.to) === undefined) {\n                            throw new Error('Error when executing copy and paste. ' +\n                                `Connection from interface ${conn.from} to ${conn.to} is invalid`);\n                        }\n                        conn.from = idmap.get(conn.from);\n                        conn.to = idmap.get(conn.to);\n                    });\n                }\n                else {\n                    // If it is a regular node, then interfaces need new IDs.\n                    node.interfaces.forEach((intf) => {\n                        mapNewId(intf);\n                        // If the node has any external interfaces, then their names have\n                        // to be resolved as they cannot conflict with the existing ones.\n                        if (intf.externalName !== undefined) {\n                            intf.externalName = graph.resolveNewExposedName(intf.externalName);\n                        }\n                    });\n                }\n            };\n            assignNewIds(parsedNodeBuffer[i]);\n            copiedNode.load(Object.assign(Object.assign({}, parsedNodeBuffer[i]), { id: copiedNode.id }));\n            // If the pasted graph was inside of a graph node, then the graph node has to\n            // have its exposed interfaces refreshed\n            if (displayedGraph.value.graphNode !== undefined) {\n                displayedGraph.value.graphNode.updateExposedInterfaces();\n            }\n        }\n        for (let i = 0; i < parsedConnectionBuffer.length; i += 1) {\n            const fromId = idmap.get(parsedConnectionBuffer[i].from);\n            const toId = idmap.get(parsedConnectionBuffer[i].to);\n            if (fromId && toId) {\n                const fromIntf = findInterface(newNodes, fromId, 'output');\n                const toIntf = findInterface(newNodes, toId, 'input');\n                if (fromIntf && toIntf) {\n                    const newConnection = graph.addConnection(fromIntf, toIntf);\n                    if (newConnection) {\n                        newConnections.push(newConnection);\n                    }\n                }\n            }\n        }\n        commandHandler.executeCommand('COMMIT_TRANSACTION');\n        /* eslint-disable-next-line consistent-return */\n        return {\n            newNodes,\n            newConnections,\n        };\n    };\n    commandHandler.registerCommand(DELETE_COMMAND, {\n        canExecute: () => displayedGraph.value.selectedNodes.length > 0,\n        execute: del,\n    });\n    commandHandler.registerHotkey(['Delete'], DELETE_COMMAND);\n    commandHandler.registerCommand(UNHIGHLIGHT_COMMAND, {\n        canExecute: () => true,\n        execute: () => {\n            displayedGraph.value.selectedNodes = []; // eslint-disable-line no-param-reassign\n        },\n    });\n    commandHandler.registerHotkey(['Escape'], UNHIGHLIGHT_COMMAND);\n    commandHandler.registerCommand(COPY_COMMAND, {\n        canExecute: () => true,\n        execute: copy,\n    });\n    commandHandler.registerHotkey(['Control', 'c'], COPY_COMMAND);\n    commandHandler.registerCommand(PASTE_COMMAND, {\n        canExecute: () => !isEmpty.value,\n        execute: paste,\n    });\n    commandHandler.registerHotkey(['Control', 'v'], PASTE_COMMAND);\n    commandHandler.registerCommand(CLEAR_CLIPBOARD_COMMAND, {\n        canExecute: () => true,\n        execute: clear,\n    });\n    return reactive({ isEmpty });\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n *\n */\n\n/* eslint-disable class-methods-use-this */\nexport default class BaklavaInterfaceTypes {\n    types = new Map();\n\n    defaultStyle = {\n        interfaceConnectionPattern: 'solid',\n        interfaceConnectionColor: '#FFFFFF', // $white\n        interfaceColor: '#00E58D', // $green\n    };\n\n    /**\n     * Initialize Interface types instance used to manager styles of interfaces and connections\n     * and validate adding connections.\n     */\n    constructor(viewPlugin) {\n        viewPlugin.hooks.renderInterface.subscribe(this, ({ intf, el }) => {\n            if (intf.type) {\n                const types = this.normalizeType(intf.type);\n                const firstType = types.find((t) => this.types[t]?.interfaceColor !== undefined);\n\n                if (firstType !== undefined) {\n                    const color = this.types[firstType].interfaceColor;\n                    const arrow = el.querySelector('.__port:not(.greyedout_arrow)'); // eslint-disable-line no-param-reassign\n                    if (arrow !== null) arrow.style.backgroundColor = color;\n                    else {\n                        const greyArrow = el.querySelector('.__port');\n                        if (greyArrow !== null) {\n                            greyArrow.style.backgroundColor =\n                                getComputedStyle(greyArrow).getPropertyValue('$gray-500');\n                        }\n                    }\n                }\n            }\n\n            return { intf, el };\n        });\n    }\n\n    normalizeType(type) {\n        return typeof type === 'string' || type instanceof String ? [type] : type;\n    }\n\n    /**\n     * Returns connection style for a given from and to interfaces.\n     * It takes style of a common type of those interfaces and completes its missing values\n     * with default ones. If there are multiple common types, a default style is returned.\n     *\n     * If there is no `to` interface then a style for `from` interface is returned.\n     * Again with completed missing values.\n     *\n     * @param {Interface} from connection source\n     * @param {Interface} to connection target\n     * @returns style for a defined connection\n     */\n    getConnectionStyle(from, to) {\n        const fromTypes = this.normalizeType(from?.type);\n        const toTypes = this.normalizeType(to?.type);\n\n        if (from?.type === undefined) {\n            return this.defaultStyle;\n        }\n\n        if (to?.type === undefined) {\n            const firstType = fromTypes.find((t) => this.types[t] !== undefined);\n            return { ...this.defaultStyle, ...this.types[firstType] };\n        }\n\n        const commonTypes = fromTypes.filter((t) => toTypes.includes(t));\n        if (Array.isArray(commonTypes) && commonTypes.length > 1) {\n            return this.defaultStyle;\n        }\n\n        const firstType = commonTypes.find((t) => this.types[t] !== undefined);\n        return { ...this.defaultStyle, ...this.types[firstType] };\n    }\n\n    /**\n     * Function that reads all nodes in the specification and creates `NodeInterfaceType` objects\n     * for their inputs' and outputs' types so that a simple validation based on those\n     * types can be performed.\n     *\n     * The read interface types are stored in `interfaceTypes` object which is returned by\n     * this function\n     * @param {*} metadata metadata containing information about styling\n     * @returns read interface types\n     */\n    readInterfaceTypes(metadata) {\n        this.types = {};\n        if (metadata?.interfaces) {\n            Object.entries(metadata.interfaces).forEach(([type, io]) => {\n                this.types[type] = { ...io, name: type };\n            });\n        }\n    }\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Handles calculation of a SVG path a connection should have based on it's characteristic\n * (for example loopback) and style. It is handled by `ConnectionRenderer`, which\n * deals with saving the style user has chosen and delegating away the calculation to\n * suitable renderer\n */\n\n/* eslint-disable max-classes-per-file */\n\n/**\n * Used for loopback connections, calculates the y coordinate of a bottom point of a node\n * based on it's DOM element. If the element does not yet exists, returns 0\n *\n * @param connection BaklavaJS-defined connection\n * @param scaling number from viewModel defining the scaling of canvas\n * @param panning (x, y) point from viewModel defining the translation of canvas\n * @returns Y coordinate of a bottom of a node, adjusted for canvas transformation\n */\nfunction nodeBottomPoint(connection, scaling, panning) {\n    const { nodeId } = connection.from;\n    const nodeHtml = document.getElementById(nodeId);\n    const nodeBottom = nodeHtml ? nodeHtml.offsetTop + nodeHtml.offsetHeight : 0;\n    return (nodeBottom + panning.y) * scaling;\n}\n\n/**\n * Utility function that calculates the x and y radius of an ellipse given center point and\n * a slope at a specified point\n *\n * @param x X coordinate of a point on an ellipse\n * @param y Y coordinate of a point on an ellipse\n * @param cx X coordinate of a center point\n * @param cy Y coordinate of a center point\n * @param slope dy/dx value on a (x, y) point\n * @returns Array of two elements: radius parallel to x axis and y axis respectively\n */\nfunction calculateEllipseR(x, y, cx, cy, slope) {\n    const rx = Math.sqrt(Math.abs((x - cx) * (x - cx) + ((x - cx) * (y - cy)) / slope));\n    const ry = Math.sqrt(Math.abs((y - cy) * (y - cy) + (y - cy) * (x - cx) * slope));\n    return [rx, ry];\n}\n\nclass NormalizedConnection {\n    /**\n     * Class that makes sure that the connection is in correct order, which means that from and to\n     * sockets and their coordinates are properly set.\n     */\n    constructor(x1, y1, x2, y2, connection) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.from = connection.from;\n        if (connection.to) {\n            this.to = connection.to;\n            if (\n                (this.from.direction === 'input' && this.to.direction === 'output') ||\n                (this.from.direction === 'input' && this.to.direction === 'inout') ||\n                (this.from.direction === 'inout' && this.to.direction === 'output')\n            ) {\n                [this.x1, this.x2, this.y1, this.y2] = [this.x2, this.x1, this.y2, this.y1];\n                [this.from, this.to] = [this.to, this.from];\n            }\n        }\n    }\n}\n\nexport default class ConnectionRenderer {\n    style = 'curved';\n\n    viewModel = null;\n\n    randomizedOffset = false;\n\n    /**\n     * Defines the shift the connection should have compared to the default position based on the\n     * index of the `from` interface and `to` interface bound to the connection in the nodes.\n     * It allows to make a visual distinction between connections going to different interfaces\n     * in the same node. The value of the shift is constant distance times the index of an\n     * interface, adjusted for any canvas transformation\n     * This funnction is symmetrical.\n     *\n     * @param ncFrom from node reference\n     * @param ncTo to node reference\n     * @param graph the graph definition\n     * @param scaling number from viewModel defining the scaling of canvas\n     * @returns Value the connection should shift from it's default position\n     */\n    getShift(ncFrom, ncTo, graph, scaling) {\n        const shiftDistance = 15;\n        const fromNode = graph.findNodeById(ncFrom.nodeId);\n        const toNode = graph.findNodeById(ncTo.nodeId);\n\n        const fromPosition = ncFrom.sidePosition;\n        const toPosition = ncTo.sidePosition;\n\n        const shiftIndex = (fromPosition + toPosition) / 2;\n\n        if (this.randomizedOffset) {\n            const fromNodeNeighbours = [\n                ...Object.values(fromNode.inputs),\n                ...Object.values(fromNode.outputs),\n            ].filter((c) => c.side === ncFrom.side && c.port);\n            const toNodeNeighbours = [\n                ...Object.values(toNode.inputs),\n                ...Object.values(toNode.outputs),\n            ].filter((c) => c.side === ncTo.side && c.port);\n\n            // the string is a sum of utf16 representation of each character\n            const toRandomIndex =\n                [...ncTo.id].reduce((accumulator, char) => accumulator + char.charCodeAt(0), 0) ??\n                0;\n            const fromRandomIndex =\n                [...ncFrom.id].reduce((accumulator, char) => accumulator + char.charCodeAt(0), 0) ??\n                0;\n\n            const randomIndex =\n                (toRandomIndex ^ fromRandomIndex) % // eslint-disable-line no-bitwise\n                (fromNodeNeighbours.length + toNodeNeighbours.length);\n            return shiftDistance * (randomIndex + shiftIndex) * scaling;\n        }\n\n        return shiftDistance * shiftIndex * scaling;\n    }\n\n    /* eslint-disable class-methods-use-this */\n    curvedRender(x1, y1, x2, y2, connection) {\n        const nc = new NormalizedConnection(x1, y1, x2, y2, connection);\n        const dx = 0.3 * Math.abs(nc.x1 - nc.x2);\n\n        if (nc.to) {\n            if (nc.from.side === 'right' && nc.to.side === 'left') {\n                return `M ${nc.x1} ${nc.y1} C ${nc.x1 + dx} ${nc.y1}, ${nc.x2 - dx} ${nc.y2}, ${\n                    nc.x2\n                } ${nc.y2}`;\n            }\n            if (nc.from.side === 'left' && nc.to.side === 'right') {\n                return `M ${nc.x1} ${nc.y1} C ${nc.x1 - dx} ${nc.y1}, ${nc.x2 + dx} ${nc.y2}, ${\n                    nc.x2\n                } ${nc.y2}`;\n            }\n            if (nc.from.side === 'right' && nc.to.side === 'right') {\n                const rightmost = Math.max(nc.x1 + dx, nc.x2 + dx);\n                return `M ${nc.x1} ${nc.y1} C ${rightmost} ${nc.y1}, ${rightmost} ${nc.y2}, ${nc.x2} ${nc.y2}`;\n            }\n            if (nc.from.side === 'left' && nc.to.side === 'left') {\n                const leftmost = Math.min(nc.x1 - dx, nc.x2 - dx);\n                return `M ${nc.x1} ${nc.y1} C ${leftmost} ${nc.y1}, ${leftmost} ${nc.y2}, ${nc.x2} ${nc.y2}`;\n            }\n        }\n\n        if (nc.from.side === 'right') {\n            return `M ${nc.x1} ${nc.y1} C ${nc.x1 + dx} ${nc.y1}, ${nc.x2 - dx} ${nc.y2}, ${\n                nc.x2\n            } ${nc.y2}`;\n        }\n        if (nc.from.side === 'left') {\n            return `M ${nc.x1} ${nc.y1} C ${nc.x1 - dx} ${nc.y1}, ${nc.x2 + dx} ${nc.y2}, ${\n                nc.x2\n            } ${nc.y2}`;\n        }\n\n        // unreachable, added to make eslint happy\n        return undefined;\n    }\n\n    curvedRenderLoopback(x1, y1, x2, y2, connection) {\n        const graph = this.viewModel.displayedGraph;\n        const nc = new NormalizedConnection(x1, y1, x2, y2, connection);\n        const sideMargin = 10 * graph.scaling;\n\n        if (nc.from.id === nc.to.id) {\n            // The same interface\n            const shift = this.getShift(nc.from, nc.to, graph, graph.scaling) + 30 * graph.scaling;\n            const x = nc.from.side === 'right' ? nc.x1 + shift : nc.x1 - shift;\n            return `M ${nc.x1} ${nc.y1}\n            A ${sideMargin} ${sideMargin / 2} 0 0 0 ${x} ${nc.y1}\n            A ${sideMargin} ${sideMargin / 2} 0 0 0 ${nc.x1} ${nc.y1}`;\n        }\n        if (nc.from.side === 'left' && nc.to.side === 'left') {\n            const leftRx = sideMargin;\n            const leftRy = Math.abs(nc.y1 - nc.y2) / 2;\n            const renderingSide = nc.y1 > nc.y2 ? 1 : 0;\n\n            return `M ${nc.x1} ${nc.y1}\n            A ${leftRx} ${leftRy} 0 0 ${renderingSide} ${nc.x2} ${nc.y2}`;\n        }\n        if (nc.from.side === 'right' && nc.to.side === 'right') {\n            const leftRx = sideMargin;\n            const leftRy = Math.abs(nc.y1 - nc.y2) / 2;\n            const renderingSide = nc.y1 > nc.y2 ? 0 : 1;\n\n            return `M ${nc.x1} ${nc.y1}\n            A ${leftRx} ${leftRy} 0 0 ${renderingSide} ${nc.x2} ${nc.y2}`;\n        }\n\n        const shift = this.getShift(nc.from, nc.to, graph, graph.scaling) + 30 * graph.scaling;\n\n        const leftx = nc.from.side === 'left' ? nc.x1 : nc.x2;\n        const rightx = nc.to.side === 'right' ? nc.x2 : nc.x1;\n\n        const lefty = nc.from.side === 'left' ? nc.y1 : nc.y2;\n        const righty = nc.to.side === 'right' ? nc.y2 : nc.y1;\n        const bottomY = nodeBottomPoint(connection, graph.scaling, graph.panning);\n\n        const y = bottomY + shift;\n\n        const rightCx = rightx - shift;\n        const rightCy = (y + righty) / 2;\n        const [rightRx, rightRy] = calculateEllipseR(rightx, y, rightCx, rightCy, 1);\n\n        const bottomCx = (rightx + leftx) / 2;\n        const bottomCy = bottomY;\n        const [bottomRx, bottomRy] = calculateEllipseR(rightx, y, bottomCx, bottomCy, 1);\n\n        const leftCx = leftx + shift;\n        const leftCy = (y + lefty) / 2;\n        const [leftRx, leftRy] = calculateEllipseR(leftx, y, leftCx, leftCy, -1);\n\n        return `M ${rightx} ${righty}\n        A ${rightRx} ${rightRy} 0 0 1 ${rightx} ${y}\n        A ${bottomRx} ${bottomRy} 0 0 1 ${leftx} ${y}\n        A ${leftRx} ${leftRy} 0 0 1 ${leftx} ${lefty}`;\n    }\n\n    orthogonalRender(x1, y1, x2, y2, connection) {\n        const graph = this.viewModel.displayedGraph;\n        const nc = new NormalizedConnection(x1, y1, x2, y2, connection);\n\n        if (connection.anchors !== undefined && connection.anchors.length) {\n            const anchors = connection.anchors.map((anchor) => {\n                const transform = (a) => {\n                    const tx = (a.x + graph.panning.x) * graph.scaling;\n                    const ty = (a.y + graph.panning.y) * graph.scaling;\n                    return { x: tx, y: ty };\n                };\n\n                return transform(anchor);\n            });\n\n            const path = [{ x: nc.x1, y: nc.y1 }];\n            let direction = nc.from.side;\n            if (direction === 'right') {\n                path.push({ x: nc.x1 + 10, y: nc.y1 });\n            } else if (direction === 'left') {\n                path.push({ x: nc.x1 - 10, y: nc.y1 });\n            }\n            direction = 'horizontal';\n            anchors.forEach((anchor) => {\n                if (direction === 'vertical') {\n                    path.push({\n                        x: path[path.length - 1].x + (anchor.x - path[path.length - 1].x) / 2,\n                        y: path[path.length - 1].y,\n                    });\n                    path.push({\n                        x: path[path.length - 2].x + (anchor.x - path[path.length - 2].x) / 2,\n                        y: anchor.y,\n                    });\n                    path.push({\n                        x: anchor.x,\n                        y: anchor.y,\n                    });\n                    direction = 'horizontal';\n                } else {\n                    path.push({\n                        x: path[path.length - 1].x,\n                        y: path[path.length - 1].y + (anchor.y - path[path.length - 1].y) / 2,\n                    });\n                    path.push({\n                        x: anchor.x,\n                        y: path[path.length - 2].y + (anchor.y - path[path.length - 2].y) / 2,\n                    });\n                    path.push({\n                        x: anchor.x,\n                        y: anchor.y,\n                    });\n                    direction = 'vertical';\n                }\n            });\n            if (direction === 'vertical') {\n                path.push({\n                    x: path[path.length - 1].x + (nc.x2 - path[path.length - 1].x) / 2,\n                    y: path[path.length - 1].y,\n                });\n                path.push({\n                    x: path[path.length - 2].x + (nc.x2 - path[path.length - 2].x) / 2,\n                    y: nc.y2,\n                });\n                path.push({\n                    x: nc.x2,\n                    y: nc.y2,\n                });\n            } else {\n                path.push({\n                    x: path[path.length - 1].x,\n                    y: path[path.length - 1].y + (nc.y2 - path[path.length - 1].y) / 2,\n                });\n                let offset = 0;\n                if (nc.to.side === 'left') offset = 10;\n                else offset = -10;\n                path.push({\n                    x: nc.x2 - offset,\n                    y: path[path.length - 2].y + (nc.y2 - path[path.length - 2].y) / 2,\n                });\n                path.push({\n                    x: nc.x2 - offset,\n                    y: nc.y2,\n                });\n                path.push({\n                    x: nc.x2,\n                    y: nc.y2,\n                });\n            }\n            return path;\n        }\n\n        const minMargin = 30 * graph.scaling;\n        const middlePoint = (nc.x1 + nc.x2) / 2;\n\n        if (connection.to) {\n            const shift = this.getShift(nc.from, nc.to, graph, graph.scaling);\n\n            if (nc.from.side === 'right' && nc.to.side === 'left') {\n                const mid = Math.max(nc.x1, middlePoint) + shift + minMargin;\n\n                const firstTurn = mid < nc.x2 - shift - minMargin ? nc.x1 + shift + minMargin : mid;\n                const lastTurn = nc.x2 - shift - minMargin;\n\n                // S connection\n                if (\n                    mid >= nc.x2 - shift - minMargin &&\n                    (firstTurn > nc.x2 - minMargin || lastTurn < nc.x1 - minMargin)\n                ) {\n                    return `M ${nc.x1} ${nc.y1}\n                    H ${firstTurn}\n                    V ${(nc.y1 + nc.y2) / 2}\n                    H ${lastTurn}\n                    V ${nc.y2}\n                    H ${nc.x2}`;\n                }\n\n                // Z connection\n                return `M ${nc.x1} ${nc.y1} H ${mid} V ${nc.y2} H ${nc.x2}`;\n            }\n            if (nc.from.side === 'left' && nc.to.side === 'right') {\n                const mid = Math.max(nc.x2, middlePoint) + shift + minMargin;\n\n                const firstTurn = mid < nc.x1 - shift - minMargin ? nc.x2 + shift + minMargin : mid;\n                const lastTurn = nc.x1 - shift - minMargin;\n\n                // S connection\n                if (\n                    mid >= nc.x1 - shift - minMargin &&\n                    (firstTurn > nc.x1 - minMargin || lastTurn < nc.x2 - minMargin)\n                ) {\n                    return `M ${nc.x2} ${nc.y2}\n                    H ${firstTurn}\n                    V ${(nc.y1 + nc.y2) / 2}\n                    H ${lastTurn}\n                    V ${nc.y1}\n                    H ${nc.x1}`;\n                }\n\n                // Z connection\n                return `M ${nc.x2} ${nc.y2} H ${mid} V ${nc.y1} H ${nc.x1}`;\n            }\n            if (nc.from.side === 'right' && nc.to.side === 'right') {\n                return `M ${nc.x1} ${nc.y1} H ${\n                    Math.max(nc.x1, nc.x2, middlePoint) + shift + minMargin\n                } V ${nc.y2} H ${nc.x2}`;\n            }\n            if (nc.from.side === 'left' && nc.to.side === 'left') {\n                return `M ${nc.x1} ${nc.y1} H ${\n                    Math.min(nc.x1, nc.x2, middlePoint) - shift - minMargin\n                } V ${nc.y2} H ${nc.x2}`;\n            }\n        }\n        return `M ${nc.x1} ${nc.y1} H ${middlePoint} V ${nc.y2} H ${nc.x2}`;\n    }\n\n    orthogonalRenderLoopback(x1, y1, x2, y2, connection) {\n        const graph = this.viewModel.displayedGraph;\n        const nc = new NormalizedConnection(x1, y1, x2, y2, connection);\n        const shift = this.getShift(nc.from, nc.to, graph, graph.scaling) + 30 * graph.scaling;\n\n        if (connection.anchors !== undefined && connection.anchors.length) {\n            const anchors = connection.anchors.map((a) => {\n                const tx = (a.x + graph.panning.x) * graph.scaling;\n                const ty = (a.y + graph.panning.y) * graph.scaling;\n                return { x: tx, y: ty };\n            });\n\n            const path = [{ x: nc.x1, y: nc.y1 }];\n            const direction = nc.from.side;\n            const xShift = direction === 'right' ? shift : -shift;\n            path.push({ x: nc.x1 + xShift, y: nc.y1 });\n            anchors.forEach((anchor) => {\n                path.push({\n                    x: path[path.length - 1].x,\n                    y: anchor.y,\n                });\n                path.push({\n                    x: anchor.x,\n                    y: anchor.y,\n                });\n                // NOTE: Duplicate path is for proper anchor position calculation\n                path.push({\n                    x: anchor.x,\n                    y: anchor.y,\n                });\n            });\n            path.push({\n                x: path[path.length - 1].x,\n                y: nc.y2,\n            });\n            path.push({\n                x: nc.x2 + xShift,\n                y: nc.y2,\n            });\n            path.push({\n                x: nc.x2,\n                y: nc.y2,\n            });\n            return path;\n        }\n\n        const bottomY = nodeBottomPoint(connection, graph.scaling, graph.panning);\n        const y = bottomY + shift;\n\n        if (nc.from.side === 'right' && nc.to.side === 'left') {\n            return `M ${nc.x1} ${nc.y1}\n            h ${shift}\n            V ${y} H ${nc.x2 - shift} V ${nc.y2} H ${nc.x2}`;\n        }\n        if (nc.from.side === 'left' && nc.to.side === 'right') {\n            return `M ${nc.x2} ${nc.y2}\n            h ${shift}\n            V ${y} H ${nc.x1 - shift} V ${nc.y1} H ${nc.x1}`;\n        }\n        if (nc.from.side === 'right' && nc.to.side === 'right') {\n            return `M ${nc.x2} ${nc.y2}\n            h ${shift}\n            V ${nc.y1} H ${nc.x1}`;\n        }\n        if (nc.from.side === 'left' && nc.to.side === 'left') {\n            return `M ${nc.x2} ${nc.y2}\n            h ${-shift}\n            V ${nc.y1} H ${nc.x1}`;\n        }\n        // unreachable, added to make eslint happy\n        return undefined;\n    }\n\n    constructor(viewModel, style, randomizedOffset = false) {\n        this.viewModel = viewModel;\n        this.style = style;\n        this.randomizedOffset = randomizedOffset;\n    }\n\n    /**\n     * Chooses the render method based on active style and connection characteristic\n     *\n     * @param x1 X coordinate of from interface\n     * @param y1 Y coordinate of from interface\n     * @param x2 X coordinate of to interface\n     * @param y2 Y coordinate of to interface\n     * @param connection BaklavaJS-defined connection to render\n     * @returns String defining connection path in SVG format\n     */\n    render(x1, y1, x2, y2, connection) {\n        const loopback = this.isLoopback(connection) ? 'Loopback' : '';\n        return this[`${this.style}Render${loopback}`](x1, y1, x2, y2, connection);\n    }\n\n    /**\n     * Tests whether the connection is loopback (connects the node with itself)\n     *\n     * @param connection BaklavaJS-defined connection to test\n     * @returns True if connection is loopback.\n     */\n    isLoopback(connection) {\n        // Temporary connections that are not connected to any output (.to is undefined)\n        // are not loopback\n        return !!connection.to && connection.from.nodeId === connection.to.nodeId;\n    }\n}\n","/*\n * Copyright (c) 2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Class used to store the current specification and unresolved specification\n * of the current session.\n *\n * This class should be used as a singleton and should be accessed using the\n * getInstance() function.\n */\nimport { GRAPH_NODE_TYPE_PREFIX } from '@baklavajs/core';\n\nexport default class Specification {\n    static instance = undefined;\n\n    currentSpecification = undefined;\n\n    unresolvedSpecification = undefined;\n\n    constructor() {\n        if (Specification.instance !== undefined) {\n            throw new Error('Error - use Specification.getInstance()');\n        }\n    }\n\n    /**\n     * Static function used to get the instance of the Specification in a singleton manner.\n     * If there is no existing instance of the Specification then a new one is created.\n     *\n     * @returns Instance of Specification.\n     */\n    static getInstance() {\n        if (!Specification.instance) {\n            Specification.instance = new Specification();\n        }\n        return Specification.instance;\n    }\n\n    /**\n     * Searches the current specification for a node with the given name.\n     *\n     * @param nodeName name of the node that is to be found in the specification\n     * @returns the specification of the node if it exists, otherwise undefined\n     */\n    getNodeSpecification(nodeName) {\n        if (this.currentSpecification === undefined) return undefined;\n\n        if (nodeName.startsWith(GRAPH_NODE_TYPE_PREFIX)) {\n            return this.currentSpecification.graphs.find(\n                (n) => n.name === nodeName.slice(GRAPH_NODE_TYPE_PREFIX.length),\n            );\n        }\n\n        return this.currentSpecification.nodes.find(\n            (n) => n.name === nodeName,\n        );\n    }\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable max-classes-per-file */\nimport { stringify } from 'ajv';\nimport Ajv2019 from 'ajv/dist/2019.js';\nimport jsonMap from 'json-source-map';\nimport jsonlint from 'jsonlint';\n\nimport { useBaklava, useCommandHandler } from '@baklavajs/renderer-vue';\nimport { GRAPH_NODE_TYPE_PREFIX } from '@baklavajs/core';\nimport { toRaw, ref } from 'vue';\nimport { useHistory } from './History.ts';\nimport { useClipboard } from './Clipboard.ts';\n\nimport PipelineManagerEditor from '../custom/Editor.js';\nimport InterfaceTypes from './InterfaceTypes.js';\n\nimport { CustomNodeFactory, GraphFactory } from './NodeFactory.js';\nimport unresolvedSpecificationSchema from '../../../resources/schemas/unresolved_specification_schema.json' with {type: 'json'};\nimport specificationSchema from '../../../resources/schemas/specification_schema.json' with {type: 'json'};\nimport metadataSchema from '../../../resources/schemas/metadata_schema.json' with {type: 'json'};\nimport dataflowSchema from '../../../resources/schemas/dataflow_schema.json' with {type: 'json'};\nimport graphSchema from '../../../resources/schemas/graph_schema.json' with {type: 'json'};\nimport ConnectionRenderer from './ConnectionRenderer.js';\nimport Specification from './Specification.js';\n\n/* eslint-disable lines-between-class-members */\n/**\n * Readonly helper class that reads and stores default values from metadata schema.\n */\nclass Metadata {\n    constructor() {\n        Object.entries(metadataSchema.properties).forEach(([name, state]) => {\n            this[name] = state.default;\n        });\n    }\n}\n\n// If a graph node entry does not have a category assigned, this values is used\n// as a fallback category\nexport const DEFAULT_GRAPH_NODE_CATEGORY = 'Graphs';\nexport const DEFAULT_GRAPH_NODE_NAME = 'New Graph Node';\nexport const DEFAULT_GRAPH_NODE_TYPE = `${GRAPH_NODE_TYPE_PREFIX}${DEFAULT_GRAPH_NODE_NAME}`;\n\n/**\n * Translates the provided url according to\n * the optional substitution spec provided at compile time.\n *\n * @param loc the encoded URL location of the resource\n * @returns a translated URL\n */\nfunction parseLocation(loc) {\n    let relativeurl = '{}';\n    if (typeof document !== 'undefined') {\n        const urlparent = document.location.href.split('/').slice(0, -1).join('/');\n        relativeurl = `${urlparent}/{}`;\n    }\n    const defaultsubs = `{\"https\": \"https://{}\", \"http\": \"http://{}\", \"relative\": \"${relativeurl}\"}`;\n    const jsonsubs = process.env.VUE_APP_JSON_URL_SUBSTITUTES ?? defaultsubs;\n    const subs = JSON.parse(jsonsubs);\n    const parts = loc.split('//');\n\n    if (parts.length < 2) return undefined;\n\n    const key = parts[0].substring(0, parts[0].length - 1);\n    const specifiedUrl = parts.slice(1).join('');\n\n    if (!Object.keys(subs).includes(key)) return undefined;\n    return subs[key].replace('{}', specifiedUrl);\n}\n\n/**\n * Loads the JSON file from the remote location given in URL.\n *\n * @param customLocation the URL location of the resource\n * @returns a tuple of a boolean and a JSON object or an error message.\n * The boolean is true if the JSON was successfully loaded and parsed\n */\nexport async function loadJsonFromRemoteLocation(customLocation) {\n    const location = parseLocation(customLocation);\n    if (location === undefined) {\n        return [false, `Could not download the resource from:  ${customLocation}.`];\n    }\n    let fetchedContent;\n    try {\n        fetchedContent = await fetch(location, { mode: 'cors' });\n    } catch (error) {\n        return [false, error.message];\n    }\n    try {\n        const jsonContent = await fetchedContent.json();\n        return [true, jsonContent];\n    } catch (error) {\n        return [false, error.message];\n    }\n}\n\nexport default class EditorManager {\n    static instance;\n\n    defaultMetadata = new Metadata();\n\n    editor = new PipelineManagerEditor();\n\n    baklavaView = useBaklava(this.editor);\n\n    specificationLoaded = ref(false);\n\n    specification = Specification.getInstance();\n\n    updatedMetadata = {};\n\n    constructor() {\n        // Baklava's view registers subgraph input and output nodes\n        // This call un-registers them as obsolete\n        this.editor.unregisterNodes();\n\n        this.baklavaView.connectionRenderer = new ConnectionRenderer(\n            this.baklavaView,\n            this.defaultMetadata.connectionStyle,\n            this.defaultMetadata.randomizedOffset,\n        );\n\n        this.baklavaView.editor.layoutManager.useAlgorithm(this.defaultMetadata.layout);\n        this.baklavaView.interfaceTypes = new InterfaceTypes(this.baklavaView);\n\n        // need to be set here as settings try to use this value\n        // before this value can be loaded from specification\n        this.baklavaView.layers = this.defaultMetadata.layers;\n        this.baklavaView.collapseSidebar = this.defaultMetadata.collapseSidebar;\n        this.baklavaView.movementStep = this.defaultMetadata.movementStep;\n        this.baklavaView.editor.allowLoopbacks = this.defaultMetadata.allowLoopbacks;\n        this.baklavaView.navbarItems = this.defaultMetadata.navbarItems;\n        this.baklavaView.cache = {};\n        this.baklavaView.logLevel = this.defaultMetadata.logLevel;\n\n        this.specificationVersion = unresolvedSpecificationSchema.version;\n        this.baklavaView.commandHandler = useCommandHandler();\n        this.baklavaView.history = null;\n        this.baklavaView.history = useHistory(\n            toRaw(this.baklavaView).displayedGraph,\n            this.baklavaView.commandHandler,\n        );\n        this.baklavaView.clipboard = useClipboard(\n            toRaw(this.baklavaView).displayedGraph,\n            ref(this.baklavaView.editor),\n            this.baklavaView.commandHandler,\n        );\n    }\n\n    /**\n     * Loads the dataflow specification passed in `dataflowSpecification`.\n     * The specification describes what nodes are available in the editor.\n     *\n     * If the current editor already has a specification loaded then the editor\n     * and its plugins are reinitialized and then the specification is loaded.\n     *\n     * @param dataflowSpecification Specification to load, can be either an object or a string\n     * @param lazyLoad Decides whether to actually load the specification or just store\n     * it and check its versioning. Can be used when loading parts of specification manually.\n     * @returns An object consisting of errors and warnings arrays. If any array is empty\n     * the updating process was successful.\n     */\n    /* eslint-disable no-underscore-dangle,no-param-reassign */\n    async updateEditorSpecification(dataflowSpecification, lazyLoad = false) {\n        if (!dataflowSpecification) return ['No specification passed'];\n\n        if (typeof dataflowSpecification === 'string' || dataflowSpecification instanceof String) {\n            try {\n                dataflowSpecification = jsonlint.parse(dataflowSpecification);\n            } catch (error) {\n                return { errors: [error], warnings: [] };\n            }\n        }\n\n        if (this.specificationLoaded) {\n            this.clearEditorManagerState();\n        }\n\n        const warnings = [];\n        const errors = [];\n        const { version } = dataflowSpecification; // eslint-disable-line object-curly-newline,max-len\n        if (!this.specification.currentSpecification) {\n            if (version === undefined) {\n                warnings.push(\n                    `Loaded specification has no version assigned. Please update the specification to version ${this.specificationVersion}.`,\n                );\n            } else if (version !== this.specificationVersion) {\n                warnings.push(\n                    `The specification format version (${version}) differs from the current specification format version (${this.specificationVersion}). It may result in an unexpected behaviour.`,\n                );\n            }\n        }\n\n        this.specification.unresolvedSpecification = JSON.parse(JSON.stringify(\n            dataflowSpecification,\n        ));\n        this.specification.currentSpecification = dataflowSpecification;\n        if (!lazyLoad) {\n            // Preprocess includes\n            this.globalVisitedSpecs = new Set();\n            const {\n                specification: unresolvedSpecification, errors: includeErrors,\n            } = await this.downloadNestedImports(dataflowSpecification);\n            errors.push(...includeErrors);\n            if (errors.length) {\n                return { errors, warnings };\n            }\n\n            // Include graphs\n            if (unresolvedSpecification.includeGraphs !== undefined) {\n                const {\n                    graphs, errors: includeGraphsErrors,\n                } = await EditorManager.includeGraphs(unresolvedSpecification.includeGraphs);\n\n                errors.push(...includeGraphsErrors);\n                if (errors.length) {\n                    return { errors, warnings };\n                }\n\n                unresolvedSpecification.graphs = [\n                    ...(unresolvedSpecification.graphs ?? []),\n                    ...graphs,\n                ];\n            } else {\n                unresolvedSpecification.graphs ??= [];\n            }\n\n            // Update metadata\n            const { metadata } = unresolvedSpecification;\n            errors.push(...this.updateMetadata(metadata, false, true));\n            if (errors.length) {\n                return { errors, warnings };\n            }\n\n            // Update graph specification\n            const {\n                errors: newErrors, warnings: newWarnings,\n            } = await this.updateGraphSpecification(unresolvedSpecification);\n            errors.push(...newErrors);\n            warnings.push(...newWarnings);\n        }\n\n        if (errors.length === 0) {\n            this.specificationLoaded = true;\n        } else {\n            this.clearEditorManagerState();\n        }\n\n        return { errors, warnings };\n    }\n\n    clearEditorManagerState() {\n        this.baklavaView.editor.unregisterGraphs();\n        this.baklavaView.editor.deepCleanEditor();\n        this.baklavaView.editor.unregisterNodes();\n        this.specificationLoaded = false;\n        this.specification.currentSpecification = {};\n        this.specification.unresolvedSpecification = {};\n    }\n\n    /**\n     * Downloads nested imports from the specification and returns an object\n     * consisting of nodes, graphs, and errors arrays.\n     *\n     * @param specification Specification to load.\n     * @param trace Set of visited specifications to detect circular imports.\n     * @returns Merged specification and errors.\n     */\n    async downloadNestedImports(specification, trace = new Set()) {\n        const errors = [];\n\n        // Download specifications and verify for circular imports\n        const specificationAndTrace = [];\n        const currentImports = new Set();\n        const include = specification.include ?? [];\n        await Promise.all(include.map(async (specificationUrl) => {\n            if (currentImports.has(specificationUrl)) {\n                errors.push(`Specification is included multiple times, skipping ${specificationUrl}`);\n                return;\n            }\n            if (trace.has(specificationUrl)) {\n                errors.push(`Circular dependency detected in included specification ${specificationUrl}`);\n                return;\n            }\n            currentImports.add(specificationUrl);\n\n            if (!this.globalVisitedSpecs.has(specificationUrl)) {\n                this.globalVisitedSpecs.add(specificationUrl);\n                const [status, val] = await loadJsonFromRemoteLocation(specificationUrl);\n                if (status === false) {\n                    errors.push(`Could not load the included specification from ${specificationUrl}. Reason: ${val}`);\n                } else {\n                    specificationAndTrace.push(\n                        {\n                            specification: val,\n                            trace: new Set([...trace, specificationUrl]), // Detect circular imports\n                        },\n                    );\n                }\n            }\n        }));\n\n        if (errors.length) {\n            return { specification, errors };\n        }\n\n        // Download nested imports\n        await Promise.all(specificationAndTrace.map(\n            async ({ specification: spec, trace: specTrace },\n            ) => {\n                const {\n                    specification: newSpecification, errors: newErrors,\n                } = await this.downloadNestedImports(spec, specTrace);\n                errors.push(...newErrors);\n                specification = EditorManager.mergeObjects(specification, newSpecification);\n            }));\n        return { specification, errors };\n    }\n\n    /**\n     * Downloads included dataflows from the specification and converts them to the\n     * graphs format to be included into the specification.\n     *\n     * @param includeGraphs Array of included graphs\n     * @returns Array graphs and an array of errors that occurred during the process.\n     */\n    static async includeGraphs(includeGraphs) {\n        const errors = [];\n        const graphs = [];\n\n        if (includeGraphs.length === 0) {\n            return { graphs, errors };\n        } if (includeGraphs.length !== new Set(includeGraphs).size) {\n            errors.push('Duplicate subgraph includes detected. Aborting.');\n            return { graphs, errors };\n        }\n\n        const dataflows = [];\n        await Promise.all(includeGraphs.map(async (dataflow) => {\n            const [status, val] = await loadJsonFromRemoteLocation(dataflow.url);\n            if (status === false) {\n                errors.push(`Could not load the included dataflow from '${dataflow.url}'. Reason: ${val}`);\n                return;\n            }\n\n            dataflows.push(val);\n        }));\n\n        if (errors.length) return { graphs, errors };\n\n        for (let i = 0; i < includeGraphs.length; i += 1) {\n            const dataflow = dataflows[i];\n            const dataflowMetadata = includeGraphs[i];\n\n            if (dataflow.graphs.length !== 1) {\n                errors.push(`Only single graph dataflows are supported. Aborting loading subgraph include from ${dataflowMetadata.url}.`);\n                continue; // eslint-disable-line no-continue\n            }\n\n            const targetGraph = dataflow.graphs[0];\n            targetGraph.name = dataflowMetadata.name ?? targetGraph.name;\n\n            if (targetGraph.name === undefined) {\n                errors.push(`Included subgraph from ${dataflowMetadata.url} does not have a name defined.`);\n                continue; // eslint-disable-line no-continue\n            }\n\n            if (graphs.find((graph) => graph.name === targetGraph.name) !== undefined) {\n                errors.push(`Included graph from ${dataflowMetadata.url} has a duplicate name`);\n                continue; // eslint-disable-line no-continue\n            }\n\n            targetGraph.category = dataflowMetadata.category;\n            graphs.push(targetGraph);\n        }\n\n        return { graphs, errors };\n    }\n\n    /**\n     * Registers default nodes, that are always present in the editor.\n     * The default nodes are the graph node and the dynamic interfaces node.\n     * If the nodes are already present in the editor, an error is returned.\n     *\n     * @returns {object} Object consisting of errors and warnings arrays.\n     */\n    registerDefaultNodes() {\n        const errors = [];\n        const warnings = [];\n        // Adding a default graph node to the editor so that custom graphs can be created\n        if (this.editor.nodeTypes.has(DEFAULT_GRAPH_NODE_TYPE)) {\n            errors.push(\n                `Node name '${DEFAULT_GRAPH_NODE_NAME}' is reserved by the editor, ` +\n                'but it was included in the specification. ' +\n                'Please change the name of the graph node to avoid conflicts.',\n            );\n            return { errors, warnings };\n        }\n\n        const myGraph = GraphFactory(\n            [],\n            [],\n            DEFAULT_GRAPH_NODE_NAME,\n            this.baklavaView.editor,\n        );\n\n        // If `myGraph` is any array then it is an array of errors\n        if (Array.isArray(myGraph) && myGraph.length) {\n            errors.push(...myGraph);\n        } else {\n            this.baklavaView.editor.addGraphTemplate(\n                myGraph,\n                DEFAULT_GRAPH_NODE_CATEGORY,\n                DEFAULT_GRAPH_NODE_NAME,\n            );\n        }\n        return { errors, warnings };\n    }\n\n    /**\n     * Reads and validates part of specification related to nodes and graphs\n     * @param dataflowSpecification Specification to load\n     * @param includedGraphs Graphs included in the specification\n     * @returns An object consisting of errors and warnings arrays. If any array is empty\n     * the updating process was successful.\n     */\n    async updateGraphSpecification(dataflowSpecification) {\n        const warnings = [];\n\n        if (!dataflowSpecification) return { errors: ['No specification passed'], warnings };\n\n        const { nodes, graphs, metadata } = dataflowSpecification;\n\n        let resolvedNodes = [];\n\n        try {\n            const preprocessedNodes = this.preprocessNodes(nodes);\n            resolvedNodes = this.resolveInheritance(preprocessedNodes);\n        } catch (e) {\n            return { errors: [e.message], warnings };\n        }\n\n        const errors = [];\n        errors.push(...this.validateResolvedSpecification(\n            { graphs, nodes: resolvedNodes, metadata },\n        ));\n        if (errors.length) {\n            return { errors, warnings };\n        }\n\n        this.specification.currentSpecification.nodes = JSON.parse(JSON.stringify(resolvedNodes));\n        this.specification.currentSpecification.graphs = JSON.parse(JSON.stringify(graphs));\n\n        // Resolving siblings, parents and children\n\n        // Resolving children\n        resolvedNodes.forEach((node) => {\n            (node.extends ?? []).forEach((eName) => {\n                const extended = resolvedNodes.find((n) => n.name === eName);\n\n                // The extended node could be abstract, in which way it is not in resolved nodes.\n                if (extended !== undefined) {\n                    if (extended.extending === undefined) {\n                        extended.extending = [];\n                    }\n                    extended.extending.push(node.name);\n                }\n            });\n        });\n\n        // Resolving siblings\n        resolvedNodes.forEach((node) => {\n            const siblings = new Set();\n            (node.extends ?? []).forEach((eName) => {\n                const extended = resolvedNodes.find((n) => n.name === eName);\n\n                // The extended node could be abstract, in which way it is not in resolved nodes.\n                if (extended !== undefined) {\n                    extended.extending.forEach((e) => siblings.add(e));\n                }\n            });\n            siblings.delete(node.name);\n            node.siblings = Array.from(siblings);\n        });\n\n        // Removing abstract parents\n        resolvedNodes.forEach((node) => {\n            if (node.extends) {\n                node.extends = node.extends.filter(\n                    (eName) => (resolvedNodes.find((n) => n.name === eName) !== undefined),\n                );\n            }\n        });\n\n        resolvedNodes.forEach((node) => {\n            const myNode = CustomNodeFactory(\n                node.name,\n                node.layer,\n                node.interfaces ?? [],\n                node.properties ?? [],\n                node.interfaceGroups ?? [],\n                node.defaultInterfaceGroups ?? [],\n                metadata?.twoColumn ?? false,\n                node.description ?? '',\n                node.extends ?? [],\n                node.extending ?? [],\n                node.siblings ?? [],\n                node.width ?? 300,\n            );\n\n            // If my node is any array then it is an array of errors\n            if (Array.isArray(myNode) && myNode.length) {\n                errors.push(...myNode);\n                return;\n            }\n\n            this.baklavaView.editor.registerNodeType(myNode, {\n                title: node.name,\n                category: node.category,\n                isCategory: node.isCategory ?? false,\n            });\n            if ('icon' in node) {\n                if (typeof node.icon === 'string') {\n                    this.baklavaView.editor.nodeIcons.set(node.name, node.icon);\n                } else {\n                    const baseName = Object.keys(node.icon)[0];\n                    const suffix = Object.values(node.icon)[0];\n                    const baseUrl = this.baklavaView.editor.baseIconUrls.get(baseName);\n                    this.baklavaView.editor.nodeIcons.set(node.name, `${baseUrl}/${suffix}`);\n                }\n            }\n            if ('urls' in node) {\n                Object.entries(node.urls).forEach(([urlName, url]) => {\n                    if (!this.baklavaView.editor.nodeURLs.has(node.name)) {\n                        this.baklavaView.editor.nodeURLs.set(node.name, {});\n                    }\n                    this.baklavaView.editor.nodeURLs.get(node.name)[urlName] = url;\n                });\n            }\n        });\n\n        if (errors.length) {\n            return { errors, warnings };\n        }\n\n        if (graphs !== undefined) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const graph of graphs) {\n                const myGraph = GraphFactory(\n                    graph.nodes,\n                    graph.connections,\n                    graph.name,\n                    this.baklavaView.editor,\n                );\n\n                // If `myGraph` is any array then it is an array of errors\n                if (Array.isArray(myGraph) && myGraph.length) {\n                    errors.push(...myGraph);\n                    continue; // eslint-disable-line no-continue\n                }\n\n                this.baklavaView.editor.addGraphTemplate(\n                    myGraph,\n                    graph.category ?? DEFAULT_GRAPH_NODE_CATEGORY,\n                    graph.name,\n                );\n\n                // Category is not needed when loading a dataflow\n                const graphToValidate = JSON.parse(JSON.stringify(graph));\n                if (Object.prototype.hasOwnProperty.call(graphToValidate, 'category')) {\n                    delete graphToValidate.category;\n                }\n\n                // Validating the graph after it is registered to see if there are any errors\n                // by loading a single graph dataflow\n\n                const {\n                    errors: loadingErrors,\n                    warnings: loadingWarnings,\n                } = await this.loadDataflow({ // eslint-disable-line no-await-in-loop\n                    graphs: [graphToValidate],\n                    version: dataflowSpecification.version,\n                }, true, true);\n\n                // Cleaning the editor after loading the dataflow\n                this.baklavaView.editor.deepCleanEditor();\n                this.baklavaView.editor.unregisterGraphs();\n\n                warnings.push(\n                    ...loadingWarnings.map((warning) => `Graph '${graph.name}' is invalid: ${warning}`),\n                );\n\n                errors.push(\n                    ...loadingErrors.map((error) => `Graph '${graph.name}' is invalid: ${error}`));\n            }\n        }\n\n        // Removing duplicate warnings\n        const uniqueWarnings = [...new Set(warnings)];\n\n        // Registering default categories\n        const { errors: defaultErrors, warnings: defaultWarnings } = this.registerDefaultNodes();\n        errors.push(...defaultErrors);\n        uniqueWarnings.push(...defaultWarnings);\n\n        return { errors, warnings: uniqueWarnings };\n    }\n\n    /**\n     * Preprocess nodes to be later passed to `resolveInheritance` function.\n     *\n     * @param nodes coming from specification.\n     * @throws Error if a category node has a name different than the last part of its category.\n     */\n    preprocessNodes(nodes) { // eslint-disable-line class-methods-use-this\n        nodes.forEach((node) => {\n            if (node.isCategory) {\n                const name = node.category.split('/').at(-1);\n                if (node.name !== undefined && node.name !== name) {\n                    throw new Error(`Node '${node.name}' is a category node and has a name defined different than ${name}`);\n                }\n                node.name = name;\n            }\n        });\n        return nodes;\n    }\n\n    /**\n     * Reads and validates metadata from specification and loads it into the editor.\n     * if no metadata is passed it uses a stored specification.\n     *\n     * @param metadata metadata to load\n     * @param overriding tells whether the metadata is updated on dataflow loading\n     * @param loading resets updated metadata, should be used when loading new dataflow\n     * @returns An array of errors that occurred during the metadata loading.\n     */\n    updateMetadata(metadata = undefined, overriding = false, loading = false) {\n        if (loading) this.updatedMetadata = {};\n        let newMetadata;\n        if (metadata !== undefined) {\n            metadata = { ...this.updatedMetadata, ...metadata };\n            newMetadata = JSON.parse(JSON.stringify(metadata));\n        }\n        if (metadata === undefined && this.specification.currentSpecification) {\n            metadata = this.specification.currentSpecification.metadata ?? {};\n        }\n\n        if (!metadata) return ['No specification to load provided.'];\n\n        if (overriding) {\n            // this.specification.currentSpecification?.metadata should not\n            // be over overridden, that is why it needs to be copied before merging\n            metadata = EditorManager.mergeObjects(\n                JSON.parse(JSON.stringify(\n                    this.specification.currentSpecification?.metadata ?? {},\n                )), metadata,\n            );\n        }\n\n        this.baklavaView.interfaceTypes.readInterfaceTypes(metadata);\n\n        if (metadata && 'urls' in metadata) {\n            Object.entries(metadata.urls).forEach(([urlName, state]) => {\n                this.baklavaView.editor.baseURLs.set(urlName, state);\n            });\n        }\n\n        if (metadata && 'icons' in metadata) {\n            Object.entries(metadata.icons).forEach(([iconName, state]) => {\n                this.baklavaView.editor.baseIconUrls.set(iconName, state);\n            });\n        }\n\n        if (metadata && 'navbarItems' in metadata) {\n            this.baklavaView.navbarItems = JSON.parse(JSON.stringify(metadata.navbarItems));\n        }\n\n        this.baklavaView.editor.readonly = metadata?.readonly ?? this.defaultMetadata.readonly;\n        this.baklavaView.editor.hideHud = metadata?.hideHud ?? this.defaultMetadata.hideHud;\n\n        this.editor.allowLoopbacks =\n            metadata?.allowLoopbacks ?? this.defaultMetadata.allowLoopbacks;\n        this.baklavaView.twoColumn = metadata?.twoColumn ?? this.defaultMetadata.twoColumn;\n        this.baklavaView.connectionRenderer.style =\n            metadata?.connectionStyle ?? this.defaultMetadata.connectionStyle;\n\n        this.baklavaView.movementStep = metadata?.movementStep ?? this.defaultMetadata.movementStep;\n        this.baklavaView.settings.background.gridSize =\n            metadata?.backgroundSize ?? this.defaultMetadata.backgroundSize;\n        this.baklavaView.connectionRenderer.randomizedOffset =\n            metadata?.randomizedOffset ?? this.defaultMetadata.randomizedOffset;\n\n        this.baklavaView.ignoredLayers = new Set();\n        this.baklavaView.layers = metadata?.layers ?? this.defaultMetadata.layers;\n        this.baklavaView.collapseSidebar =\n            metadata?.collapseSidebar ?? this.defaultMetadata.collapseSidebar;\n        this.baklavaView.editor.layoutManager.useAlgorithm(\n            metadata?.layout ?? this.defaultMetadata.layout,\n        );\n        this.baklavaView.logLevel = metadata?.logLevel ?? this.defaultMetadata.logLevel;\n        if (newMetadata) this.updatedMetadata = newMetadata;\n\n        return [];\n    }\n\n    /**\n     * Given nodes resolves their inheritances and returns and array of nodes that are ready\n     * to be loaded by the editor.\n     *\n     * @param nodes\n     * @returns nodes with resolved inheritances\n     */\n    /* eslint-disable class-methods-use-this,no-param-reassign */\n    resolveInheritance(nodes) {\n        const unsortedNodes = JSON.parse(JSON.stringify(nodes));\n\n        const isObject = (obj) => typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n        const isArray = (obj) => Array.isArray(obj);\n\n        // Helper function that applies base node properties to the child node\n        const mergeNodes = (child, base) => {\n            const output = { ...structuredClone(base) };\n            const nonInheritableKeys = ['abstract', 'isCategory'];\n\n            nonInheritableKeys.forEach((key) => {\n                delete output[key];\n            });\n\n            if (isObject(child) && isObject(base)) {\n                Object.keys(child).forEach((key) => {\n                    if (isObject(child[key])) {\n                        if (!(key in output)) {\n                            output[key] = child[key];\n                        } else {\n                            output[key] = mergeNodes(child[key], base[key]);\n                        }\n                    } else if (isArray(child[key]) && isArray(base[key])) {\n                        if (key === 'extends') {\n                            output[key] = child[key];\n                        } else {\n                            const baseNames = Object.fromEntries(\n                                base[key].map((obj, i) => [obj.name, i]),\n                            );\n                            child[key].forEach((obj) => {\n                                if (obj.name && obj.name in baseNames) {\n                                    const index = baseNames[obj.name];\n                                    if (obj.override) {\n                                        output[key][index] = {\n                                            ...base[key][index],\n                                            ...obj,\n                                        };\n                                        delete output[key][index].override;\n                                    } else {\n                                        throw new Error(`'${child.name}' node cannot override '${obj.name}' property of '${base.name}' node`);\n                                    }\n                                } else {\n                                    output[key].push(obj);\n                                }\n                            });\n                        }\n                    } else {\n                        output[key] = child[key];\n                    }\n                });\n            }\n            return output;\n        };\n\n        const resolvedNodes = {};\n        const recurrentMerge = (name) => {\n            // Node resolved\n            if (name in resolvedNodes) return resolvedNodes[name];\n            let node = nodes.find((n) => n.name === name);\n            // Node does not inherite anything\n            if (!node.extends) {\n                resolvedNodes[name] = node;\n                return node;\n            }\n            // Check if extends has unique values\n            if ((new Set(node.extends)).size !== node.extends.length) {\n                throw new Error(`Repeated class in \"extends\" list of \"${node.name}\" node`);\n            }\n            // Get base nodes and merge them\n            let base;\n            node.extends.forEach((baseName) => {\n                base = recurrentMerge(baseName);\n                node = mergeNodes(node, base);\n            });\n            resolvedNodes[name] = node;\n            return node;\n        };\n        // Filter out abstract nodes and get merged ones\n        const mergedNodes = unsortedNodes.filter(\n            (node) => !node.abstract,\n        ).map((node) => recurrentMerge(node.name));\n\n        return mergedNodes;\n    }\n\n    /**\n     * Serializes and returns current specification in Pipeline Manager format.\n     *\n     * @returns Serialized specification.\n     */\n    saveSpecification() {\n        return JSON.parse(JSON.stringify(this.specification.unresolvedSpecification));\n    }\n\n    /**\n     * Serializes and returns current dataflow in Pipeline Manager format.\n     *\n     * @param readonly whether the dataflow should be saved in readonly mode\n     * @param hideHud whether the dataflow should be saved in hideHud mode\n     * @param position whether the dataflow should store panning and scaling values\n     * @param graphname graph name which is rendered to the user\n     *\n     * @returns Serialized dataflow.\n     */\n    saveDataflow(readonly, hideHud, position) {\n        const save = this.baklavaView.editor.save();\n        save.version = this.specificationVersion;\n\n        if (!position) {\n            save.graphs.forEach((graph) => {\n                delete graph.panning;\n                delete graph.scaling;\n            });\n        }\n\n        if (save.metadata === undefined) {\n            save.metadata = {};\n        }\n\n        [\n            [readonly, 'readonly'],\n            [hideHud, 'hideHud'],\n            [this.editor.allowLoopbacks, 'allowLoopbacks'],\n            [this.baklavaView.twoColumn, 'twoColumn'],\n            [this.baklavaView.connectionRenderer.style, 'connectionStyle'],\n            [this.baklavaView.movementStep, 'movementStep'],\n            [this.baklavaView.settings.background.gridSize, 'backgroundSize'],\n            [this.baklavaView.connectionRenderer.randomizedOffset, 'randomizedOffset'],\n        ].forEach(([currVal, name]) => {\n            const m = this.specification.currentSpecification?.metadata ?? {};\n            const dm = this.defaultMetadata;\n\n            if (currVal !== (m[name] ?? dm[name])) {\n                save.metadata[name] = currVal;\n            }\n        });\n\n        if (Object.keys(save.metadata).length === 0) {\n            delete save.metadata;\n        }\n\n        return save;\n    }\n\n    /**\n     * Loads the dataflow passed in `dataflow` and renders it.\n     * If the dataflow is not compatible with the currently loaded specification or is not\n     * in the dataflow format, then some of the dataflow may be not loaded and an\n     * error is returned. Dataflow should be passed in PipelineManager format (translation\n     * to Baklava format is done )\n     *\n     * @param dataflow Dataflow to load. Can be either an object or a string\n     * @param preventCentering Boolean Blocks view in the same spot.\n     * @param loadOnly determines whether to load the graph only without adjusting\n     * the graph rendering. Can be used when validating graphs without their browser\n     * representation.\n     * @returns An array of errors that occurred during the dataflow loading.\n     * If the array is empty, the loading was successful.\n     */\n    async loadDataflow(dataflow, preventCentering = false, loadOnly = false) {\n        let { notifyWhenChanged } = this;\n        // Turn off notification during dataflow loading\n        this.updateMetadata({ notifyWhenChanged: false }, true, true);\n        try {\n            const validationErrors = EditorManager.validateDataflow(dataflow);\n            if (validationErrors.length) {\n                return { errors: validationErrors, warnings: [] };\n            }\n\n            try {\n                if (typeof dataflow === 'string' || dataflow instanceof String) {\n                    dataflow = jsonlint.parse(dataflow);\n                }\n\n                const specificationVersion = dataflow.version;\n                const warnings = [];\n                if (specificationVersion === undefined) {\n                    warnings.push(\n                        `Current format specification version is ${this.specificationVersion}. It may result in an unexpected behaviour`,\n                    );\n                } else if (specificationVersion !== this.specificationVersion) {\n                    warnings.push(\n                        `Dataflow format specification version (${specificationVersion}) differs from the current format specification version (${this.specificationVersion}). It may result in unexpected behaviour.`,\n                    );\n                }\n\n                if ('metadata' in dataflow && this.specification.currentSpecification !== undefined) {\n                    const errors = EditorManager.validateMetadata(dataflow.metadata);\n                    if (Array.isArray(errors) && errors.length) {\n                        return { errors, warnings };\n                    }\n                    notifyWhenChanged = dataflow.metadata.notifyWhenChanged ?? notifyWhenChanged;\n\n                    this.updateMetadata(\n                        { ...dataflow.metadata, notifyWhenChanged: false },\n                        true,\n                        true,\n                    );\n                }\n                if (this.baklavaView.displayedGraph !== undefined) {\n                    // Delete baklava internal history listeners\n                    this.baklavaView.history.unsubscribeFromGraphEvents(\n                        this.baklavaView.displayedGraph,\n                        Symbol('HistoryToken'),\n                    );\n                }\n                const errors = {\n                    errors: await this.baklavaView.editor.load(\n                        dataflow,\n                        preventCentering,\n                        loadOnly,\n                    ),\n                    warnings,\n                };\n                this.baklavaView.history.graphSwitch(\n                    this.baklavaView.displayedGraph,\n                    this.baklavaView.displayedGraph,\n                );\n                return errors;\n            } catch (err) {\n                return {\n                    errors: [\n                        'Unrecognized format. Make sure that the passed dataflow is correct.',\n                        err.toString(),\n                    ],\n                    warnings: [],\n                };\n            }\n        } finally {\n            // Restore previous state or use value from loaded dataflow\n            this.updateMetadata({ notifyWhenChanged }, true);\n        }\n    }\n\n    /**\n     * Static function used to get the instance of the EditorManager in a singleton manner.\n     * If there is no existing instance of the EditorManager then a new one is created.\n     *\n     * @returns Instance of EditorManager.\n     */\n    static getEditorManagerInstance() {\n        if (!EditorManager.instance) {\n            EditorManager.instance = new EditorManager();\n        }\n        return EditorManager.instance;\n    }\n\n    /**\n     * Static helper function to merge two object instances into a single.\n     * The following rules are applied:\n     * - If the property is an array then it is concatenated\n     * - If the property is an object then it is merged with preference to the first object\n     * - If the property is a simple type then it is overwritten with the first object\n     * - On type mismatch (array/object), the first object is used\n     *\n     * @param primaryObject First object to merge\n     * @param secondaryObject Second object to merge\n     * @returns Primary object with merged properties from the secondary object\n     */\n    static mergeObjects(primaryObject, secondaryObject) {\n        // Check if any of the object is undefined\n        secondaryObject = secondaryObject ?? {};\n        if (primaryObject === undefined || Object.keys(primaryObject).length === 0) {\n            return secondaryObject;\n        }\n\n        // Merge object\n        Object.entries(secondaryObject).forEach(([key, value]) => {\n            if (Array.isArray(value) && Array.isArray(primaryObject[key])) {\n                primaryObject[key].push(...value);\n            } else if (typeof value === 'object' && typeof primaryObject[key] === 'object') {\n                // For example, metadata is an object and it has to be merged instead of overwritten\n                primaryObject[key] = EditorManager.mergeObjects(primaryObject[key], value);\n            } else {\n                primaryObject[key] = value;\n            }\n        });\n        return primaryObject;\n    }\n\n    /**\n     * Validates JSON data using given JSON schema. If passed `data` is a string that represents\n     * text of specification file then more information about potential errors - like the exact\n     * line of error - is returned.\n     *\n     * @param data Specification file to validate. Can be either a parsed JSON object\n     * or a textual file\n     * @param schema Schema to use\n     * @param additionalAjvOptions Additional options to pass to the Ajv constructor\n     * @returns An array of errors. If the array is empty, the validation was successful.\n     */\n    static validateJSONWithSchema(data, schema, additionalAjvOptions = {}) {\n        const ajv = new Ajv2019({\n            allowUnionTypes: true,\n            formats: {\n                hex: /^0x[a-fA-F0-9]+$/,\n            },\n            schemas: [\n                unresolvedSpecificationSchema,\n                specificationSchema,\n                metadataSchema,\n                dataflowSchema,\n                graphSchema,\n            ],\n            ...additionalAjvOptions,\n        });\n        ajv.addKeyword('version');\n\n        const validate = ajv.compile(schema);\n        const isTextFormat = typeof data === 'string' || data instanceof String;\n        let dataJSON;\n\n        try {\n            dataJSON = isTextFormat ? jsonlint.parse(data) : data;\n        } catch (exception) {\n            return [`Not a proper JSON file: ${exception.toString()}`];\n        }\n\n        const valid = validate(dataJSON);\n\n        if (valid) {\n            return [];\n        }\n\n        // Parsing errors messages to a human readable string\n        const errors = validate.errors.map((error) => {\n            // It is assumed that the id of the schema is for example `dataflow_schema`\n            // Here a prefix is obtained\n            const nameOfEntity = schema.$id.split('_').slice(0, -1).join('_');\n            const path = `${nameOfEntity}${error.instancePath}`;\n            let errorPrefix = '';\n\n            if (isTextFormat) {\n                const result = jsonMap.parse(data);\n                // 1 is added as the lines are numbered from 0\n                const lineStart = result.pointers[error.instancePath].value.line + 1;\n                const lineEnd = result.pointers[error.instancePath].valueEnd.line + 1;\n\n                if (lineStart === lineEnd) {\n                    errorPrefix = `Line ${lineStart} -`;\n                } else {\n                    errorPrefix = `Lines ${lineStart}-${lineEnd} -`;\n                }\n            }\n\n            switch (error.keyword) {\n                case 'enum':\n                    return `${errorPrefix} ${path} ${error.message} - ${stringify(\n                        error.params.allowedValues,\n                    )}`;\n                case 'additionalProperties':\n                    return `${errorPrefix} ${path} ${error.message} - ${stringify(\n                        error.params.additionalProperty,\n                    )}`;\n                case 'const':\n                    return `${errorPrefix} ${path} ${error.message} - ${stringify(\n                        error.params.allowedValue,\n                    )}`;\n                case 'unevaluatedProperties':\n                    return `${errorPrefix} ${path} ${error.message} - ${stringify(\n                        error.params.unevaluatedProperty,\n                    )}}`;\n                // Those errors are not informative at all\n                case 'not':\n                case 'oneOf':\n                    return '';\n                default:\n                    return `${errorPrefix} ${path} ${error.message}`;\n            }\n        });\n\n        return errors.filter((err) => err !== '');\n    }\n\n    validateResolvedSpecification(specification) {\n        const validationErrors = EditorManager.validateSpecification(\n            specification, specificationSchema);\n        if (validationErrors.length) return validationErrors;\n\n        // Validating category nodes\n        const { nodes, graphs } = specification;\n        const categoryNodes = nodes.filter((node) => node.isCategory);\n        const definedCategories = {};\n\n        // Finding multiple category nodes defining the same category\n        const errors = [];\n        categoryNodes.forEach((node) => {\n            if (node.name in definedCategories) {\n                errors.push(`Category '${node.category}' has multiple nodes defining it.`);\n            } else {\n                definedCategories[node.name] = node.category.split('/').slice(0, -1).join('/');\n            }\n        });\n\n        // Nodes have to extend the first category node in their category path.\n        // For example, if we have two category nodes A and C and we have a node e\n        // which has a category 'A/b/C/d/e' then it has to extend C (and C has to extend A)\n        const nodeNames = new Set();\n        nodes.forEach((node) => {\n            const categories = node.category.split('/');\n\n            for (let i = categories.length - 1; i >= 0; i -= 1) {\n                const categoryNodeName = categories[i];\n                const remainingCategories = categories.slice(0, i).join('/');\n\n                if (\n                    categoryNodeName in definedCategories &&\n                    node.name !== categoryNodeName &&\n                    remainingCategories === definedCategories[categoryNodeName]\n                ) {\n                    if (node.extends === undefined || !node.extends.includes(categoryNodeName)) {\n                        errors.push(`Node '${node.name}' does not extend its category node '${categoryNodeName}'.`);\n                    }\n                    break;\n                }\n            }\n\n            // Nodes that extend from a category node have to be in their subtree i.e. have a common\n            // category prefix with the category node\n            for (let i = 0; i < (node.extends ?? []).length; i += 1) {\n                const extendedNode = node.extends[i];\n                if (extendedNode in definedCategories) {\n                    const commonPrefix = definedCategories[extendedNode] !== '' ?\n                        `${definedCategories[extendedNode]}/${extendedNode}` : extendedNode;\n\n                    if (!node.category.includes(commonPrefix)) {\n                        errors.push(\n                            `Node '${node.name}' extends from a category node '${extendedNode}' but is not in its category`,\n                        );\n                        break;\n                    }\n                }\n            }\n\n            // Finding multiple nodes with the same name\n            if (nodeNames.has(node.name)) {\n                errors.push(`Node '${node.name}' is defined multiple times`);\n            }\n            nodeNames.add(node.name);\n        });\n\n        if (graphs !== undefined) {\n            graphs.forEach((graph) => {\n                if (nodeNames.has(graph.name)) {\n                    errors.push(`Graph node name '${graph.name}' is defined multiple times`);\n                }\n                nodeNames.add(graph.name);\n            });\n        }\n        return errors;\n    }\n\n    /**\n     * Validates specification passed in `specification` using jsonSchema.\n     *\n     * @param specification Specification to validate\n     * @returns An array of errors. If the array is empty, the validation was successful.\n     */\n    static validateSpecification(specification, schema = unresolvedSpecificationSchema) {\n        return EditorManager.validateJSONWithSchema(specification, schema);\n    }\n\n    /**\n     * Validates metadata in JSON format using schema from unresolvedSpecificationSchema.\n     *\n     * @param jsonmetadata metadata in JSON format to validate\n     * @return An array of errors. If the array is empty, the validation was successful.\n     */\n    static validateMetadata(jsonmetadata) {\n        return EditorManager.validateJSONWithSchema(jsonmetadata, metadataSchema);\n    }\n\n    /**\n     * Validates metadata in JSON format using schema from dataflowSchema.\n     *\n     * @param dataflow dataflow in JSON format to validate\n     * @return An array of errors. If the array is empty, the validation was successful.\n     */\n    static validateDataflow(dataflow) {\n        return EditorManager.validateJSONWithSchema(dataflow, dataflowSchema);\n    }\n\n    /**\n     * Checks whether currently edited pipeline is one of the subgraphs\n     *\n     * @returns True if editor is editing subgraph instance, false otherwise\n     */\n    isInsideSubgraph() {\n        return this.baklavaView.displayedGraph !== this.baklavaView.editor.graph;\n    }\n\n    /**\n     * Switches the editor state to main graph\n     */\n    returnFromSubgraph() {\n        this.baklavaView.editor.backFromSubgraph(this.baklavaView.displayedGraph);\n    }\n\n    /**\n     * Updates name of currently displayed graph\n     */\n    updateSubgraphName(name) {\n        this.editor.updateCurrentSubgraphName(name);\n    }\n\n    get notifyWhenChanged() {\n        return this.updatedMetadata.notifyWhenChanged ??\n            this.specification.currentSpecification?.metadata?.notifyWhenChanged ??\n            this.defaultMetadata.notifyWhenChanged;\n    }\n}\n","/*\n * Copyright (c) 2022-2023 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable max-classes-per-file */\n/**\n * Base class allowing to define autolayout algorithms. Each engine\n * can specify multiple algorithms, names in `availableAlgorithms` array.\n * Currently chosen algorithm is named in `activeAlgorithm`\n */\nexport default class BaseLayoutEngine {\n    availableAlgorithms = [];\n\n    // Base layout is an abstract class\n    constructor() {\n        if (this.constructor === BaseLayoutEngine) {\n            throw new Error(\"Can't initialize base class instance\"); // eslint-disable-line quotes\n        }\n    }\n\n    chooseAlgorithm(algorithm) {\n        if (!this.availableAlgorithms.includes(algorithm)) {\n            throw new Error(\n                `Could not find ${algorithm} in ${this.constructor.name} engine.\n                Available algorithms: ${this.availableAlgorithms}`,\n            );\n        }\n        this.activeAlgorithm = algorithm;\n    }\n\n    /* eslint-disable class-methods-use-this */\n    /* eslint-disable no-unused-vars */\n    async calculate(graph) {\n        throw new Error('Method calculate() must be implemented by layout engine');\n    }\n}\n\n/**\n * Instance of engine with only single algorithm\n */\nexport class BaseLayoutAlgorithm extends BaseLayoutEngine {\n    constructor() {\n        super();\n        this.availableAlgorithms = [this.constructor.name];\n        this.activeAlgorithm = this.constructor.name;\n        this.chooseAlgorithm = undefined; // turn of choosing algorithm\n        if (this.constructor === BaseLayoutAlgorithm) {\n            throw new Error(\"Can't initialize base class instance\"); // eslint-disable-line quotes\n        }\n    }\n}\n","/*\n * Copyright (c) 2022-2023 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n *\n */\n\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport dagre from 'cytoscape-dagre';\n\nimport BaseLayoutEngine from './baseEngine.js';\n\ncytoscape.use(dagre);\ncytoscape.use(cola);\n\nexport default class CytoscapeLayoutEngine extends BaseLayoutEngine {\n    // The only cytoscape algorithm not defined here are 'null' (every node to\n    // (0, 0)) and 'preset' (every node to user defined position)\n    availableAlgorithms = [\n        'cola',\n        'dagre-network-simplex',\n        'dagre-tight-tree',\n        'dagre-longest-path',\n        'random',\n        'grid',\n        'circle',\n        'concentric',\n        'breadthfirst',\n        'cose',\n    ];\n\n    async calculate(graph) {\n        const cytoscapeGraph = cytoscape({\n            elements: {\n                nodes: graph.nodes.map((node) => ({\n                    data: { id: node.id, width: node.width, height: node.height },\n                })),\n                edges: graph.connections.map((connection) => ({\n                    data: { id: connection.id, source: connection.from, target: connection.to },\n                })),\n            },\n            style: [\n                {\n                    selector: 'node',\n                    style: {\n                        shape: 'rectangle',\n                        width: 'data(width)',\n                        height: 'data(height)',\n                    },\n                },\n            ],\n            styleEnabled: true,\n        });\n\n        const options = { name: this.activeAlgorithm };\n        /* eslint-disable no-unused-vars */\n        switch (this.activeAlgorithm) {\n            case 'random':\n                options.boundingBox = {\n                    x1: 0,\n                    y1: 0,\n                    w: 2000,\n                    h: 2000,\n                };\n                break;\n            case 'grid':\n                options.avoidOverlapPadding = 150;\n                break;\n            case 'cose':\n                options.nodeOverlap = 1000;\n                options.idealEdgeLength = (edge) => 300;\n                break;\n            case 'cola':\n                options.nodeSpacing = (node) => 150;\n                break;\n            case 'dagre-network-simplex':\n            case 'dagre-tight-tree':\n            case 'dagre-longest-path': {\n                const [name, ...ranker] = this.activeAlgorithm.split('-');\n                options.nodeSep = 50;\n                options.rankSep = 100;\n                options.ranker = ranker.join('-');\n                options.name = name;\n                break;\n            }\n            default:\n                break;\n        }\n        /* eslint-enable no-unused-vars */\n\n        const layout = cytoscapeGraph.layout(options);\n        layout.run();\n        if (['cose', 'cola'].includes(this.activeAlgorithm)) {\n            // wait until asynchronous algorithm finish calculations\n            await layout.promiseOn('layoutstop');\n        }\n        return {\n            ...graph,\n            nodes: cytoscapeGraph.nodes().map((node) => ({\n                id: node.id(),\n                // node.position defines the center of node but graph representation\n                // required coordinates of top left corner\n                position: {\n                    x: node.position().x - node.width() / 2,\n                    y: node.position().y - node.height() / 2,\n                },\n            })),\n        };\n    }\n}\n","/*\n * Copyright (c) 2022-2023 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BaseLayoutAlgorithm } from './baseEngine.js';\n\n/**\n * Default layout algorithm that puts all nodes into (0, 0) position\n */\nexport default class NoLayoutAlgorithm extends BaseLayoutAlgorithm {\n    /* eslint-disable class-methods-use-this */\n    availableAlgorithms = [\n        'NoLayout',\n    ];\n\n    activeAlgorithm = 'NoLayout';\n\n    calculate(graph) {\n        const nodes = graph.nodes.map((node) => ({\n            ...node,\n            position: { x: 0, y: 0 },\n        }));\n        return { ...graph, nodes };\n    }\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Module handles the autolayout calculations.\n * Defines intermediate graph representation, containing:\n * - nodes - list of nodes with properties:\n *   - id - unique id\n *   - width, height - node dimensions\n *   - position - position set after the calculations with the layout engine is done.\n * - connections - list of connections in a graph, each defines property:\n *   - id - unique id\n *   - from - id of the starting node\n *   - to - id of node at the end point\n *\n * Layout Manager contains list of registered layout engines. Layout engines are\n * requested by user in a specification. If no layout engine is set, the default option\n * (setting position to (0, 0)) is used\n */\n\nimport CytoscapeLayoutEngine from './layoutEngines/cytoscapeEngine.js';\nimport NoLayoutAlgorithm from './layoutEngines/noLayoutEngine.js';\n\n/* eslint-disable no-param-reassign */\nfunction dataflowToGraph(dataflow) {\n    const interfaceToNodeId = new Map();\n    dataflow.nodes.forEach((node) => {\n        node.interfaces.forEach((intf) => interfaceToNodeId.set(intf.id, node.id));\n    });\n\n    const nodes = dataflow.nodes\n        .filter((node) => node.position === undefined)\n        .map((node) => ({\n            id: node.id,\n        }));\n    const connections = dataflow.connections\n        .filter(\n            (connection) =>\n                nodes.filter((nodeState) => nodeState.id === interfaceToNodeId.get(connection.from))\n                    .length > 0 &&\n                nodes.filter((nodeState) => nodeState.id === interfaceToNodeId.get(connection.to))\n                    .length > 0,\n        )\n        .map((connection) => ({\n            id: connection.id,\n            from: interfaceToNodeId.get(connection.from),\n            to: interfaceToNodeId.get(connection.to),\n        }));\n    return { nodes, connections };\n}\n\nfunction graphToDataflow(graph, dataflow) {\n    const idToPosition = new Map();\n    graph.nodes.forEach((node) => idToPosition.set(node.id, node.position));\n    dataflow.nodes = dataflow.nodes.map((node) => ({\n        ...node,\n        position: idToPosition.has(node.id) ? idToPosition.get(node.id) : node.position,\n    }));\n    return dataflow;\n}\n\nexport default class LayoutManager {\n    layoutEngine = undefined;\n\n    usedAlgorithm = undefined;\n\n    graph = undefined;\n\n    // Default option when no layout algorithm is specified\n    // Currently it is possible to register it, when more layout algorithms\n    // are added it should be 1) automatically registered 2) not possible to\n    // choose in available algorithms\n    availableEngines = {\n        NoLayout: new NoLayoutAlgorithm(),\n        CytoscapeEngine: new CytoscapeLayoutEngine(),\n    };\n\n    constructor() {\n        this.useAlgorithm('NoLayout');\n    }\n\n    useAlgorithm(algorithm) {\n        const [engineName, algorithmName] = algorithm.split(' - ');\n        const layoutEngine = this.availableEngines[engineName];\n        if (layoutEngine === undefined) {\n            throw new Error(`Could not parse the ${algorithm} autolayout algorithm`);\n        }\n        this.layoutEngine = layoutEngine;\n        if (algorithmName !== undefined) {\n            this.layoutEngine.chooseAlgorithm(algorithmName);\n        }\n        this.usedAlgorithm = algorithm;\n    }\n\n    getAvailableAlgorithms() {\n        return Object.entries(this.availableEngines)\n            .map(([engineName, engine]) => {\n                if (engine.availableAlgorithms.length !== 1) {\n                    return engine.availableAlgorithms.map(\n                        (algorithm) => `${engineName} - ${algorithm}`,\n                    );\n                }\n                return engineName;\n            })\n            .flat();\n    }\n\n    registerGraph(dataflow) {\n        this.graph = dataflowToGraph(dataflow);\n    }\n\n    async computeLayout(dataflow) {\n        this.updateDimensions();\n        const layout = await this.runEngine(this.graph);\n        return graphToDataflow(layout, dataflow);\n    }\n\n    async runEngine(graph) {\n        return this.layoutEngine.calculate(graph);\n    }\n\n    updateDimensions() {\n        this.graph.nodes = this.graph.nodes.map((node) => {\n            const HTMLelement = document.getElementById(node.id);\n            return {\n                ...node,\n                width: HTMLelement.offsetWidth,\n                height: HTMLelement.offsetHeight,\n            };\n        });\n    }\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n    CheckboxInterface,\n    IntegerInterface,\n    NumberInterface,\n    SelectInterface,\n    TextInterface,\n} from '@baklavajs/renderer-vue';\n\nimport { GraphTemplate, NodeInterface, Node } from '@baklavajs/core';\n\nimport { updateInterfacePosition } from '../custom/CustomNode.js';\nimport {\n    applySidePositions,\n    parseInterfaces,\n    validateInterfaceGroups,\n    generateProperties,\n    DYNAMIC_INTERFACE_SUFFIX,\n} from './interfaceParser.js';\n\nimport InputInterface from '../interfaces/InputInterface.js';\nimport ListInterface from '../interfaces/ListInterface.js';\nimport SliderInterface from '../interfaces/SliderInterface.js';\nimport HexInterface from '../interfaces/HexInterface.js';\nimport { ir } from './interfaceRegistry.ts';\n\n/**\n * @param properties coming from the specification\n * @returns object that can be used to create properties or an array of errors\n * if any occurred.\n */\nfunction parseProperties(properties) {\n    const parsedProperties = {};\n    const usedNames = new Set();\n    const errors = [];\n\n    properties.forEach((prop) => {\n        if (prop.group !== undefined) {\n            const parsedGroup = parseProperties(prop.group);\n            if (Array.isArray(parsedGroup) && parsedGroup.length) {\n                errors.push(...parsedGroup);\n            }\n\n            Object.entries(parsedGroup).forEach(([pgroupname]) => {\n                if (usedNames.has(pgroupname)) {\n                    const realname = pgroupname.slice(pgroupname.indexOf('_') + 1);\n                    errors.push(\n                        `Property named '${realname}' in a group property '${prop.name}' is a duplicate.`,\n                    );\n                }\n                usedNames.add(pgroupname);\n            });\n\n            prop.group = parsedGroup; // eslint-disable-line no-param-reassign\n        }\n\n        if (usedNames.has(`property_${prop.name}`)) {\n            errors.push(\n                `Property named '${prop.name}' is a duplicate.`,\n            );\n        }\n\n        parsedProperties[`property_${prop.name}`] = { ...prop };\n        usedNames.add(`property_${prop.name}`);\n    });\n\n    if (errors.length) {\n        return errors;\n    }\n\n    return parsedProperties;\n}\n\n/**\n * @param properties that are validated and parsed\n * @returns created properties\n */\nfunction createProperties(properties) {\n    const getIntf = (p, hidden = false) => {\n        const propName = p.name;\n        const propType = p.type;\n        let propDef = p.default;\n        let intf;\n\n        switch (propType) {\n            case 'constant':\n                intf = new TextInterface(propName, propDef).setPort(false);\n                intf.componentName = 'TextInterface';\n                break;\n            case 'text':\n                intf = new InputInterface(propName, propDef).setPort(false);\n                intf.componentName = 'InputInterface';\n                break;\n            case 'number':\n                intf = new NumberInterface(propName, propDef, p.min, p.max).setPort(false);\n                intf.componentName = 'NumberInterface';\n                break;\n            case 'integer':\n                intf = new IntegerInterface(propName, propDef, p.min, p.max).setPort(false);\n                intf.componentName = 'IntegerInterface';\n                break;\n            case 'hex':\n                intf = new HexInterface(\n                    propName,\n                    propDef.toLowerCase(),\n                    p.min ? BigInt(p.min) : NaN,\n                    p.max ? BigInt(p.max) : NaN,\n                ).setPort(false);\n                intf.componentName = 'HexInterface';\n                break;\n            case 'select': {\n                const it = p.values.map((element) => element.toString());\n                intf = new SelectInterface(propName, propDef, it).setPort(false);\n                intf.componentName = 'SelectInterface';\n            } break;\n            case 'bool':\n                intf = new CheckboxInterface(propName, propDef).setPort(false);\n                intf.componentName = 'CheckboxInterface';\n                break;\n            case 'slider':\n                if (propDef === undefined) {\n                    propDef = p.min;\n                }\n                intf = new SliderInterface(propName, propDef, p.min, p.max, p.step).setPort(\n                    false,\n                );\n                intf.componentName = 'SliderInterface';\n                break;\n            case 'list':\n                if (propDef === null) {\n                    propDef = [];\n                }\n                intf = new ListInterface(propName, propDef, p.dtype).setPort(false);\n                intf.componentName = 'ListInterface';\n                break;\n            default:\n                /* eslint-disable no-console */\n                console.error(propType, ' input type is not recognized.');\n        }\n        if (intf !== undefined) {\n            intf.hidden = hidden;\n            intf.type = propType;\n\n            if (p.interfaceMaxConnectionsCount !== undefined) {\n                intf.interfaceMaxConnectionsCount = p.interfaceMaxConnectionsCount;\n            }\n\n            if (p.interfaceType !== undefined) {\n                intf.interfaceType = p.interfaceType;\n            }\n        }\n\n        return intf;\n    };\n\n    const tempProperties = {};\n\n    Object.entries(properties).forEach(([pname, p]) => {\n        if (p.group !== undefined) {\n            tempProperties[pname] = (() => {\n                const groupedProperty = getIntf(p);\n                groupedProperty.group = Object.keys(p.group);\n                return groupedProperty;\n            });\n            Object.entries(p.group).forEach(([pgroupname, pgroup]) => {\n                tempProperties[pgroupname] = () => getIntf(pgroup);\n            });\n        } else {\n            tempProperties[pname] = () => getIntf(p);\n        }\n    });\n    return tempProperties;\n}\n\n/**\n * Function performs sanity checking on parsed state before loading it\n * into the editor. It should throw explicit errors if any discrepancy is detected.\n *\n * @param parsedState that is passed to node to load\n * @param inputs inputs of the node\n * @param outputs outputs of the node\n * @returns list of errors.\n */\nfunction detectDiscrepancies(parsedState, inputs, outputs) {\n    let errors = [];\n\n    const checkType = (propType, value) => {\n        switch (propType) {\n            case 'constant':\n            case 'select':\n                return true;\n            case 'text':\n            case 'hex':\n                return typeof value === 'string';\n            case 'number':\n            case 'integer':\n            case 'slider':\n                return typeof value === 'number';\n            case 'bool':\n                return typeof value === 'boolean';\n            case 'list':\n                return Array.isArray(value);\n            default:\n                return false;\n        }\n    };\n\n    // Checking for existence of interfaces defined\n    Object.keys({\n        ...parsedState.inputs,\n        ...parsedState.outputs,\n    }).forEach((ioName) => {\n        const name = ioName.slice(ioName.indexOf('_') + 1);\n        const direction = ioName.slice(0, ioName.indexOf('_'));\n        if (\n            !Object.prototype.hasOwnProperty.call(inputs, ioName) &&\n            !Object.prototype.hasOwnProperty.call(outputs, ioName)\n        ) {\n            if (direction === 'property') {\n                errors.push(`Property named '${name}' not found in specification!`);\n            } else {\n                errors.push(`Interface named '${name}' of direction '${direction}' not found in specification!`);\n            }\n        } else if (direction === 'property') {\n            // Verifying property type defined in the node and the value passed\n            const parsedValue = parsedState.inputs[ioName].value;\n            const propertyType = inputs[ioName].type;\n            if (!checkType(propertyType, parsedValue)) {\n                errors.push(`Property '${name}' type mismatch. ${propertyType} expected, ${typeof parsedValue} found.`);\n            } else if (propertyType === 'select' && !inputs[ioName].items.includes(parsedValue)) {\n                errors.push(`Property '${name}' value mismatch. ${parsedValue} not found in ${inputs[ioName].items}`);\n            } else if (propertyType === 'list') {\n                const { dtype } = inputs[ioName];\n                const mismatchedElements = parsedValue.filter((val) => typeof val !== dtype); // eslint-disable-line valid-typeof,max-len\n                if (mismatchedElements.length > 0) {\n                    errors.push(`Property '${name}' value mismatch. Items: '${mismatchedElements.join(' ')}' are not of '${dtype}' dtype.`);\n                }\n            }\n        }\n    });\n\n    // Checking for existence of interface groups\n    Object.keys(parsedState.enabledInterfaceGroups).forEach((groupName) => {\n        if (\n            !Object.prototype.hasOwnProperty.call(inputs, groupName) &&\n            !Object.prototype.hasOwnProperty.call(outputs, groupName)\n        ) {\n            const direction = groupName.slice(0, groupName.indexOf('_'));\n            const name = groupName.slice(groupName.indexOf('_') + 1);\n\n            errors.push(`Interface group named '${name}' of direction '${direction}' not found in specification!`);\n        }\n    });\n\n    if (errors && errors.length) {\n        return errors;\n    }\n\n    errors = validateInterfaceGroups(\n        Object.keys(parsedState.enabledInterfaceGroups),\n        inputs,\n        outputs,\n    );\n\n    return errors;\n}\n\n/**\n * @param state state to be loaded. Should be a valid dataflow\n * @returns state that can be given to baklavajs, or an array of errors if any occurred\n */\nfunction parseNodeState(state) {\n    const newState = JSON.parse(JSON.stringify(state));\n\n    if (newState.interfaces !== undefined) {\n        const out = parseInterfaces(newState.interfaces, [], []);\n        if (Array.isArray(out) && out.length) {\n            return out;\n        }\n\n        const { inputs, outputs } = out;\n        newState.inputs = inputs;\n        newState.outputs = outputs;\n\n        delete newState.interfaces;\n    }\n\n    if (newState.properties !== undefined) {\n        const out = parseProperties(newState.properties);\n        if (Array.isArray(out) && out.length) {\n            return out;\n        }\n\n        newState.inputs = { ...newState.inputs, ...out };\n        delete newState.properties;\n    }\n\n    if (newState.enabledInterfaceGroups !== undefined) {\n        const interfaceGroups = {};\n        newState.enabledInterfaceGroups.forEach((intf) => {\n            interfaceGroups[`${intf.direction}_${intf.name}`] = { ...intf };\n        });\n        newState.enabledInterfaceGroups = interfaceGroups;\n    } else {\n        newState.enabledInterfaceGroups = {};\n    }\n\n    newState.title = newState.instanceName ?? '';\n    delete newState.instanceName;\n\n    newState.parsed = true;\n    return newState;\n}\n\nclass CustomNode extends Node {\n    inputs = {};\n\n    outputs = {};\n\n    type = undefined;\n\n    constructor(\n        name,\n        layer,\n        inputs,\n        outputs,\n        twoColumn,\n        description = '',\n        nodeExtends = [],\n        nodeExtending = [],\n        nodeSiblings = [],\n        width = 300,\n    ) {\n        super();\n\n        this.description = description;\n        this.extends = nodeExtends;\n        this.extending = nodeExtending;\n        this.siblings = nodeSiblings;\n        this.layer = layer;\n        this.title = name;\n        this.twoColumn = twoColumn;\n        this.type = name;\n        this.width = width;\n\n        Object.keys(inputs).forEach((k) => {\n            const intf = inputs[k]();\n            this.addInput(k, intf);\n        });\n\n        Object.keys(outputs).forEach((k) => {\n            const intf = outputs[k]();\n            this.addOutput(k, intf);\n        });\n    }\n\n    /**\n     * Function for updating dynamic interfaces of the node based on the property passed.\n     *\n     * @param {*} prop property that is responsible for creating dynamic interfaces.\n     * It must have name and value properties.\n     */\n    updateDynamicInterfaces(prop) {\n        const interfaces = [];\n        const { value } = prop;\n\n        // The interface metadata has to be obtained from the specification of the property\n        const { interfaceType, interfaceMaxConnectionsCount } = this.inputs[`property_${prop.name}`];\n\n        // Direction is obtained from property name\n        const propName = prop.name.split(' ');\n        const direction = propName[propName.length - 2];\n        // The DYNAMIC_INTERFACE_SUFFIX and direction are omitted\n        const interfaceName = prop.name\n            .slice(0, -1 * (DYNAMIC_INTERFACE_SUFFIX.length + 2 + direction.length));\n\n        const occupied = { left: [], right: [] };\n\n        const stateios = { ...this.inputs, ...this.outputs };\n\n        // Assigning sides and sides Positions to interfaces\n        Object.entries(stateios).forEach(([ioName, ioState]) => {\n            if (ioName.startsWith('property_')) return;\n            occupied[ioState.side].push(ioState.sidePosition);\n        });\n\n        for (let i = 0; i < value; i += 1) {\n            const ioName = `${interfaceName}[${i}]`;\n            const directionIoName = `${direction}_${ioName}`;\n\n            const intf = {\n                name: ioName,\n                direction,\n            };\n\n            const container = direction === 'output' ? this.outputs : this.inputs;\n\n            if (directionIoName in container) {\n                intf.externalName = container[directionIoName].externalName;\n                intf.side = container[directionIoName].side;\n                intf.sidePosition = container[directionIoName].sidePosition;\n            }\n\n            if (\n                !Object.prototype.hasOwnProperty.call(intf, 'sidePosition') &&\n                !Object.prototype.hasOwnProperty.call(intf, 'side')\n            ) {\n                const side = direction === 'output' ? 'right' : 'left';\n                let firstUnoccupied = occupied[side].sort((a, b) => a - b).findIndex(\n                    (sidePosition, index) => sidePosition !== index,\n                );\n\n                if (firstUnoccupied === -1) {\n                    if (occupied[side].length === 0) {\n                        firstUnoccupied = 0;\n                    } else {\n                        firstUnoccupied = Math.max(...occupied[side]) + 1;\n                    }\n                }\n\n                intf.sidePosition = firstUnoccupied;\n                intf.side = side;\n                intf.type = interfaceType;\n                intf.maxConnectionCount = interfaceMaxConnectionsCount;\n\n                occupied[intf.side].push(firstUnoccupied);\n            }\n\n            interfaces.push(intf);\n        }\n\n        const out = parseInterfaces(interfaces, [], []);\n        if (Array.isArray(out) && out.length) {\n            throw new Error(`Internal error, node ${this.type} invalid. Reason: ${out.join(' ')}`);\n        }\n        const { inputs: newInputs, outputs: newOutputs } = out;\n\n        // Finding a reactive reference of `this` and using it to bind\n        // the function to the node instance, so that the changes are\n        // reflected in the editor\n        const node = this.graph.nodes.find((n) => n.id === this.id);\n        const reactiveUpdate = this.updateInterfaces.bind(node);\n        reactiveUpdate(newInputs, newOutputs, false, [`${direction}_${interfaceName}`]);\n    }\n\n    toggleInterfaceGroup(intf, visible) {\n        // If the interface is visible and is being disabled\n\n        if (!intf.hidden && !visible) {\n            const connections = this.graphInstance.connections.filter(\n                (c) => c.from === intf || c.to === intf,\n            );\n            connections.forEach((c) => {\n                this.graphInstance.removeConnection(c);\n            });\n        }\n\n        // checking if there is an interface with the same side position\n        if (visible) {\n            updateInterfacePosition(this, intf, intf.side);\n        }\n        // It may also need a new sidePosition\n        intf.hidden = !visible; // eslint-disable-line no-param-reassign\n    }\n\n    save() {\n        const savedState = super.save();\n        const newProperties = [];\n        const newInterfaces = [];\n        const enabledInterfaceGroups = [];\n\n        Object.entries({ ...this.inputs, ...this.outputs }).forEach((io) => {\n            const [ioName, ioState] = io;\n\n            if (ioState.port) {\n                if (!ioState.hidden) {\n                    if (ioState.interfaces) {\n                        // Enabled interface groups\n                        enabledInterfaceGroups.push({\n                            name: ioName.slice(ioState.direction.length + 1),\n                            direction: ioState.direction,\n                        });\n                    }\n\n                    newInterfaces.push({\n                        name: ioName.slice(ioState.direction.length + 1),\n                        externalName: ioState.externalName,\n                        id: ioState.id,\n                        direction: ioState.direction,\n                        side: ioState.side,\n                        sidePosition: ioState.sidePosition,\n                    });\n                }\n            } else {\n                newProperties.push({\n                    name: ioName.slice('property'.length + 1),\n                    id: ioState.id,\n                    value: ioState.value === undefined ? null : ioState.value,\n                });\n            }\n        });\n\n        delete savedState.inputs;\n        delete savedState.outputs;\n        savedState.interfaces = newInterfaces;\n        savedState.properties = newProperties;\n        savedState.enabledInterfaceGroups = enabledInterfaceGroups;\n\n        savedState.name = savedState.type;\n        delete savedState.type;\n\n        savedState.instanceName = savedState.title === '' ? undefined : savedState.title;\n        delete savedState.title;\n\n        return savedState;\n    }\n\n    /**\n     * Function used to update interfaces of a node when loading a dataflow\n     * in a development mode.\n     *\n     * @param {object} stateInputs newInputs of the node\n     * @param {object} stateOutputs newOutputs of the node\n     * @param {boolean} updateInterfaces determines what to do if an interface in either\n     * @param {string[]} include prefixes of names of interfaces that are to be removed. Other\n     * interfaces are left untouched. If set to undefined then all interfaces are updated.\n     * `stateInputs` or `stateOutputs` already exists in the node. If set to `true`, the\n     * interface will be updated with the new values, otherwise it will be left untouched.\n     */\n    updateInterfaces(stateInputs, stateOutputs, updateInterfaces = true, include = undefined) {\n        const errors = [];\n        // Updating interfaces of a graph node\n        Object.entries(this.inputs).forEach(([k, intf]) => {\n            // Process only interfaces, not properties\n            if (intf.direction === undefined) return;\n            if (\n                !Object.keys(stateInputs).includes(k) &&\n                (include === undefined || include.some((prefix) => k.startsWith(prefix)))\n            ) {\n                errors.push(\n                    `Interface '${intf.name}' of direction '${intf.direction}' ` +\n                    `removed as it was not found in the dataflow.`,\n                );\n\n                // The interface might have to be privatzed\n                this.graph.editor.privatizeInterface(this.graph.id, intf);\n\n                this.removeInput(k);\n            }\n        });\n        Object.entries(stateInputs).forEach(([idA, intfA]) => {\n            if (intfA.direction === undefined) return;\n            const foundIntf = Object.entries(this.inputs).find(\n                ([idB, intfB]) => idB === idA && intfB.direction === intfA.direction,\n            );\n            if (foundIntf === undefined) {\n                const baklavaIntf = new NodeInterface(idA);\n                errors.push(\n                    `Interface '${intfA.name}' of direction '${intfA.direction}' ` +\n                    `created as it was not found in the specification.`,\n                );\n                Object.assign(baklavaIntf, intfA);\n                this.addInterface(baklavaIntf.direction, idA, baklavaIntf);\n            } else if (updateInterfaces) {\n                Object.assign(foundIntf[1], intfA);\n            }\n        });\n\n        Object.entries(this.outputs).forEach(([k, intf]) => {\n            // Process only interfaces, not properties\n            if (intf.direction === undefined) return;\n            if (!Object.keys(stateOutputs).includes(k) &&\n                (include === undefined || include.some((prefix) => k.startsWith(prefix)))\n            ) {\n                errors.push(\n                    `Interface '${intf.name}' of direction '${intf.direction}' ` +\n                    `removed as it was not found in the dataflow.`,\n                );\n\n                // The interface might have to be privatzed\n                this.graph.editor.privatizeInterface(this.graph.id, intf);\n\n                this.removeOutput(k);\n            }\n        });\n        Object.entries(stateOutputs).forEach(([idA, intfA]) => {\n            const foundIntf = Object.entries(this.outputs).find(\n                ([idB, intfB]) => idB === idA && intfB.direction === intfA.direction,\n            );\n            if (foundIntf === undefined) {\n                const baklavaIntf = new NodeInterface(idA);\n                errors.push(\n                    `Interface '${intfA.name}' of direction '${intfA.direction}' ` +\n                    `created as it was not found in the specification.`,\n                );\n                Object.assign(baklavaIntf, intfA);\n                this.addInterface(baklavaIntf.direction, idA, baklavaIntf);\n            } else if (updateInterfaces) {\n                Object.assign(foundIntf[1], intfA);\n            }\n        });\n        return errors;\n    }\n\n    updateProperties(stateProperties) {\n        const errors = [];\n        // Updating properties of a graph node\n        Object.entries(this.inputs).forEach(([k, prop]) => {\n            // Process only properties, not interfaces\n            if (prop.direction !== undefined) return;\n            if (!Object.keys(stateProperties).includes(k)) {\n                errors.push(\n                    `Property '${prop.name}' ` +\n                    `removed as it was not found in the dataflow.`,\n                );\n                this.removeInput(k);\n            }\n        });\n        Object.entries(stateProperties).forEach(([idA, propA]) => {\n            if (propA.direction !== undefined) return;\n            const foundProp = Object.entries(this.inputs).find(\n                ([idB]) => idB === idA,\n            );\n            if (foundProp === undefined) {\n                const baklavaProp = new InputInterface(\n                    propA.name,\n                    propA.value,\n                ).setPort(false);\n                baklavaProp.componentName = 'InputInterface';\n                errors.push(\n                    `Property '${propA.name}' ` +\n                    `created as it was not found in the specification.`,\n                );\n                Object.assign(baklavaProp, propA);\n                this.addInput(idA, baklavaProp);\n            }\n        });\n        return errors;\n    }\n\n    load(state) {\n        let parsedState;\n\n        // `parsed` determines whether the state was already parsed before loading\n        // This is caused by the fact that `load` can be used both to load a state\n        // from a dataflow and from an instance of a node\n        if (Object.prototype.hasOwnProperty.call(state, 'parsed') && state.parsed) {\n            parsedState = state;\n        } else {\n            parsedState = parseNodeState(state);\n\n            if (Array.isArray(parsedState) && parsedState.length) {\n                return parsedState.map((error) => `Node ${this.type} of id: ${this.id} invalid. ${error}`);\n            }\n        }\n\n        let errors = [];\n        if (process.env.VUE_APP_GRAPH_DEVELOPMENT_MODE === 'true') {\n            errors = this.updateInterfaces(parsedState.inputs, parsedState.outputs);\n            errors = [...errors, ...this.updateProperties(parsedState.inputs)];\n            errors = errors.map((error) => `Node ${this.type} of id: ${this.id} invalid. ${error}`);\n        } else {\n            Object.entries(parsedState.inputs).forEach(([name, intf]) => {\n                if (!name.startsWith('property_')) return;\n\n                if (name.startsWith('property_') && name.endsWith(`${DYNAMIC_INTERFACE_SUFFIX}`)) {\n                    this.updateDynamicInterfaces(intf);\n                }\n            });\n\n            errors = detectDiscrepancies(parsedState, this.inputs, this.outputs);\n            if (Array.isArray(errors) && errors.length) {\n                return errors.map((error) => `Node ${this.type} of id: ${this.id} invalid. ${error}`);\n            }\n        }\n\n        super.load(parsedState);\n\n        // Disabling default interface groups if the node has its own state\n        if (Object.keys(parsedState.enabledInterfaceGroups).length) {\n            Object.entries({ ...this.inputs, ...this.outputs }).forEach(([, intf]) => {\n                // If this is an interfaces group\n                if (intf.interfaces !== undefined) {\n                    intf.hidden = true; // eslint-disable-line no-param-reassign\n                }\n            });\n        }\n\n        // Enabling interface groups\n        Object.entries(parsedState.enabledInterfaceGroups).forEach(\n            ([groupName, groupState]) => {\n                if (groupState.direction === 'input' || groupState.direction === 'inout') {\n                    this.inputs[groupName].hidden = false;\n                } else if (groupState.direction === 'output') {\n                    this.outputs[groupName].hidden = false;\n                }\n            },\n        );\n\n        const occupied = { left: [], right: [] };\n\n        const stateios = { ...parsedState.inputs, ...parsedState.outputs };\n\n        // Assigning sides and sides Positions to interfaces\n        Object.entries(stateios).forEach(([ioName, ioState]) => {\n            if (ioState.direction === 'input' || ioState.direction === 'inout') {\n                this.inputs[ioName].side = ioState.side;\n                this.inputs[ioName].sidePosition = ioState.sidePosition;\n                this.inputs[ioName].externalName = ioState.externalName;\n                occupied[ioState.side].push(ioState.sidePosition);\n            } else if (ioState.direction === 'output') {\n                this.outputs[ioName].side = ioState.side;\n                this.outputs[ioName].sidePosition = ioState.sidePosition;\n                this.outputs[ioName].externalName = ioState.externalName;\n                occupied[ioState.side].push(ioState.sidePosition);\n            }\n        });\n\n        const refreshSidePositions = (entries) => {\n            // When state provided in the graph is incomplete, e.g. it misses\n            // an interface, we allow it.\n            // This, however, requires from us that we make sure that newly added\n            // interfaces (not present in parsedState) are not on conflicting positions\n            Object.entries(entries).forEach(([ioName, ioState]) => {\n                if (ioName.startsWith('property_')) return;\n                // if interface was explicitly defined in the graph file, skip it\n                if (ioName in stateios) return;\n                // otherwise, if the interface was implicitly created but it does not\n                // cover existing interface, skip it\n                if (!occupied[ioState.side].includes(ioState.sidePosition)) return;\n                // if the positions are clashing, pick first available max position on\n                // given side\n                const maxposition = Math.max(...occupied[ioState.side]);\n                ioState.sidePosition = maxposition + 1; // eslint-disable-line no-param-reassign\n                occupied[ioState.side].push(maxposition + 1);\n            });\n        };\n\n        refreshSidePositions(this.inputs);\n        refreshSidePositions(this.outputs);\n\n        // Default position should be undefined instead of (0, 0) so that it can be set\n        // by autolayout\n        if (state.position === undefined) {\n            this.position = undefined;\n        }\n        return errors;\n    }\n\n    onDestroy() {\n        [...Object.values(this.inputs), ...Object.values(this.outputs)].forEach((io) => {\n            Object.values(io.events).forEach((event) => {\n                // We need to unsubscribe from all events to avoid memory leaks\n                // On token mismatch, the event will not be unsubscribed\n                event.unsubscribe(io);\n            });\n        });\n    }\n}\n\n/**\n * Class factory that creates a class for a custom Node that is described by the arguments.\n * It can be later registered so that the user can use it and save the editor.\n * `inputs`, `properties` and `outputs` formats are described in the documentation.\n *\n * @param {string} name Name of the block that is stored when saving\n * @param {string} layer Layer of the node\n * @param {*} interfaces List of interfaces in the block (input, output and inout)\n * @param {*} properties List of properties of the block\n * @param {*} interfaceGroups Object describing groups of interfaces\n * @param {*} defaultInterfaceGroups Object describing groups of interfaces that\n * are enabled by default\n * @param {boolean} twoColumn type of layout of the nodes\n * @returns Node based class is successful, otherwise an array of errors is returned.\n */\nexport function CustomNodeFactory(\n    name,\n    layer,\n    interfaces,\n    properties,\n    interfaceGroups,\n    defaultInterfaceGroups,\n    twoColumn,\n    description = '',\n    nodeExtends = [],\n    nodeExtending = [],\n    nodeSiblings = [],\n    width = 300,\n) {\n    const generatedProperties = generateProperties(interfaces);\n    if (!generatedProperties.success) {\n        return generatedProperties.value.map((error) => `Node ${name} invalid. ${error}`);\n    }\n\n    const parsedInterfaces = parseInterfaces(interfaces, interfaceGroups, defaultInterfaceGroups);\n    // If parsedInterfaces returns an array, it is an array of errors\n    if (Array.isArray(parsedInterfaces) && parsedInterfaces.length) {\n        return parsedInterfaces.map((error) => `Node ${name} invalid. ${error}`);\n    }\n\n    function createBaklavaInterface(intf) {\n        return () => {\n            const baklavaIntf = new NodeInterface(intf.name);\n            Object.assign(baklavaIntf, intf);\n            return baklavaIntf;\n        };\n    }\n\n    // Creating interfaces for baklavajs\n    const inputs = Object.fromEntries(\n        Object.entries(parsedInterfaces.inputs).map(([n, intf]) => [\n            n,\n            createBaklavaInterface(intf),\n        ]),\n    );\n\n    const newOutputs = Object.fromEntries(\n        Object.entries(parsedInterfaces.outputs).map(([n, intf]) => [\n            n,\n            createBaklavaInterface(intf),\n        ]),\n    );\n\n    const parsedProperties = parseProperties([...properties, ...generatedProperties.value]);\n    // If parsedProperties returns an array, it is an array of errors\n    if (Array.isArray(parsedProperties) && parsedProperties.length) {\n        return parsedProperties.map((error) => `Node ${name} invalid. ${error}`);\n    }\n    const createdProperties = createProperties(parsedProperties);\n\n    const newInputs = {\n        ...inputs,\n        ...createdProperties,\n    };\n\n    return class extends CustomNode {\n        constructor() {\n            super(\n                name,\n                layer,\n                newInputs,\n                newOutputs,\n                twoColumn,\n                description,\n                nodeExtends,\n                nodeExtending,\n                nodeSiblings,\n                width,\n            );\n        }\n    };\n}\n\n/**\n * Function looks for graph node interfaces based on the nodes inside of it.\n *\n * It finds all interfaces that have `externalName` property set and registers\n * them in the InterfaceRegistry, if they are not already registered, so that\n * they their state can be easily shared and synchronized.\n *\n * If there are any errors, they are returned as an array of strings.\n * If the operation was successful, the new inputs and outputs are returned.\n *\n * @param nodes Nodes of the subgraph\n * @param inputs List of inputs of the subgraph\n * @param outputs List of outputs of the subgraph\n *\n * @returns List of errors or new inputs and outputs\n */\nexport function updateSubgraphInterfaces(nodes, inputs = [], outputs = []) {\n    // Interfaces that are not connected to any other interface\n    const INTERFACE_PREFIXES = ['input_', 'inout_', 'output_'];\n\n    const exposedIntf = [\n        ...nodes.map((node) => Object.entries({ ...node.inputs, ...node.outputs })).flat(),\n    ].filter(([key]) => INTERFACE_PREFIXES.some((prefix) => key.startsWith(prefix)))\n        .filter(\n            ([, intf]) => intf.externalName,\n        );\n\n    // Filter out repeated external names\n    const countedIntfNames = Object.create(null);\n    const externalInterfaces = [];\n    exposedIntf.forEach(\n        ([, intf]) => {\n            countedIntfNames[intf.externalName] = (countedIntfNames[intf.externalName] ?? 0) + 1;\n            if (countedIntfNames[intf.externalName] === 1) {\n                externalInterfaces.push(intf);\n            } else {\n                externalInterfaces.push(`Interface '${intf.externalName}' is repeated ${countedIntfNames[intf.externalName]} times.`);\n            }\n        },\n    );\n    const errorMessages = externalInterfaces.filter((n) => typeof n === 'string');\n    if (errorMessages.length) {\n        return errorMessages;\n    }\n\n    // Create new inputs and outputs\n    const newInterfaces = [];\n    externalInterfaces.forEach((intf) => {\n        const graphId = nodes[0].graph.id;\n        // It may happen that the registered interface has the same id, but is a reference,\n        // for example when dealing with history or clipboard.\n        if (\n            ir.isRegistered(intf.id) &&\n            ir.getRegisteredInterface(intf.id).sharedInterface !== intf &&\n            ir.getRegisteredInterface(intf.id).sharedInterface.id === intf.id &&\n            ir.getRegisteredInterface(intf.id).sharedInterfaceGraphId === graphId\n        ) {\n            ir.deleteRegisteredInterface(intf.id);\n        }\n\n        if (!ir.isRegistered(intf.id)) {\n            ir.registerInterface(intf, graphId);\n        }\n\n        const container = intf.direction === 'output' ? outputs : inputs;\n        const idx = container.findIndex((x) => x.id === intf.id);\n        if (idx === -1) {\n            // Graph node interface should not inherit some properties that\n            // are node-specific, they will be accessed using InterfaceRegistry\n            newInterfaces.push({\n                name: intf.externalName,\n                id: intf.id,\n                externalName: undefined,\n                side: intf.side,\n                direction: intf.direction,\n                sidePosition: undefined,\n            });\n        } else {\n            container[idx].name = intf.externalName;\n            newInterfaces.push(container[idx]);\n        }\n    });\n\n    const newInterfacesPositionsOrErrors = applySidePositions(newInterfaces, {});\n    if (Array.isArray(newInterfacesPositionsOrErrors) && newInterfacesPositionsOrErrors.length) {\n        return newInterfacesPositionsOrErrors;\n    }\n\n    return {\n        inputs: Object.values(newInterfacesPositionsOrErrors.inputs),\n        outputs: Object.values(newInterfacesPositionsOrErrors.outputs),\n    };\n}\n\n/**\n * Function creating a graph template as defined in specification\n *\n * @param nodes Nodes of the subgraph\n * @param connections Connections inside the subgraph\n * @param name Default name that will be displayed in editor\n * @param editor PipelineManagerEditor instance\n * @returns Graph template that will be used to define the subgraph node\n */\nexport function GraphFactory(nodes, connections, name, editor) {\n    const parsedState = nodes.map((node) => parseNodeState(node));\n    const errorMessages = parsedState.filter((n) => typeof n === 'string');\n    if (errorMessages.length) {\n        return errorMessages;\n    }\n\n    const state = {\n        name,\n        nodes: parsedState,\n        connections,\n        inputs: [],\n        outputs: [],\n    };\n\n    return new GraphTemplate(state, editor);\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n/* eslint-disable import/prefer-default-export */\nconst getBackendApiUrl = () => {\n    if (window.location.protocol === 'file:' ||\n        (process.env.VUE_APP_STATIC !== undefined && process.env.VUE_APP_STATIC === 'true'))\n        return null;\n    if (process.env.VUE_APP_COMMUNICATION_SERVER_HOST !== undefined &&\n        process.env.VUE_APP_COMMUNICATION_SERVER_HOST !== undefined)\n        return `http://${process.env.VUE_APP_COMMUNICATION_SERVER_HOST}:${process.env.VUE_APP_COMMUNICATION_SERVER_PORT}`;\n    return `${window.location.protocol}//${window.location.host}`;\n};\nexport const backendApiUrl = getBackendApiUrl();\nexport const HTTPCodes = {\n    OK: 200,\n    BadRequest: 400,\n    ServiceUnavailable: 503,\n};\nexport const PMMessageType = {\n    OK: 0,\n    ERROR: 1,\n    PROGRESS: 2,\n    WARNING: 3,\n};\nexport const JSONRPCCustomErrorCode = {\n    EXCEPTION_RAISED: -1,\n    EXTERNAL_APPLICATION_NOT_CONNECTED: -2,\n    NEWER_SESSION_AVAILABLE: -3,\n};\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __awaiter } from \"tslib\";\n/*\n * This module contains all possible JSON-RPC requests that frontend can\n * receive and process.\n *\n * Each exported function is automatically registered as JSON-RPC method\n * when JSON-RPC server is created in fetchRequest.\n * Function name have to match with specification (resources/api_specification).\n */\nimport { useViewModel } from '@baklavajs/renderer-vue';\nimport runInfo from './runInformation';\nimport EditorManager from '../EditorManager';\nimport NotificationHandler from '../notifications';\nimport { terminalStore } from '../stores';\n// eslint-disable-next-line import/no-cycle\nimport getExternalApplicationManager from './ExternalApplicationManager';\n/* eslint-disable import/prefer-default-export */\n/* eslint-disable camelcase */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst editorManager = EditorManager.getEditorManagerInstance();\n/**\n * Finds graph of id `graph_id`.\n * An error with appropriate message is thrown if any error occurs.\n *\n * @param graph_id Id of a graph to find\n * @returns found graph\n */\nfunction getGraph(graph_id) {\n    const { viewModel } = useViewModel();\n    const graph = [...viewModel.value.editor.graphs].find((g) => g.id === graph_id);\n    if (graph === undefined) {\n        throw new Error(`Graph with id '${graph_id}' does not exist.`);\n    }\n    return graph;\n}\n/**\n * Finds node of id `node_id` in graph of id `graph_id`.\n * An error with appropriate message is thrown if any error occurs.\n *\n * @param graph_id Id of a graph to find\n * @param node_id Id of a node to find\n * @returns found node\n */\nfunction getNode(graph_id, node_id) {\n    const graph = getGraph(graph_id);\n    const node = graph.nodes.find((n) => n.id === node_id);\n    if (node === undefined) {\n        throw new Error(`Node with id '${node_id}' does not exist.`);\n    }\n    return node;\n}\n/**\n * Finds property of id `id` or name `name` in node.\n * One of those values has to be defined.\n * An error with appropriate message is thrown if any error occurs.\n *\n * @param node Node instance that is searched\n * @param id id of the property\n * @param name name of the property\n * @returns found property\n */\nfunction getProperty(node, id, name) {\n    let prop;\n    if (id !== undefined) {\n        prop = Object.values(node.inputs).find((p) => p.id === id);\n        // If not property found or it is not a property, but an interface\n        if (prop === undefined || prop.side !== undefined) {\n            throw new Error(`Property with id '${id}' does not exist.`);\n        }\n    }\n    else {\n        prop = Object.values(node.inputs).find((p) => p.name === name);\n        // If not property found or it is not a property, but an interface\n        if (prop === undefined || prop.side !== undefined) {\n            throw new Error(`Property with name '${name}' does not exist.`);\n        }\n    }\n    return prop;\n}\n/**\n * Finds connection between interfaces with id `from` and `to` in graph of id `graph_id`.\n * An error with appropriate message is thrown if any error occurs.\n *\n * @param graph_id Id of a graph to find\n * @param from Id of a first interface\n * @param to Id of a second interface\n * @returns found node\n */\nfunction getConnection(graph_id, from, to) {\n    const graph = getGraph(graph_id);\n    const connection = graph.connections.find((c) => c.from.id === from && c.to.id === to);\n    if (connection === undefined) {\n        throw new Error(`Connection from ${from} to ${to} does not exist.`);\n    }\n    return connection;\n}\n/**\n * @returns currently used dataflow\n */\nexport function graph_get() {\n    return {\n        dataflow: editorManager.saveDataflow(),\n    };\n}\n/**\n * Updates values of properties specified in `params`.\n * An error with appropriate message is thrown if any error occurs.\n */\nexport function properties_change(params) {\n    const node = getNode(params.graph_id, params.node_id);\n    // First iteration to validate that every property exists\n    // eslint-disable-next-line no-restricted-syntax\n    for (const property of params.properties) {\n        getProperty(node, property.id, property.name);\n    }\n    // Second iteration to actually alter the values\n    // eslint-disable-next-line no-restricted-syntax\n    for (const property of params.properties) {\n        const prop = getProperty(node, property.id, property.name);\n        prop.value = property.new_value;\n    }\n}\n/**\n * Updates values of properties specified in `params`.\n * An error with appropriate message is thrown if any error occurs.\n */\nexport function position_change(params) {\n    const node = getNode(params.graph_id, params.node_id);\n    node.position.x = params.position.x;\n    node.position.y = params.position.y;\n}\n/**\n * Creates and deletes nodes based on received `params`.\n */\nexport function nodes_change(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { viewModel } = useViewModel();\n        const graph = getGraph(params.graph_id);\n        params.nodes.added.forEach((n) => {\n            const info = viewModel.value.editor.nodeTypes.get(n.name);\n            if (!info) {\n                throw new Error(`Node type not found for name ${n.name}`);\n            }\n            else {\n                const node = new info.type(); // eslint-disable-line new-cap\n                node.id = n.id;\n                graph.addNode(node);\n                const errors = node.load(n);\n                if (Array.isArray(errors) && errors.length)\n                    throw new Error(errors.join('\\n'));\n            }\n        });\n        params.nodes.deleted.forEach((n) => {\n            var _a;\n            const node = getNode(params.graph_id, n);\n            if ((_a = params.remove_with_connections) !== null && _a !== void 0 ? _a : true) {\n                graph.removeNode(node);\n            }\n            else {\n                graph.removeNodeOnly(node);\n            }\n        });\n    });\n}\n/**\n * Creates and deletes connections based on received `params`.\n */\nexport function connections_change(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const graph = getGraph(params.graph_id);\n        params.connections.added.forEach((c) => {\n            const fromIntf = graph.findNodeInterface(c.from);\n            if (!fromIntf)\n                throw new Error(`Interface with id ${c.from} does not exist`);\n            const toIntf = graph.findNodeInterface(c.to);\n            if (!toIntf)\n                throw new Error(`Interface with id ${c.to} does not exist`);\n            const connection = graph.addConnection(fromIntf, toIntf);\n            if (!connection)\n                throw new Error(`Connection from ${c.from} to ${c.to} cannot be created`);\n        });\n        params.connections.deleted.forEach((c) => {\n            graph.removeConnection(getConnection(params.graph_id, c.from, c.to));\n        });\n    });\n}\n/**\n * Loads received dataflow.\n */\nexport function graph_change(params) {\n    editorManager.loadDataflow(params.dataflow);\n}\n/**\n * Returns an array of properties specified in `params`.\n * An error with appropriate message is thrown if any error occurs.\n */\nexport function properties_get(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const node = getNode(params.graph_id, params.node_id);\n        const properties = [];\n        if (params.properties === undefined) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const property of Object.values(node.inputs)) {\n                if (property.side === undefined) {\n                    properties.push({\n                        id: property.id,\n                        name: property.name,\n                        value: property.value,\n                    });\n                }\n            }\n            return properties;\n        }\n        // eslint-disable-next-line no-restricted-syntax\n        for (const property of params.properties) {\n            const prop = getProperty(node, property.id, property.name);\n            properties.push({\n                id: prop.id,\n                name: prop.name,\n                value: prop.value,\n            });\n        }\n        return properties;\n    });\n}\n/**\n * Returns a serialized node state specified in `params`.\n * An error with appropriate message is thrown if any error occurs.\n */\nexport function node_get(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const node = getNode(params.graph_id, params.node_id);\n        return {\n            node: node.save(),\n        };\n    });\n}\n/**\n * Sets width of progress bar.\n * If there is not run in progress, throws error.\n */\nexport function progress_change(params) {\n    const procedureInfo = runInfo.get(params.method);\n    if (!procedureInfo.inProgress) {\n        throw new Error('No run in progress');\n    }\n    if (!procedureInfo.progressBar)\n        throw new Error(`Progress bar does not exist for method: ${params.method}`);\n    if (params.progress === -1) {\n        procedureInfo.progressBar.classList.add('animate');\n        return;\n    }\n    if (params.progress > 100 || params.progress < 0)\n        throw new Error(`Progress has to be in [0, 100] or -1. Received: ${params.progress}`);\n    procedureInfo.progressBar.style.width = `${params.progress}%`;\n    procedureInfo.progressBar.classList.remove('animate');\n}\n/**\n * Updates the editor's metadata.\n */\nexport function metadata_change(params) {\n    editorManager.updateMetadata(params.metadata, true);\n}\n/**\n * Triggers action centering the editor.\n */\nexport function viewport_center() {\n    editorManager.baklavaView.editor.centerZoom();\n}\n/**\n * Creates new terminal instance\n */\nexport function terminal_add(params) {\n    const status = terminalStore.createTerminalInstance(params.name, params.readonly);\n    if (status === false) {\n        throw new Error(`Terminal instance of name '${params.name}' already exists`);\n    }\n}\n/**\n * Writes a single message to a chosen terminal\n */\nexport function terminal_write(params) {\n    if (!(params.name in terminalStore.logs)) {\n        terminalStore.createTerminalInstance(params.name);\n    }\n    terminalStore.add(params.message, params.name);\n}\nexport function notification_send(params) {\n    NotificationHandler.terminalLog(params.type, params.title, params.details);\n}\nexport function specification_change(params) {\n    const externalApplicationManager = getExternalApplicationManager();\n    externalApplicationManager.updateSpecification(params.specification);\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __awaiter } from \"tslib\";\nimport { JSONRPCServerAndClient, JSONRPCServer, JSONRPCClient, createJSONRPCErrorResponse, } from 'json-rpc-2.0';\nimport Ajv2019 from 'ajv/dist/2019.js';\nimport { io } from 'socket.io-client';\nimport NotificationHandler from '../notifications';\nimport { backendApiUrl } from '../utils';\nimport commonTypesSchema from '../../../../resources/api_specification/common_types.json' with { type: 'json' };\nimport specificationSchema from '../../../../resources/api_specification/specification.json' with { type: 'json' };\n// eslint-disable-next-line import/no-cycle\nimport * as remoteProcedures from './remoteProcedures';\nconst customMethodRegex = /^custom_.*$/;\nconst customMethodReplace = 'dataflow_run';\nclass CustomJSONRPCServerAndClient extends JSONRPCServerAndClient {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"customMethodRegex\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"customMethodReplace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n    }\n}\nconst ajv = new Ajv2019({\n    schemas: [commonTypesSchema],\n    allowUnionTypes: true,\n    strict: true,\n});\nconst frontendEndpoints = specificationSchema.frontend_endpoints;\nconst backendEndpoints = specificationSchema.backend_endpoints;\nconst externalEndpoints = specificationSchema.external_endpoints;\n// This should become part of the testing suite at some point\nlet invalidDefinition;\ntry {\n    [frontendEndpoints, backendEndpoints, externalEndpoints].forEach((endpoints) => {\n        Object.entries(endpoints).forEach(([definitionName, definition]) => {\n            var _a;\n            invalidDefinition = definitionName;\n            ajv.compile(definition.params);\n            ajv.compile((_a = definition.returns) !== null && _a !== void 0 ? _a : {});\n        });\n    });\n}\ncatch (exception) {\n    throw new Error(`Procedures specification schema '${invalidDefinition}' is incorrect: ${exception}`);\n}\n/**\n * Middleware that validates received requests.\n */\nconst validateServerRequestResponse = (next, request, serverParams) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    // request validation\n    if (!(request.method in frontendEndpoints)) {\n        if (request.id !== undefined)\n            return createJSONRPCErrorResponse(request.id, 1, 'Requested method does not exist');\n        throw new Error('Requested method does not exist');\n    }\n    const schema = frontendEndpoints[request.method];\n    const valid = ajv.validate(schema.params, (_a = request.params) !== null && _a !== void 0 ? _a : {});\n    if (!valid) {\n        if (request.id !== undefined)\n            return createJSONRPCErrorResponse(request.id, 1, 'Request does not match specification');\n        throw new Error('Request does not match specification');\n    }\n    const response = yield next(request, serverParams);\n    if (request.id === undefined)\n        return null;\n    // response validation\n    if ((response === null || response === void 0 ? void 0 : response.result) !== undefined && schema.returns !== null) {\n        const validResponse = ajv.validate(schema.returns, response.result);\n        if (!validResponse) {\n            if (request.id !== undefined) {\n                return createJSONRPCErrorResponse(request.id, 1, 'Response does not match specification');\n            }\n            throw new Error('Response does not match specification');\n        }\n    }\n    return response;\n});\nlet jsonRPCID = 1;\n// eslint-disable-next-line no-plusplus\nconst createID = () => jsonRPCID++;\nconst commonHeaders = {\n    'Access-Control-Allow-Origin': 'http://localhost',\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n};\nconst requestSchema = new Map();\nconst MAX_MESSAGE_LENGTH = 256 * 1024;\nlet socket;\nlet jsonRPCServer;\n/**\n * Function that creates JSON-RPC client-server and defines how messages are send and received.\n */\nfunction createServer() {\n    // Initialize SocketIO\n    if (!backendApiUrl)\n        return;\n    socket = io(backendApiUrl, {\n        extraHeaders: commonHeaders,\n    });\n    // Create JSON-RPC server\n    jsonRPCServer = new JSONRPCServerAndClient(new JSONRPCServer(), new JSONRPCClient((request) => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        const method = (customMethodRegex.test(request.method)) ?\n            customMethodReplace : request.method;\n        // request validation\n        if (!(method in externalEndpoints) && !(method in backendEndpoints)) {\n            throw new Error('Requested method not known');\n        }\n        if (socket.disconnected) {\n            return Promise.reject(new Error('WebSocket is disconnected. Make sure the communication server is available.'));\n        }\n        const endpoints = (method in externalEndpoints) ?\n            externalEndpoints : backendEndpoints;\n        const schema = endpoints[method];\n        const valid = ajv.validate(schema.params, (_a = request.params) !== null && _a !== void 0 ? _a : {});\n        if (!valid)\n            return Promise.reject(new Error('Request does not match specification'));\n        if (request.id) {\n            requestSchema.set(request.id, schema);\n        }\n        // sending request\n        const endpoint = (endpoints === backendEndpoints) ? 'backend-api' : 'external-api';\n        const stringify = JSON.stringify(request);\n        try {\n            // Emit request in chunks\n            if (stringify.length > MAX_MESSAGE_LENGTH) {\n                const messageID = (_b = request.id) !== null && _b !== void 0 ? _b : crypto.randomUUID();\n                for (let i = 0; i < stringify.length; i += MAX_MESSAGE_LENGTH) {\n                    socket.emit(endpoint, {\n                        id: messageID,\n                        chunk: stringify.substring(i, Math.min(i + MAX_MESSAGE_LENGTH, stringify.length)),\n                        end: i + MAX_MESSAGE_LENGTH >= stringify.length,\n                    });\n                }\n                // Emit whole request\n            }\n            else {\n                socket.emit(endpoint, request);\n            }\n        }\n        catch (exception) {\n            return Promise.reject(exception);\n        }\n        return Promise.resolve();\n    }), createID));\n    // Add middlewares\n    jsonRPCServer.server.applyMiddleware(validateServerRequestResponse);\n    // Register JSON-RPC methods\n    Object.entries(remoteProcedures).forEach(([name, func]) => {\n        if (typeof (func) === 'function' && name in frontendEndpoints)\n            jsonRPCServer.addMethod(name, func);\n        else if (typeof (func) === 'function') {\n            NotificationHandler.showToast('warning', `Function ${name} was not registered as RPC method`);\n        }\n    });\n    // Define SocketIO events\n    socket.on('connect', () => NotificationHandler.terminalLog('info', 'Initialized connection with communication server', null));\n    socket.on('disconnect', () => {\n        NotificationHandler.terminalLog('warning', 'Connection with communication server disrupted', null);\n        jsonRPCServer.rejectAllPendingRequests('WebSocket disconnected');\n    });\n    socket.on('api', (data) => __awaiter(this, void 0, void 0, function* () {\n        const response = yield jsonRPCServer.server.receive(data);\n        if (response) {\n            try {\n                const ack = yield socket.emitWithAck('external-api', response);\n                if (ack !== undefined && !ack) {\n                    NotificationHandler.terminalLog('error', 'Response to external app was not send', null);\n                }\n            }\n            catch (error) {\n                NotificationHandler.terminalLog('error', `Response to ${data.method} request cannot be send`, error);\n            }\n        }\n    }));\n    socket.on('api-response', (response) => {\n        var _a;\n        // response validation\n        if (response.result && response.id && ((_a = requestSchema.get(response.id)) === null || _a === void 0 ? void 0 : _a.returns)) {\n            const validResponse = ajv.validate(\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            requestSchema.get(response.id).returns, response.result);\n            if (!validResponse) {\n                jsonRPCServer.client.receive(createJSONRPCErrorResponse(response.id, 1, 'Response does not match specification'));\n                return;\n            }\n        }\n        jsonRPCServer.client.receive(response);\n    });\n    jsonRPCServer.customMethodRegex = customMethodRegex;\n    jsonRPCServer.customMethodReplace = customMethodReplace;\n}\nconst obj = {\n    get jsonRPC() {\n        if (!jsonRPCServer)\n            createServer();\n        return jsonRPCServer;\n    },\n};\nexport default obj.jsonRPC;\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JSONRPCErrorCode } from 'json-rpc-2.0';\nimport { charset } from 'mime-types';\nimport { backendApiUrl, PMMessageType, JSONRPCCustomErrorCode } from '../utils';\n\n// eslint-disable-next-line import/no-cycle\nimport jsonRPC from './rpcCommunication';\nimport runInfo from './runInformation';\nimport NotificationHandler from '../notifications';\nimport EditorManager from '../EditorManager';\n\n// Default external application capabilities\nconst defaultAppCapabilities = {};\n\n/**\n * Creates notifications based on response received from external application.\n */\nfunction handleExternalAppResponse(response) {\n    // Status is HTTPCodes.OK so a message from the application is received.\n    if (response.type === PMMessageType.OK) {\n        NotificationHandler.terminalLog('info', response.content);\n    } else if (response.type === PMMessageType.ERROR) {\n        NotificationHandler.terminalLog('error', `Error occurred: ${response.content}`, response.content);\n    } else if (response.type === PMMessageType.WARNING) {\n        NotificationHandler.terminalLog('warning', `Warning: ${response.content}`, response.content);\n    }\n}\n\n/**\n * Creates notifications based on specification.\n * Returns `true` if error appeared.\n */\nfunction handleSpecificationResult({ errors, warnings }, errorTitle, warningTitle) {\n    if (Array.isArray(warnings) && warnings.length) {\n        NotificationHandler.terminalLog('warning', warningTitle, warnings);\n    }\n    if (Array.isArray(errors) && errors.length) {\n        NotificationHandler.terminalLog('error', errorTitle, errors);\n        return true;\n    }\n    return false;\n}\n\nconst startTimeoutStatusInterval = 1500;\n\nclass ExternalApplicationManager {\n    externalApplicationConnected = false;\n\n    backendAvailable = backendApiUrl !== null;\n\n    editorManager = EditorManager.getEditorManagerInstance();\n\n    idStatusInterval = null;\n\n    timeoutStatusInterval = startTimeoutStatusInterval;\n\n    appCapabilities = {};\n\n    /**\n     * Function that fetches state of the connection and updates.\n     * `this.externalApplicationConnected` property.\n     */\n    async updateConnectionStatus() {\n        try {\n            const response = await jsonRPC.request('status_get');\n\n            // If the application was connected and the connection was lost, a warning is displayed.\n            if (!response.status.connected && this.externalApplicationConnected) {\n                NotificationHandler.terminalLog('warning', 'External application was disconnected');\n            }\n\n            // If external-app disconnects while running, the progress bar needs to be reset.\n            if (this.externalApplicationConnected !== response.status.connected) {\n                const progressBar = document.querySelector('.progress-bar');\n                progressBar.style.width = '0%';\n                runInfo.forEach((_v, k) => { runInfo.get(k).inProgress = false; });\n            }\n\n            this.externalApplicationConnected = response.status.connected;\n        } catch (error) {\n            this.externalApplicationConnected = false;\n        }\n    }\n\n    /**\n     * Event handler that asks the backend to open a TCP socket that can be connected to.\n     * If the external application did not connect the user is alerted with a feedback message.\n     * This function updates `this.externalApplicationConnected` property\n     *\n     * @returns {null | [string, string]} Null if the connection was successful, otherwise a tuple\n     * containing the toast type and the message.\n     */\n    async openTCP() {\n        try {\n            await jsonRPC.request('external_app_connect');\n            this.externalApplicationConnected = true;\n            return null;\n        } catch (error) {\n            this.externalApplicationConnected = false;\n            const errorCode = error.code ?? JSONRPCCustomErrorCode.EXCEPTION_RAISED;\n            const messageType = (errorCode !== JSONRPCCustomErrorCode.NEWER_SESSION_AVAILABLE) ? 'warning' : 'info';\n            return [messageType, error.message];\n        }\n    }\n\n    /**\n     * Event handler that asks the backend to send a dataflow specification.\n     * If the backend did not manage to send it the user is alerted with a feedback message.\n     * Otherwise the specification is passed to the editor that renders a new environment.\n     */\n    async requestSpecification() {\n        let message = 'Unknown error';\n        try {\n            const data = await jsonRPC.request('specification_get');\n\n            if (data.type === PMMessageType.OK) {\n                const specification = data.content;\n\n                await this.updateSpecification(specification);\n\n                NotificationHandler.terminalLog('info', 'Specification loaded successfully');\n            } else if (data.type === PMMessageType.WARNING) {\n                message = data.content;\n                NotificationHandler.terminalLog('warning', message);\n            } else if (data.type === PMMessageType.ERROR) {\n                message = data.content;\n                NotificationHandler.terminalLog('error', message);\n            }\n        } catch (error) {\n            message = error.message;\n            NotificationHandler.terminalLog('error', message);\n        }\n    }\n\n    async updateSpecification(specification) {\n        if (handleSpecificationResult(\n            EditorManager.validateSpecification(specification),\n            'Warnings when validating specification',\n            'Specification is invalid',\n        )) return;\n        const graph = this.editorManager.saveDataflow();\n        if (handleSpecificationResult(\n            await this.editorManager.updateEditorSpecification(specification),\n            'Warnings when loading specification',\n            'Errors when loading specification',\n        )) return;\n        const errors = await this.editorManager.loadDataflow(graph, true);\n        if (errors.errors.length) {\n            NotificationHandler.terminalLog(\n                'error',\n                `Dataflow doesn't match the updated specification`,\n                errors.errors,\n            );\n        }\n    }\n\n    /**\n    * Provides capabilities of the third-party app connected via server\n    * to Pipeline Manager's frontend.\n    */\n    async requestAppCapabilities() {\n        try {\n            const appCapabilities = await jsonRPC.request('app_capabilities_get');\n            this.appCapabilities = { ...defaultAppCapabilities, ...appCapabilities };\n        } catch (error) {\n            this.appCapabilities = { ...defaultAppCapabilities };\n            NotificationHandler.terminalLog('warning', 'Application capabilities cannot be retrieved, using defaults', error.message);\n        }\n    }\n\n    /**\n    * Handles dataflow export.\n    */\n    async requestDataflowExport() {\n        const dataflow = this.editorManager.saveDataflow();\n        if (!dataflow) return false;\n\n        let data;\n        try {\n            data = await jsonRPC.request('dataflow_export', { dataflow });\n        } catch (error) {\n            // The connection was closed.\n            data = error.message;\n            NotificationHandler.terminalLog('error', data);\n            return false;\n        }\n\n        // Status is HTTPCodes.OK so a message from the application is received.\n        if (data.type === PMMessageType.OK) {\n            return data;\n        }\n\n        if (data.type === PMMessageType.ERROR) {\n            NotificationHandler.terminalLog('error', `Error occurred: ${data.content}`, data.content);\n        } else if (data.type === PMMessageType.WARNING) {\n            NotificationHandler.terminalLog('warning', `Warning: ${data.content}`, data.content);\n        }\n        return false;\n    }\n\n    /**\n     * Event handler that loads a current dataflow from the editor and sends a request\n     * to the backend based on the action argument.\n     * The user is alerted with a feedback message.\n     *\n     * @param procedureName Name of the requested procedure.\n     */\n    async requestDataflowAction(procedureName) {\n        const dataflow = this.editorManager.saveDataflow();\n        const runProcedureInfo = runInfo.get(procedureName);\n        if (!dataflow) return;\n        const validatedProcedureName = (jsonRPC.customMethodRegex.test(procedureName)) ?\n            jsonRPC.customMethodReplace : procedureName;\n\n        if (validatedProcedureName === 'dataflow_run') {\n            if (runProcedureInfo.inProgress) {\n                NotificationHandler.showToast('error', 'Previous run has not finished, cannot process this request');\n                return;\n            }\n            NotificationHandler.showToast('info', 'Running dataflow');\n        }\n        runProcedureInfo.inProgress = true;\n\n        let data;\n        try {\n            if (validatedProcedureName.startsWith('dataflow_')) {\n                data = await jsonRPC.request(procedureName, { dataflow });\n            } else {\n                data = await jsonRPC.request(validatedProcedureName);\n            }\n        } catch (error) {\n            // The connection was closed\n            data = error.message;\n            NotificationHandler.terminalLog('error', 'Cannot create a request', data);\n            runProcedureInfo.inProgress = false;\n            return;\n        }\n\n        handleExternalAppResponse(data);\n        runProcedureInfo.inProgress = false;\n    }\n\n    /**\n     * Event handler that check if remote procedure is running and send stop request.\n     * The user is alerted with a feedback message.\n     *\n     * @param procedureName Name of the requested procedure.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    async requestDataflowStop(procedureName) {\n        if (!runInfo.get(procedureName).inProgress) {\n            NotificationHandler.showToast('error', 'Nothing to stop, no ongoing jobs running');\n            return;\n        }\n\n        try {\n            const response = await jsonRPC.request('dataflow_stop', { method: procedureName });\n            handleExternalAppResponse(response);\n        } catch (error) {\n            NotificationHandler.terminalLog('error', error.message);\n        }\n    }\n\n    /**\n     * Event handler that loads a file and asks the backend to delegate this operation\n     * to the external application to parse it into the Pipeline Manager format\n     * so that it can be loaded into the editor.\n     * It the validation is successful it is loaded as the current dataflow.\n     * Otherwise the user is alerted with a feedback message.\n     *\n     * @param dataflow Dataflow to be impported\n     */\n    async importDataflow() {\n        const file = document.getElementById('request-dataflow-button').files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        const encoding = charset(file.type);\n        const readerPromise = new Promise((resolve) => {\n            reader.onloadend = () => {\n                resolve(\n                    (encoding) ? reader.result : reader.result.replace(/data:.*;base64,/, ''),\n                );\n            };\n        });\n        // Read file as text if possible, otherwise return base64 string\n        if (encoding) {\n            reader.readAsText(file, encoding);\n        } else {\n            reader.readAsDataURL(file);\n        }\n        const dataflow = await readerPromise;\n        if (!dataflow) {\n            NotificationHandler.showToast('error', 'File cannot be loaded');\n            return;\n        }\n\n        try {\n            const data = await jsonRPC.request('dataflow_import', { external_application_dataflow: dataflow, mime: file.type, base64: !encoding });\n            if (data.type === PMMessageType.OK) {\n                const { errors, warnings } = await this.editorManager.loadDataflow(data.content);\n                if (Array.isArray(errors) && errors.length) {\n                    NotificationHandler.terminalLog('error', 'Dataflow is invalid', errors);\n                } else if (Array.isArray(warnings) && warnings.length) {\n                    NotificationHandler.terminalLog('warning', 'Dataflow imported with warning', warnings);\n                } else {\n                    NotificationHandler.showToast('info', 'Imported dataflow');\n                }\n            } else if (data.type === PMMessageType.ERROR) {\n                const message = data.content;\n                NotificationHandler.terminalLog('error', `Error occurred: ${data.content}`, message);\n            } else if (data.type === PMMessageType.WARNING) {\n                NotificationHandler.terminalLog('warning', `Warning: ${data.content}`, 'Imported dataflow');\n            }\n        } catch (error) {\n            const data = error.message;\n            NotificationHandler.terminalLog('error', data);\n        }\n    }\n\n    /**\n     * Send information to external application about changed values (like nodes, connections,\n     * positions, properties).\n     *\n     * @param method Name of the JSON-RPC method.\n     * @param changedProperties Params of the send request, should contain changed values.\n     */\n    async notifyAboutChange(method, changedProperties) {\n        if (\n            this.backendAvailable && this.externalApplicationConnected &&\n            this.editorManager.notifyWhenChanged\n        ) {\n            try {\n                await jsonRPC.request(method, changedProperties);\n            } catch (error) {\n                NotificationHandler.terminalLog(\n                    'warning', 'Error when notifing about change', error.message,\n                );\n            }\n        }\n    }\n\n    /**\n     * Send information to external application about input received by writable terminal.\n     *\n     * @param terminal Name Name of the terminal\n     * @param message Input provided for the terminal\n     */\n    async requestTerminalRead(terminalName, message) {\n        if (!(\n            this.backendAvailable && this.externalApplicationConnected\n        )) {\n            return;\n        }\n        try {\n            await jsonRPC.request('terminal_read', { name: terminalName, message });\n        } catch (error) {\n            NotificationHandler.terminalLog('warning', 'Error when sending terminal input', error.message);\n        }\n    }\n\n    /**\n     * Function that is used by setInterval() to periodically check the status\n     * of the TCP connection. If the connection is not alive, then `initializeConnection`\n     * is invoked.\n     */\n    async checkConnectionStatus() {\n        while (this.interval) {\n            /* eslint-disable-next-line no-await-in-loop */\n            await this.updateConnectionStatus();\n            if (!this.externalApplicationConnected) {\n                runInfo.forEach((_v, k) => { runInfo.get(k).inProgress = false; });\n                /* eslint-disable-next-line no-await-in-loop */\n                await this.initializeConnection(false);\n            }\n            /* eslint-disable-next-line no-await-in-loop,no-promise-executor-return */\n            await new Promise((r) => setTimeout(r, this.timeoutStatusInterval));\n        }\n    }\n\n    /**\n     * Starts status checking.\n     */\n    startStatusInterval() {\n        if (this.idStatusInterval === null) {\n            this.interval = true;\n            this.idStatusInterval = this.checkConnectionStatus();\n        }\n    }\n\n    /**\n     * Function used to initialize connection with the external application and request\n     * specification. Should be called after DOM is created.\n     *\n     * It checks whether a connection is established.\n     * If it is then it just requests a specification.\n     * If it is not then it opens a TCP port, wait for the application to connect and then\n     * requests specification.\n     *\n     * @param checkConnection True if should check connection status beforehand. Used to reduce\n     * the number of requests if the status of the connection is known.\n     */\n    async initializeConnection(checkConnection = true) {\n        if (checkConnection) {\n            await this.updateConnectionStatus();\n        }\n\n        if (!this.externalApplicationConnected) {\n            do {\n                NotificationHandler.terminalLog(\n                    'info',\n                    `Trying to establish connection with external application`,\n                );\n\n                /* eslint-disable-next-line no-await-in-loop */\n                const message = await this.openTCP();\n\n                if (message !== null) {\n                    /* eslint-disable-next-line no-await-in-loop,no-promise-executor-return */\n                    await new Promise((r) => setTimeout(r, this.timeoutStatusInterval));\n                } else {\n                    NotificationHandler.terminalLog(\n                        'info',\n                        `External application connected successfully`,\n                    );\n                }\n            } while (!this.externalApplicationConnected);\n            this.timeoutStatusInterval = startTimeoutStatusInterval;\n        }\n        if (this.externalApplicationConnected) {\n            await Promise.all([\n                this.requestSpecification(),\n                this.requestAppCapabilities(),\n            ]);\n        }\n        if (this.externalApplicationConnected) {\n            try {\n                await jsonRPC.request('frontend_on_connect');\n            } catch (error) {\n                if (error.code !== JSONRPCErrorCode.MethodNotFound &&\n                    error.code !== JSONRPCCustomErrorCode.EXTERNAL_APPLICATION_NOT_CONNECTED) {\n                    NotificationHandler.terminalLog('warning', error.message, error.data);\n                }\n            }\n        }\n    }\n}\n\nlet externalApplicationManager;\n\nexport default function getExternalApplicationManager() {\n    if (!externalApplicationManager) externalApplicationManager = new ExternalApplicationManager();\n    return externalApplicationManager;\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Helper function that can be used to handle double clicks.\n *\n * @param {number} timer time window in which a callback can be fired\n * @param {function} callback event fired on double click\n * @returns event that should be applied to @pointerdown\n */\nexport default function doubleClick(timer, callback) {\n    const doubleClickTimer = timer;\n    let lastClickTime = -doubleClickTimer;\n\n    /* eslint-disable vue/no-mutating-props,no-param-reassign */\n    const onMouseDown = (ev) => {\n        if (Date.now() - lastClickTime < doubleClickTimer) {\n            callback(ev);\n        }\n        lastClickTime = Date.now();\n    };\n\n    return onMouseDown;\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable import/prefer-default-export */\n\n// Mouse position\nlet y = 0;\nlet h = 0;\n\n// Height setting callback\nlet setTerminalHeight;\n\nconst mouseMoveHandler = (e) => {\n    const { clientY } = e;\n    const navBarHeight = 61;\n\n    // Calculate mouse move\n    const dy = y - clientY;\n\n    // Prevent terminal overflow under nav bar\n    if (clientY > navBarHeight) {\n        setTerminalHeight(h + dy);\n    }\n};\n\nconst mouseUpHandler = () => {\n    const terminalWrapper = document.querySelector('.terminal-wrapper');\n\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n    terminalWrapper.style['pointer-events'] = '';\n};\n\nexport const mouseDownHandler = (setHeight) => (e) => {\n    const terminalWrapper = document.querySelector('.terminal-wrapper');\n    setTerminalHeight = setHeight;\n\n    y = e.clientY;\n\n    // Calculate height of terminal panel\n    const styles = window.getComputedStyle(terminalWrapper);\n    h = parseInt(styles.height, 10);\n\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n    terminalWrapper.style['pointer-events'] = 'none';\n};\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst defaultDirection = 'inout';\n\n/**\n * Dynamic interfaces that are controlled with a dedicated property\n * are suffixed with `DYNAMIC_INTERFACE_SUFFIX`.\n*/\nexport const DYNAMIC_INTERFACE_SUFFIX = 'count';\n\n/**\n * Returns a prepared interface that is passed to baklava constructor\n *\n * @param io configuration of the interface\n * @param hidden whether th interface should be hidden. For example groups of interfaces\n * are hidden by default\n * @param {*} name custom name for the interface that should be used instead of the one coming\n * from `io`\n * @returns baklava interface constructor\n */\nfunction createInterface(io, hidden, name = undefined) {\n    const intf = {};\n    Object.assign(intf, io);\n\n    intf.name = name ?? io.name;\n    if (intf.type !== undefined) {\n        intf.type = typeof io.type === 'string' || io.type instanceof String ? [io.type] : io.type;\n    }\n    intf.componentName = 'NodeInterface';\n    intf.hidden = hidden;\n\n    // Readonly values used for detecting whether there were any changes to the interface\n    intf.originalSide = intf.side;\n    intf.originalSidePosition = intf.sidePosition;\n    return intf;\n}\n\n/**\n * Parses and validates interfaces passed in specification\n *\n * @param interfaces list of interfaces from specification that is going to be parsed\n * @param interfaceGroup determines whether `interfaces` are interface groups. If true the\n * additionally field `.interfaces` is parsed.\n * @returns parsed interfaces that can be passed to baklavajs if the interfaces were valid.\n * Otherwise an array of errors is returned.\n */\nfunction parseSingleInterfaces(interfaces, interfaceGroup = false) {\n    const errors = [];\n    const tempParsed = {\n        input: {},\n        inout: {},\n        output: {},\n    };\n\n    interfaces.forEach((io) => {\n        // Omitting interfaces that are marked as dynamic, as they are generated\n        // using 'updateDynamicInterfaces function\n        if (Object.prototype.hasOwnProperty.call(io, 'dynamic')) return;\n\n        // Copy the interface to avoid modifying the original object\n        const tempIO = JSON.parse(JSON.stringify(io));\n\n        const direction = io.direction ?? defaultDirection;\n        tempIO.direction = direction;\n\n        if (io.array !== undefined) {\n            const [left, right] = io.array;\n\n            for (let j = left; j < right; j += 1) {\n                const name = `${io.name}[${j}]`;\n\n                if (tempParsed[direction][name] !== undefined) {\n                    errors.push(\n                        `Interface named '${name}' of direction '${direction}' is a duplicate.`,\n                    );\n                }\n                tempIO.externalName = io.externalName ? `${io.externalName}[${j}]` : undefined;\n\n                // Copy the interface to avoid modifying the assigned object\n                tempParsed[direction][name] = JSON.parse(JSON.stringify(tempIO));\n            }\n        } else {\n            if (tempParsed[direction][io.name] !== undefined) {\n                errors.push(\n                    `Interface named '${io.name}' of direction '${direction}' is a duplicate.`,\n                );\n            }\n\n            tempParsed[direction][io.name] = tempIO;\n        }\n\n        if (interfaceGroup) {\n            const newInterfaces = [];\n\n            tempIO.interfaces.forEach((buildingIO) => {\n                const bdirection = buildingIO.direction ?? defaultDirection;\n                if (buildingIO.array !== undefined) {\n                    const [left, right] = buildingIO.array;\n\n                    for (let j = left; j < right; j += 1) {\n                        const name = `${bdirection}_${buildingIO.name}[${j}]`;\n                        newInterfaces.push(name);\n                    }\n                } else {\n                    const name = `${bdirection}_${buildingIO.name}`;\n                    newInterfaces.push(name);\n                }\n            });\n            tempIO.interfaces = newInterfaces; // eslint-disable-line no-param-reassign\n        }\n    });\n\n    // Removing inout with duplicate names\n    const filteredTempInouts = Object.fromEntries(\n        Object.entries(tempParsed.inout).filter(([name, state]) => {\n            const direction = state.direction ?? defaultDirection;\n            const duplicate =\n                Object.keys(tempParsed.output).includes(name) ||\n                Object.keys(tempParsed.input).includes(name);\n            if (duplicate) {\n                errors.push(\n                    `Interface named '${name}' of direction '${direction}' ` +\n                        `is a duplicate. There already exists an input or output of this name.`,\n                );\n            }\n            return !duplicate;\n        }),\n    );\n\n    tempParsed.inout = filteredTempInouts;\n    tempParsed.input = { ...tempParsed.input, ...tempParsed.inout };\n    delete tempParsed.inout;\n\n    tempParsed.input = Object.fromEntries(\n        Object.entries(tempParsed.input).map(([name, state]) => [\n            `${state.direction}_${name}`,\n            state,\n        ]),\n    );\n    tempParsed.output = Object.fromEntries(\n        Object.entries(tempParsed.output).map(([name, state]) => [\n            `${state.direction}_${name}`,\n            state,\n        ]),\n    );\n\n    if (errors.length) {\n        return errors;\n    }\n\n    return tempParsed;\n}\n\n/**\n * Checks whether interface groups that are in enabledInterfaceGroup\n * can be enabled at the same time\n * @param {array} enabledInterfaceGroups array of names of enabled interface groups\n * @param {*} inputs inputs of the node\n * @param {*} outputs outputs of the node\n * @returns list tuples that have information about conflicting interfaces.\n */\nexport function validateInterfaceGroupsNames(enabledInterfaceGroups, inputs, outputs) {\n    const errors = [];\n    // Checking for integrity of interface groups\n    const usedInterfaces = new Set();\n\n    enabledInterfaceGroups.forEach((name) => {\n        const interfaces = inputs[name]?.interfaces ?? outputs[name]?.interfaces;\n        const groupDirection = name.slice(0, name.indexOf('_'));\n        const groupName = name.slice(name.indexOf('_') + 1);\n\n        interfaces.forEach((intfName) => {\n            if (usedInterfaces.has(intfName)) {\n                const intfDirection = intfName.slice(0, intfName.indexOf('_'));\n                const parsedIntfName = intfName.slice(intfName.indexOf('_') + 1);\n\n                errors.push([parsedIntfName, intfDirection, groupName, groupDirection]);\n            } else {\n                usedInterfaces.add(intfName);\n            }\n        });\n    });\n    return errors;\n}\n\n/**\n * Checks whether interface groups that are in enabledInterfaceGroup\n * can be enabled at the same time\n * @param {array} enabledInterfaceGroups array of names of enabled interface groups\n * @param {*} inputs inputs of the node\n * @param {*} outputs outputs of the node\n * @returns list of explicit errors.\n */\nexport function validateInterfaceGroups(enabledInterfaceGroups, inputs, outputs) {\n    const errors = validateInterfaceGroupsNames(enabledInterfaceGroups, inputs, outputs);\n    const errorMessages = [];\n\n    errors.forEach(([parsedIntfName, intfDirection, groupName, groupDirection]) => {\n        errorMessages.push(\n            `Interface of name '${parsedIntfName}' and direction '${intfDirection}' has been reused ` +\n                `by interface group named '${groupName}' of direction '${groupDirection}'. ` +\n                `Make sure your interface groups are disjoint.`,\n        );\n    });\n\n    return errorMessages;\n}\n\n/**\n *\n * @param {*} inputs inputs of the node\n * @param {*} outputs outputs of the node\n * @returns inputs and outputs of the nodes with `sidePositions` assigned if\n * there were no errors found. Otherwise a list of errors is returned.\n */\nexport function applySidePositions(inputs, outputs) {\n    const tempParsedSides = {\n        left: {},\n        right: {},\n    };\n\n    const errors = [];\n\n    // Dividing interfaces into left and right sides\n    Object.entries({ ...inputs, ...outputs }).forEach(([name, intf]) => {\n        if (intf.side === 'right' || (intf.side === undefined && intf.direction === 'output')) {\n            tempParsedSides.right[name] = { ...intf };\n            tempParsedSides.right[name].side = 'right';\n        } else if (intf.side === 'left' || (intf.side === undefined && intf.direction !== 'output')) {\n            tempParsedSides.left[name] = { ...intf };\n            tempParsedSides.left[name].side = 'left';\n        }\n    });\n\n    const stripName = (name) => name.slice(name.indexOf('_') + 1);\n\n    // validating and setting sidePositions\n    const occupiedInputSidePositions = new Set();\n    const occupiedOutputSidePositions = new Set();\n\n    Object.entries(tempParsedSides.left).forEach(([name, intf]) => {\n        if (intf.sidePosition !== undefined) {\n            if (occupiedInputSidePositions.has(intf.sidePosition)) {\n                errors.push(\n                    `Interface named '${stripName(name)}' of direction '${intf.direction}' has ` +\n                        `invalid sidePosition value '${intf.sidePosition}'. ` +\n                        `There already exists an input or output with this sidePosition.`,\n                );\n            }\n            occupiedInputSidePositions.add(intf.sidePosition);\n        }\n    });\n\n    Object.entries(tempParsedSides.right).forEach(([name, intf]) => {\n        if (intf.sidePosition !== undefined) {\n            if (occupiedOutputSidePositions.has(intf.sidePosition)) {\n                errors.push(\n                    `Interface named '${stripName(name)}' of direction '${intf.direction}' has ` +\n                        `invalid sidePosition value '${intf.sidePosition}'. ` +\n                        `There already exists an input or output with this sidePosition.`,\n                );\n            }\n            occupiedOutputSidePositions.add(intf.sidePosition);\n        }\n    });\n\n    if (errors.length) {\n        return errors;\n    }\n\n    let leftSidePositionIndex = 0;\n    let rightSidePositionIndex = 0;\n\n    const getLeftSidePos = (intf) => {\n        if (intf.sidePosition === undefined) {\n            while (occupiedInputSidePositions.has(leftSidePositionIndex)) {\n                leftSidePositionIndex += 1;\n            }\n            occupiedInputSidePositions.add(leftSidePositionIndex);\n            return leftSidePositionIndex;\n        }\n        return intf.sidePosition;\n    };\n\n    const getRightSidePos = (intf) => {\n        if (intf.sidePosition === undefined) {\n            while (occupiedOutputSidePositions.has(rightSidePositionIndex)) {\n                rightSidePositionIndex += 1;\n            }\n            occupiedOutputSidePositions.add(rightSidePositionIndex);\n            return rightSidePositionIndex;\n        }\n        return intf.sidePosition;\n    };\n\n    Object.entries(tempParsedSides.left).forEach(([, intf]) => {\n        intf.sidePosition = getLeftSidePos(intf); // eslint-disable-line no-param-reassign,max-len\n    });\n\n    Object.entries(tempParsedSides.right).forEach(([, intf]) => {\n        intf.sidePosition = getRightSidePos(intf); // eslint-disable-line no-param-reassign,max-len\n    });\n\n    return {\n        inputs: Object.fromEntries(\n            Object.entries({ ...tempParsedSides.left, ...tempParsedSides.right })\n                .filter(([, intf]) => intf.direction !== 'output'),\n        ),\n        outputs: Object.fromEntries(\n            Object.entries({ ...tempParsedSides.left, ...tempParsedSides.right })\n                .filter(([, intf]) => intf.direction === 'output'),\n        ),\n    };\n}\n\n/**\n * The function reads provided `parsedInterfaces` and looks for interfaces with `dynamic` attribute.\n * For such interfaces, a dedicated property is created that controls the number interface\n * instances. The properties are returned and should be included in node creation.\n *\n * @param {Object} interfaces List of interfaces.\n * @return Object with two properties, success and value. If success is true, value contains\n * an array of properties that should be included in the node. Otherwise, value contains an array\n * of errors.\n */\nexport function generateProperties(interfaces) {\n    const errors = [];\n    const properties = [];\n    interfaces.forEach(\n        (intf) => {\n            if (Object.prototype.hasOwnProperty.call(intf, 'dynamic')) {\n                if (\n                    Array.isArray(intf.dynamic) &&\n                    intf.dynamic.length === 2 &&\n                    Number.isInteger(intf.dynamic[0]) &&\n                    Number.isInteger(intf.dynamic[1])\n                ) {\n                    // Property should have limits specified by 'intf.dynamic' value\n                    properties.push({\n                        name: `${intf.name} ${intf.direction} ${DYNAMIC_INTERFACE_SUFFIX}`,\n                        type: 'integer',\n                        min: intf.dynamic[0],\n                        max: intf.dynamic[1],\n                        default: intf.dynamic[0],\n                        // The type of dynamic interfaces is stored as `interfaceType`\n                        interfaceType: intf.type,\n                        interfaceMaxConnectionCount: intf.maxConnectionCount,\n                    });\n                } else if (intf.dynamic === true) {\n                    // Property should not have limits\n                    properties.push({\n                        name: `${intf.name} ${intf.direction} ${DYNAMIC_INTERFACE_SUFFIX}`,\n                        type: 'integer',\n                        min: 0,\n                        default: 0,\n                        // The type of dynamic interfaces is stored as `interfaceType`\n                        interfaceType: intf.type,\n                        interfaceMaxConnectionCount: intf.maxConnectionCount,\n                    });\n                } else {\n                    errors.push(\n                        `Interface '${intf.name}' has invalid 'dynamic' attribute. ` +\n                        'It should be either a boolean or an array with two integer elements.',\n                    );\n                }\n            }\n        },\n    );\n\n    if (errors.length) {\n        return { success: false, value: errors };\n    }\n    return { success: true, value: properties };\n}\n\n/**\n * @param {*} interfaces List of interfaces in the block (input, output and inout)\n * @param {*} interfaceGroups Object describing groups of interfaces'\n * @param {*} defaultInterfaceGroups Object describing groups of interfaces that are enabled\n * @returns object that has inputs and outputs key if parsing was successful,\n * a list of errors otherwise.\n */\nexport function parseInterfaces(\n    interfaces,\n    interfaceGroups,\n    defaultInterfaceGroups,\n) {\n    let errors = [];\n\n    // Parsing single interfaces first\n    const tempParsed = parseSingleInterfaces(interfaces);\n\n    // If parseSingleInterfaces returns an array, it is an array of errors\n    if (Array.isArray(tempParsed) && tempParsed.length) {\n        return tempParsed;\n    }\n\n    // Checking for integrity of interface groups\n    interfaceGroups.forEach((intfG) => {\n        const directionG = intfG.direction ?? defaultDirection;\n        intfG.interfaces.forEach((intf) => {\n            const direction = intf.direction ?? defaultDirection;\n            if (intf.array !== undefined) {\n                const [left, right] = intf.array;\n\n                for (let j = left; j < right; j += 1) {\n                    const name = `${direction}_${intf.name}[${j}]`;\n                    if (\n                        !Object.keys({ ...tempParsed.input, ...tempParsed.output }).includes(name)\n                    ) {\n                        errors.push(\n                            `Interface named '${intf.name}[${j}]' of direction '${direction}' ` +\n                                `used for interface group '${intfG.name}' of direction ` +\n                                `'${directionG}' does not exist.`,\n                        );\n                    }\n                }\n            } else {\n                const name = `${direction}_${intf.name}`;\n                if (!Object.keys({ ...tempParsed.input, ...tempParsed.output }).includes(name)) {\n                    errors.push(\n                        `Interface named '${intf.name}' of direction '${direction}' ` +\n                            `used for interface group '${intfG.name}' of direction ` +\n                            `'${directionG}' does not exist.`,\n                    );\n                }\n            }\n        });\n    });\n\n    if (errors.length) {\n        return errors;\n    }\n\n    const tempParsedGroups = parseSingleInterfaces(interfaceGroups, true);\n    // If parseSingleInterfaces returns an array, it is an array of errors\n    if (Array.isArray(tempParsedGroups) && tempParsedGroups.length) {\n        return tempParsedGroups;\n    }\n\n    // All interfaces that create some interfaces groups\n    const interfacesCreatingGroups = new Set();\n    Object.values({\n        ...tempParsedGroups.input,\n        ...tempParsedGroups.output,\n    }).forEach((state) => {\n        state.interfaces.forEach((intf) => interfacesCreatingGroups.add(intf));\n    });\n\n    // Detecting integrity of enabled interface groups\n    const enabledInterfaceGroupsNames = defaultInterfaceGroups.map(\n        (group) => `${group.direction ?? defaultDirection}_${group.name}`,\n    );\n\n    errors = validateInterfaceGroups(\n        enabledInterfaceGroupsNames,\n        { ...tempParsedGroups.input, ...tempParsed.input },\n        { ...tempParsedGroups.output, ...tempParsed.output },\n    );\n\n    if (errors.length) {\n        return errors;\n    }\n\n    // Interfaces that belong to groups are removed as they should not have side\n    // positions applied as they are never rendered\n    tempParsed.input = Object.fromEntries(Object.entries(tempParsed.input).filter(\n        ([name]) => !interfacesCreatingGroups.has(name),\n    ));\n\n    tempParsed.output = Object.fromEntries(Object.entries(tempParsed.output).filter(\n        ([name]) => !interfacesCreatingGroups.has(name),\n    ));\n\n    const parsedSides = applySidePositions(\n        { ...tempParsed.input, ...tempParsedGroups.input },\n        { ...tempParsed.output, ...tempParsedGroups.output },\n    );\n    if (Array.isArray(parsedSides) && parsedSides.length) {\n        return parsedSides;\n    }\n\n    const stripName = (name) => name.slice(name.indexOf('_') + 1);\n\n    const createdInterfaces = {\n        inputs: {},\n        outputs: {},\n    };\n\n    // Filtering single interfaces that are part of interface groups\n    // Those interfaces are removed as they are never rendered\n    // This is only used when parsing a specification format\n    Object.entries(parsedSides.inputs).forEach(([name, intf]) => {\n        // It is an interface group\n        if (intf.interfaces !== undefined) {\n            // Adding interfaces groups, hidden by default\n            createdInterfaces.inputs[name] = createInterface(\n                intf,\n                !enabledInterfaceGroupsNames.includes(name),\n                stripName(name),\n            );\n        } else {\n            createdInterfaces.inputs[name] = createInterface(\n                intf,\n                false,\n                stripName(name),\n            );\n        }\n    });\n\n    Object.entries(parsedSides.outputs).forEach(([name, intf]) => {\n        // It is an interface group\n        if (intf.interfaces !== undefined) {\n            // Adding interfaces groups, hidden by default\n            createdInterfaces.outputs[name] = createInterface(\n                intf,\n                !enabledInterfaceGroupsNames.includes(name),\n                stripName(name),\n            );\n        } else {\n            createdInterfaces.outputs[name] = createInterface(\n                intf,\n                false,\n                stripName(name),\n            );\n        }\n    });\n\n    return createdInterfaces;\n}\n","/*\n * Copyright (c) 2022-2023 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Handles incoming notifications from Pipeline Manager: creates toast\n * notifications (popup), adds them to store for notifications panel,\n * logs appropriate notification to terminal window\n */\n\nimport { createToastInterface, POSITION } from 'vue-toastification';\nimport { notificationStore, terminalStore } from './stores.js';\nimport Notification from '../components/Notification.vue';\nimport EditorManager from './EditorManager';\n\nconst toast = createToastInterface({\n    timeout: 5000,\n    position: POSITION.BOTTOM_RIGHT,\n    icon: false,\n    closeButton: false,\n});\n\nexport const LOG_LEVEL = {\n    info: 0,\n    warning: 1,\n    error: 2,\n};\n\nexport default class NotificationHandler {\n    static NotificationHandler = true;\n\n    static defaultShowOption = true;\n\n    /**\n     * Sets the showNotification flag. If set to false, no popup\n     * notifications are shown\n     *\n     * @param show new value for showNotification\n     */\n    static setShowNotification(show) {\n        NotificationHandler.showNotifications = show;\n    }\n\n    /**\n     * Sets the default showNotification flag value.\n     * Does not change whether the notifications are actually set or not,\n     * this should be done in `setShowNotification` or `restoreShowNotification`\n     * methods\n     *\n     * @param showOption default value for showNotification flag\n     */\n    static setShowOption(showOption) {\n        NotificationHandler.defaultShowOption = showOption;\n    }\n\n    /**\n     * Restores show notification flag to it's default value\n     */\n    static restoreShowNotification() {\n        NotificationHandler.showNotifications = NotificationHandler.defaultShowOption;\n    }\n\n    static showToast(type, message) {\n        const content = {\n            component: Notification,\n            props: {\n                type,\n                message,\n            },\n        };\n\n        if (\n            LOG_LEVEL[type] >= LOG_LEVEL[\n                EditorManager.getEditorManagerInstance().baklavaView.logLevel?.toLowerCase()\n            ] && NotificationHandler.showNotifications\n        ) {\n            toast(content);\n        } else {\n            const bell = document.querySelector('#navbar-bell>.indicator');\n            if (bell) {\n                bell.classList.remove('animate');\n                setTimeout(() => bell.classList.add('animate'), 300);\n            }\n        }\n        notificationStore.add({ type, message });\n    }\n\n    /**\n     * Helper function that displays the title of the message as a toast notification and\n     * a full message in terminal with a proper title.\n     *\n     * @param {string} type Type of the toast notification\n     * @param {string} title Title of the message used both for toast and terminal notification.\n     * Preferably without any punctuation marks at the end\n     * @param {Array[string] | string | undefined} messages messages that are displayed in\n     * the terminal\n     */\n    static terminalLog(type, title, messages) {\n        NotificationHandler.showToast(type, title);\n        terminalStore.addParsed(title, messages);\n    }\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { reactive } from 'vue';\n\nconst storageAvailable = (() => {\n    try {\n        const randomKey = Math.random().toString(36);\n        const randomValue = Math.random().toString(36);\n        localStorage.setItem(randomKey, randomValue);\n        localStorage.removeItem(randomKey);\n        return true;\n    } catch {\n        return false;\n    }\n})();\n\nconst pmStorage = new Map();\nconst get = (key) => {\n    if (storageAvailable) return localStorage.getItem(key);\n    return pmStorage.get(key) ?? null;\n};\n\nconst set = (key, value) => {\n    if (storageAvailable) localStorage.setItem(key, value);\n    else pmStorage.set(key, value);\n};\n\nconst remove = (key) => {\n    if (storageAvailable) localStorage.removeItem(key);\n    else pmStorage.delete(key);\n};\n\n/* eslint-disable import/prefer-default-export */\nexport const notificationStore = reactive({\n    notifications: JSON.parse(get('notifications')) || [],\n    add(notification) {\n        this.notifications.push(notification);\n\n        set('notifications', JSON.stringify(this.notifications));\n    },\n\n    remove() {\n        remove('notifications');\n        this.notifications = [];\n    },\n\n    removeOne(index) {\n        const newNotifications = this.notifications.filter((_, idx) => index !== idx);\n\n        set('notifications', JSON.stringify(newNotifications));\n        this.notifications = newNotifications;\n    },\n});\n\nexport const MAIN_TERMINAL = 'Terminal';\n\nexport const terminalStore = reactive({\n    // Object\n    logs: {\n        Terminal: JSON.parse(get(`logs`)) || [],\n    },\n    readOnly: {\n        Terminal: true,\n    },\n    add(log, instance = MAIN_TERMINAL) {\n        this.logs[instance].push(log);\n\n        // Update localStorage only for the main terminal\n        if (instance === MAIN_TERMINAL) {\n            set(`logs`, JSON.stringify(this.logs[instance]));\n        }\n    },\n    isReadOnly(instance = MAIN_TERMINAL) {\n        return this.readOnly[instance];\n    },\n\n    /**\n     * Adds a parsed notification. If there are messages, then it returns a following message:\n     *\n     * Title:\n     *     message_first_line\n     *     message_second_line\n     *     ...\n     *     message_last_line\n     *\n     * Otherwise, if messages are empty, then it returns a following message:\n     *\n     * Title.\n     *\n     * @param {string} title title of the message\n     * @param {Array[string] | string | undefined} messages messages of the message\n     */\n    addParsed(title, messages, instance = MAIN_TERMINAL) {\n        let parsedMessage = title;\n        if (messages) {\n            if (typeof messages === 'string' || messages instanceof String) {\n                messages = [messages]; // eslint-disable-line no-param-reassign\n            }\n            parsedMessage += ':';\n\n            messages.forEach((message) => {\n                parsedMessage += '\\n';\n                parsedMessage += '    ';\n                parsedMessage += message;\n            });\n        } else {\n            parsedMessage += '.';\n        }\n        this.add(parsedMessage, instance);\n    },\n\n    remove(instance = MAIN_TERMINAL) {\n        if (instance === MAIN_TERMINAL) {\n            remove(`logs`);\n        }\n        this.logs[instance] = [];\n    },\n\n    /**\n     * Creates a new terminal instance.\n     * If such terminal already exisists, then false is returned.\n     *\n     * @param {string} Unique name of the terminal instance to be created.\n     * @param {boolean} If true, then the terminal instance will be only for read.\n     * @returns returns true if terminal was created, false otherwise.\n     */\n    createTerminalInstance(name, readOnly = true) {\n        if (Object.keys(this.logs).includes(name)) return false;\n\n        this.logs[name] = [];\n        this.readOnly[name] = readOnly;\n        return true;\n    },\n});\n"],"names":["suppressingHistory","transactionId","Step","constructor","type","topic","tid","Object","defineProperty","this","enumerable","configurable","writable","value","add","graph","Error","remove","edit","NodeStep","super","undefined","nodeTuple","addNode","load","node","nodes","find","n","id","save","removeNode","interfaces","values","inputs","outputs","connections","filter","c","includes","from","to","forEach","conn","addConnection","ConnectionStep","fromNode","findNodeById","nodeId","toNode","iface","port","connAdded","removeConnection","AnchorStep","anchor","anchors","splice","suppressHistoryLogging","startTransaction","commitTransaction","useHistory","commandHandler","token","Symbol","history","Map","undoneHistory","currentId","oldId","unsubscribeFromGraphEvents","g","tok","events","unsubscribe","editNode","addAnchor","removeAnchor","graphSwitch","newGraph","oldGraph","copyStateStack","get","set","undoneItem","historyItem","subscribe","push","toString","step","_a","inTransaction","slice","reverse","emit","indexOf","tuple","idx","Math","trunc","flush","immediate","singleStepTransaction","mainHistory","auxiliaryHistory","pop","length","selectedNodes","registerCommand","canExecute","execute","registerHotkey","max_steps","RunInfo","procedureName","progressBar","document","querySelector","inProgress","pr_inProgress","classList","style","width","hook","DefaultMap","defaultFactory","key","has","arguments","newValue","setHook","v","ir","clearRegistry","exposedInterfaces","clear","pushGraphIdToRegistry","intfId","graphId","sharedInterface","graphIds","createSharedInterface","intf","maxConnectionsCount","connectionCount","isRegistered","getRegisteredInterface","deleteRegisteredInterface","delete","registerInterface","sharedInterfaceGraphId","gridSnapper","movementStep","coord","round","nodeSnapper","kind","selectedNodesIds","nearestCoords","map","position","otherCoords","abs","min","COPY_COMMAND","DELETE_COMMAND","UNHIGHLIGHT_COMMAND","PASTE_COMMAND","BaklavaInterfaceTypes","types","defaultStyle","interfaceConnectionPattern","interfaceConnectionColor","interfaceColor","viewPlugin","hooks","renderInterface","el","firstType","normalizeType","t","color","arrow","backgroundColor","greyArrow","getComputedStyle","getPropertyValue","String","getConnectionStyle","fromTypes","toTypes","commonTypes","Array","isArray","readInterfaceTypes","metadata","entries","io","name","nodeBottomPoint","connection","scaling","panning","nodeHtml","getElementById","offsetTop","offsetHeight","y","calculateEllipseR","x","cx","cy","slope","sqrt","NormalizedConnection","x1","y1","x2","y2","direction","ConnectionRenderer","viewModel","randomizedOffset","getShift","ncFrom","ncTo","shiftIndex","sidePosition","fromNodeNeighbours","side","toNodeNeighbours","reduce","accumulator","char","charCodeAt","curvedRender","nc","dx","rightmost","max","leftmost","curvedRenderLoopback","displayedGraph","sideMargin","shift","leftRx","leftRy","renderingSide","leftx","rightx","lefty","righty","bottomY","rightCx","rightCy","rightRx","rightRy","bottomCx","bottomCy","bottomRx","bottomRy","leftCx","leftCy","orthogonalRender","a","path","offset","minMargin","middlePoint","mid","firstTurn","lastTurn","orthogonalRenderLoopback","xShift","render","loopback","isLoopback","Specification","static","currentSpecification","unresolvedSpecification","instance","getInstance","getNodeSpecification","nodeName","startsWith","graphs","Metadata","state","default","DEFAULT_GRAPH_NODE_CATEGORY","DEFAULT_GRAPH_NODE_NAME","DEFAULT_GRAPH_NODE_TYPE","async","loadJsonFromRemoteLocation","customLocation","location","loc","relativeurl","href","split","join","jsonsubs","VUE_APP_JSON_URL_SUBSTITUTES","subs","JSON","parse","parts","substring","specifiedUrl","keys","replace","parseLocation","fetchedContent","fetch","mode","error","message","json","EditorManager","defaultMetadata","editor","baklavaView","specificationLoaded","specification","updatedMetadata","unregisterNodes","connectionRenderer","connectionStyle","layoutManager","useAlgorithm","layout","interfaceTypes","layers","collapseSidebar","allowLoopbacks","navbarItems","cache","logLevel","specificationVersion","clipboard","nodeBuffer","connectionBuffer","consecutivePasteNumber","isEmpty","findInterface","i","readonly","interfacesOfSelectedNodes","flatMap","stringify","_b","idmap","parsedNodeBuffer","parsedConnectionBuffer","newNodes","newConnections","executeCommand","nodeType","subgraph","nodeTypes","copiedNode","beforeLoad","nodeState","ns","graphState","mapNewId","obj","newId","assignNewIds","subNode","externalName","resolveNewExposedName","assign","graphNode","updateExposedInterfaces","fromId","toId","fromIntf","toIntf","newConnection","useClipboard","updateEditorSpecification","dataflowSpecification","lazyLoad","jsonlint","errors","warnings","clearEditorManagerState","version","globalVisitedSpecs","Set","includeErrors","downloadNestedImports","includeGraphs","includeGraphsErrors","updateMetadata","newErrors","newWarnings","updateGraphSpecification","unregisterGraphs","deepCleanEditor","trace","specificationAndTrace","currentImports","include","Promise","all","specificationUrl","status","val","spec","specTrace","newSpecification","mergeObjects","size","dataflows","dataflow","url","dataflowMetadata","targetGraph","category","registerDefaultNodes","myGraph","addGraphTemplate","resolvedNodes","preprocessedNodes","preprocessNodes","resolveInheritance","e","validateResolvedSpecification","extends","eName","extended","extending","siblings","myNode","layer","properties","interfaceGroups","defaultInterfaceGroups","twoColumn","description","registerNodeType","title","isCategory","icon","nodeIcons","baseName","suffix","baseUrl","baseIconUrls","urls","urlName","nodeURLs","graphToValidate","prototype","hasOwnProperty","call","loadingErrors","loadingWarnings","loadDataflow","warning","uniqueWarnings","defaultErrors","defaultWarnings","at","overriding","loading","newMetadata","baseURLs","icons","iconName","hideHud","settings","background","gridSize","backgroundSize","ignoredLayers","unsortedNodes","isObject","mergeNodes","child","base","output","structuredClone","baseNames","fromEntries","index","override","recurrentMerge","abstract","saveSpecification","saveDataflow","currVal","m","dm","preventCentering","loadOnly","notifyWhenChanged","validationErrors","validateDataflow","validateMetadata","err","getEditorManagerInstance","primaryObject","secondaryObject","validateJSONWithSchema","data","schema","additionalAjvOptions","ajv","allowUnionTypes","formats","hex","schemas","addKeyword","validate","compile","isTextFormat","dataJSON","exception","$id","instancePath","errorPrefix","result","lineStart","pointers","line","lineEnd","valueEnd","keyword","params","allowedValues","additionalProperty","allowedValue","unevaluatedProperty","validateSpecification","categoryNodes","definedCategories","nodeNames","categories","categoryNodeName","remainingCategories","extendedNode","commonPrefix","jsonmetadata","isInsideSubgraph","returnFromSubgraph","backFromSubgraph","updateSubgraphName","updateCurrentSubgraphName","BaseLayoutEngine","availableAlgorithms","chooseAlgorithm","algorithm","activeAlgorithm","calculate","BaseLayoutAlgorithm","CytoscapeLayoutEngine","cytoscapeGraph","elements","height","edges","source","target","selector","shape","styleEnabled","options","boundingBox","w","h","avoidOverlapPadding","nodeOverlap","idealEdgeLength","edge","nodeSpacing","ranker","nodeSep","rankSep","run","promiseOn","NoLayoutAlgorithm","LayoutManager","layoutEngine","usedAlgorithm","availableEngines","NoLayout","CytoscapeEngine","engineName","algorithmName","getAvailableAlgorithms","engine","flat","registerGraph","interfaceToNodeId","dataflowToGraph","computeLayout","updateDimensions","idToPosition","graphToDataflow","runEngine","HTMLelement","offsetWidth","parseProperties","parsedProperties","usedNames","prop","group","parsedGroup","pgroupname","realname","parseNodeState","newState","out","enabledInterfaceGroups","instanceName","parsed","CustomNode","nodeExtends","nodeExtending","nodeSiblings","k","addInput","addOutput","updateDynamicInterfaces","interfaceType","interfaceMaxConnectionsCount","propName","interfaceName","occupied","left","right","stateios","ioName","ioState","directionIoName","container","firstUnoccupied","sort","b","findIndex","maxConnectionCount","newInputs","newOutputs","updateInterfaces","bind","reactiveUpdate","toggleInterfaceGroup","visible","hidden","graphInstance","savedState","newProperties","newInterfaces","stateInputs","stateOutputs","some","prefix","privatizeInterface","removeInput","idA","intfA","foundIntf","idB","intfB","baklavaIntf","addInterface","removeOutput","updateProperties","stateProperties","propA","baklavaProp","setPort","componentName","parsedState","endsWith","parsedValue","propertyType","propType","checkType","items","dtype","mismatchedElements","groupName","detectDiscrepancies","groupState","refreshSidePositions","maxposition","onDestroy","event","CustomNodeFactory","generatedProperties","success","parsedInterfaces","createBaklavaInterface","createdProperties","getIntf","p","propDef","toLowerCase","BigInt","NaN","it","element","console","tempProperties","pname","groupedProperty","pgroup","createProperties","updateSubgraphInterfaces","INTERFACE_PREFIXES","exposedIntf","countedIntfNames","create","externalInterfaces","errorMessages","newInterfacesPositionsOrErrors","GraphFactory","backendApiUrl","window","protocol","editorManager","getGraph","graph_id","getNode","node_id","getProperty","graph_get","properties_change","property","new_value","position_change","nodes_change","added","info","deleted","remove_with_connections","removeNodeOnly","connections_change","findNodeInterface","getConnection","graph_change","properties_get","node_get","progress_change","procedureInfo","method","progress","metadata_change","viewport_center","centerZoom","terminal_add","createTerminalInstance","terminal_write","logs","notification_send","terminalLog","details","specification_change","getExternalApplicationManager","updateSpecification","customMethodRegex","customMethodReplace","JSONRPCServerAndClient","strict","frontendEndpoints","backendEndpoints","s","externalEndpoints","invalidDefinition","endpoints","definitionName","definition","returns","validateServerRequestResponse","next","request","serverParams","createJSONRPCErrorResponse","response","jsonRPCID","createID","commonHeaders","requestSchema","MAX_MESSAGE_LENGTH","socket","jsonRPCServer","jsonRPC","extraHeaders","JSONRPCServer","JSONRPCClient","test","disconnected","reject","endpoint","messageID","crypto","randomUUID","chunk","end","resolve","server","applyMiddleware","func","addMethod","showToast","on","rejectAllPendingRequests","receive","ack","emitWithAck","client","createServer","defaultAppCapabilities","handleExternalAppResponse","content","handleSpecificationResult","errorTitle","warningTitle","ExternalApplicationManager","externalApplicationConnected","backendAvailable","idStatusInterval","timeoutStatusInterval","appCapabilities","updateConnectionStatus","connected","_v","openTCP","code","requestSpecification","requestAppCapabilities","requestDataflowExport","requestDataflowAction","runProcedureInfo","validatedProcedureName","requestDataflowStop","importDataflow","file","files","reader","FileReader","encoding","charset","readerPromise","onloadend","readAsText","readAsDataURL","external_application_dataflow","mime","base64","notifyAboutChange","changedProperties","requestTerminalRead","terminalName","checkConnectionStatus","interval","initializeConnection","r","setTimeout","startStatusInterval","checkConnection","JSONRPCErrorCode","MethodNotFound","externalApplicationManager","doubleClick","timer","callback","doubleClickTimer","lastClickTime","ev","Date","now","setTerminalHeight","mouseMoveHandler","clientY","mouseUpHandler","terminalWrapper","removeEventListener","mouseDownHandler","setHeight","styles","parseInt","addEventListener","defaultDirection","DYNAMIC_INTERFACE_SUFFIX","createInterface","originalSide","originalSidePosition","parseSingleInterfaces","interfaceGroup","tempParsed","input","inout","tempIO","array","j","buildingIO","bdirection","filteredTempInouts","duplicate","validateInterfaceGroupsNames","usedInterfaces","groupDirection","intfName","intfDirection","parsedIntfName","validateInterfaceGroups","applySidePositions","tempParsedSides","stripName","occupiedInputSidePositions","occupiedOutputSidePositions","leftSidePositionIndex","rightSidePositionIndex","getLeftSidePos","getRightSidePos","generateProperties","dynamic","Number","isInteger","interfaceMaxConnectionCount","parseInterfaces","intfG","directionG","tempParsedGroups","interfacesCreatingGroups","enabledInterfaceGroupsNames","parsedSides","createdInterfaces","toast","timeout","BOTTOM_RIGHT","closeButton","LOG_LEVEL","NotificationHandler","setShowNotification","show","showNotifications","setShowOption","showOption","defaultShowOption","restoreShowNotification","component","props","bell","messages","addParsed","storageAvailable","randomKey","random","randomValue","localStorage","setItem","removeItem","pmStorage","getItem","notificationStore","notifications","notification","removeOne","newNotifications","_","MAIN_TERMINAL","terminalStore","Terminal","readOnly","log","isReadOnly","parsedMessage"],"sourceRoot":""}